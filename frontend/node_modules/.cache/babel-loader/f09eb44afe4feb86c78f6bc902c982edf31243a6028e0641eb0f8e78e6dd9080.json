{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\voice-auth-system\\\\frontend\\\\src\\\\components\\\\VoiceRecorder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { registerVoice, loginVoice } from '../utils/api';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst VoiceRecorder = ({\n  mode,\n  userData,\n  handleStatus\n}) => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [countdown, setCountdown] = useState(10);\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [passphrase, setPassphrase] = useState('');\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const countdownRef = useRef(null);\n  useEffect(() => {\n    return () => {\n      if (countdownRef.current) clearInterval(countdownRef.current);\n      if (mediaRecorderRef.current) {\n        mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n  const convertToWav = async audioData => {\n    const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    const audioBuffer = await audioContext.decodeAudioData(await audioData.arrayBuffer());\n\n    // Create WAV file\n    const numberOfChannels = audioBuffer.numberOfChannels;\n    const length = audioBuffer.length * numberOfChannels * 2;\n    const buffer = new ArrayBuffer(44 + length);\n    const view = new DataView(buffer);\n\n    // Write WAV header\n    // \"RIFF\" identifier\n    writeString(view, 0, 'RIFF');\n    // File size\n    view.setUint32(4, 36 + length, true);\n    // \"WAVE\" identifier\n    writeString(view, 8, 'WAVE');\n    // \"fmt \" chunk\n    writeString(view, 12, 'fmt ');\n    // Chunk size\n    view.setUint32(16, 16, true);\n    // Audio format (PCM)\n    view.setUint16(20, 1, true);\n    // Number of channels\n    view.setUint16(22, numberOfChannels, true);\n    // Sample rate\n    view.setUint32(24, audioBuffer.sampleRate, true);\n    // Byte rate\n    view.setUint32(28, audioBuffer.sampleRate * numberOfChannels * 2, true);\n    // Block align\n    view.setUint16(32, numberOfChannels * 2, true);\n    // Bits per sample\n    view.setUint16(34, 16, true);\n    // \"data\" chunk\n    writeString(view, 36, 'data');\n    view.setUint32(40, length, true);\n\n    // Write audio data\n    const offset = 44;\n    const channelData = [];\n    for (let i = 0; i < numberOfChannels; i++) {\n      channelData[i] = audioBuffer.getChannelData(i);\n    }\n    for (let i = 0; i < audioBuffer.length; i++) {\n      for (let channel = 0; channel < numberOfChannels; channel++) {\n        const sample = Math.max(-1, Math.min(1, channelData[channel][i]));\n        const int16 = sample < 0 ? sample * 0x8000 : sample * 0x7FFF;\n        view.setInt16(offset + (i * numberOfChannels + channel) * 2, int16, true);\n      }\n    }\n    return new Blob([buffer], {\n      type: 'audio/wav'\n    });\n  };\n  const writeString = (view, offset, string) => {\n    for (let i = 0; i < string.length; i++) {\n      view.setUint8(offset + i, string.charCodeAt(i));\n    }\n  };\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          channelCount: 1,\n          sampleRate: 16000\n        }\n      });\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      audioChunksRef.current = [];\n      mediaRecorderRef.current.ondataavailable = e => {\n        audioChunksRef.current.push(e.data);\n      };\n      mediaRecorderRef.current.onstop = async () => {\n        const audioData = new Blob(audioChunksRef.current);\n        const wavBlob = await convertToWav(audioData);\n        setAudioBlob(wavBlob);\n        processRecording(wavBlob);\n      };\n      mediaRecorderRef.current.start();\n      setIsRecording(true);\n      startCountdown();\n    } catch (err) {\n      handleStatus('Microphone access denied. Please allow microphone permissions.', 'error');\n      console.error('Error accessing microphone:', err);\n    }\n  };\n  const startCountdown = () => {\n    setCountdown(10);\n    countdownRef.current = setInterval(() => {\n      setCountdown(prev => {\n        if (prev <= 1) {\n          clearInterval(countdownRef.current);\n          stopRecording();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n  const stopRecording = () => {\n    if (mediaRecorderRef.current) {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n      mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());\n    }\n  };\n  const processRecording = async blob => {\n    try {\n      let response;\n      if (mode === 'register') {\n        response = await registerVoice(blob, userData);\n      } else {\n        response = await loginVoice(blob, userData.username);\n      }\n      if (response.success) {\n        setPassphrase(response.passphrase || '');\n        handleStatus(response.message, 'success');\n      } else {\n        handleStatus(response.message, 'error');\n      }\n    } catch (err) {\n      handleStatus('Failed to process recording. Please try again.', 'error');\n      console.error('Error processing recording:', err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel-title\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-microphone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: mode === 'register' ? 'Voice Registration' : 'Voice Authentication'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `btn btn-primary ${isRecording ? 'disabled' : ''}`,\n        onClick: startRecording,\n        disabled: isRecording,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-microphone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 21\n        }, this), mode === 'register' ? 'Record Passphrase' : 'Verify Identity']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this), isRecording && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recording-indicator\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pulse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Recording your voice... Please speak now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: countdown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"voice-wave\",\n        children: [...Array(8)].map((_, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wave-bar\"\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), passphrase && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-box\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-text\",\n        children: [\"Your \", mode === 'register' ? 'registered' : 'recognized', \" passphrase:\", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\" \\\"\", passphrase, \"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 9\n  }, this);\n};\n_s(VoiceRecorder, \"qG2QUNgwD7BrCv8Y2/BNeRmjsOk=\");\n_c = VoiceRecorder;\nexport default VoiceRecorder;\nvar _c;\n$RefreshReg$(_c, \"VoiceRecorder\");","map":{"version":3,"names":["React","useState","useEffect","useRef","registerVoice","loginVoice","jsxDEV","_jsxDEV","Fragment","_Fragment","VoiceRecorder","mode","userData","handleStatus","_s","isRecording","setIsRecording","countdown","setCountdown","audioBlob","setAudioBlob","passphrase","setPassphrase","mediaRecorderRef","audioChunksRef","countdownRef","current","clearInterval","stream","getTracks","forEach","track","stop","convertToWav","audioData","audioContext","window","AudioContext","webkitAudioContext","audioBuffer","decodeAudioData","arrayBuffer","numberOfChannels","length","buffer","ArrayBuffer","view","DataView","writeString","setUint32","setUint16","sampleRate","offset","channelData","i","getChannelData","channel","sample","Math","max","min","int16","setInt16","Blob","type","string","setUint8","charCodeAt","startRecording","navigator","mediaDevices","getUserMedia","audio","channelCount","MediaRecorder","ondataavailable","e","push","data","onstop","wavBlob","processRecording","start","startCountdown","err","console","error","setInterval","prev","stopRecording","blob","response","username","success","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","Array","map","_","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/voice-auth-system/frontend/src/components/VoiceRecorder.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { registerVoice, loginVoice } from '../utils/api';\r\n\r\nconst VoiceRecorder = ({ mode, userData, handleStatus }) => {\r\n    const [isRecording, setIsRecording] = useState(false);\r\n    const [countdown, setCountdown] = useState(10);\r\n    const [audioBlob, setAudioBlob] = useState(null);\r\n    const [passphrase, setPassphrase] = useState('');\r\n    const mediaRecorderRef = useRef(null);\r\n    const audioChunksRef = useRef([]);\r\n    const countdownRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            if (countdownRef.current) clearInterval(countdownRef.current);\r\n            if (mediaRecorderRef.current) {\r\n                mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    const convertToWav = async (audioData) => {\r\n        const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n        const audioBuffer = await audioContext.decodeAudioData(await audioData.arrayBuffer());\r\n        \r\n        // Create WAV file\r\n        const numberOfChannels = audioBuffer.numberOfChannels;\r\n        const length = audioBuffer.length * numberOfChannels * 2;\r\n        const buffer = new ArrayBuffer(44 + length);\r\n        const view = new DataView(buffer);\r\n        \r\n        // Write WAV header\r\n        // \"RIFF\" identifier\r\n        writeString(view, 0, 'RIFF');\r\n        // File size\r\n        view.setUint32(4, 36 + length, true);\r\n        // \"WAVE\" identifier\r\n        writeString(view, 8, 'WAVE');\r\n        // \"fmt \" chunk\r\n        writeString(view, 12, 'fmt ');\r\n        // Chunk size\r\n        view.setUint32(16, 16, true);\r\n        // Audio format (PCM)\r\n        view.setUint16(20, 1, true);\r\n        // Number of channels\r\n        view.setUint16(22, numberOfChannels, true);\r\n        // Sample rate\r\n        view.setUint32(24, audioBuffer.sampleRate, true);\r\n        // Byte rate\r\n        view.setUint32(28, audioBuffer.sampleRate * numberOfChannels * 2, true);\r\n        // Block align\r\n        view.setUint16(32, numberOfChannels * 2, true);\r\n        // Bits per sample\r\n        view.setUint16(34, 16, true);\r\n        // \"data\" chunk\r\n        writeString(view, 36, 'data');\r\n        view.setUint32(40, length, true);\r\n\r\n        // Write audio data\r\n        const offset = 44;\r\n        const channelData = [];\r\n        for (let i = 0; i < numberOfChannels; i++) {\r\n            channelData[i] = audioBuffer.getChannelData(i);\r\n        }\r\n        \r\n        for (let i = 0; i < audioBuffer.length; i++) {\r\n            for (let channel = 0; channel < numberOfChannels; channel++) {\r\n                const sample = Math.max(-1, Math.min(1, channelData[channel][i]));\r\n                const int16 = sample < 0 ? sample * 0x8000 : sample * 0x7FFF;\r\n                view.setInt16(offset + (i * numberOfChannels + channel) * 2, int16, true);\r\n            }\r\n        }\r\n\r\n        return new Blob([buffer], { type: 'audio/wav' });\r\n    };\r\n\r\n    const writeString = (view, offset, string) => {\r\n        for (let i = 0; i < string.length; i++) {\r\n            view.setUint8(offset + i, string.charCodeAt(i));\r\n        }\r\n    };\r\n\r\n    const startRecording = async () => {\r\n        try {\r\n            const stream = await navigator.mediaDevices.getUserMedia({ \r\n                audio: {\r\n                    channelCount: 1,\r\n                    sampleRate: 16000\r\n                } \r\n            });\r\n            mediaRecorderRef.current = new MediaRecorder(stream);\r\n            audioChunksRef.current = [];\r\n            \r\n            mediaRecorderRef.current.ondataavailable = (e) => {\r\n                audioChunksRef.current.push(e.data);\r\n            };\r\n            \r\n            mediaRecorderRef.current.onstop = async () => {\r\n                const audioData = new Blob(audioChunksRef.current);\r\n                const wavBlob = await convertToWav(audioData);\r\n                setAudioBlob(wavBlob);\r\n                processRecording(wavBlob);\r\n            };\r\n            \r\n            mediaRecorderRef.current.start();\r\n            setIsRecording(true);\r\n            startCountdown();\r\n            \r\n        } catch (err) {\r\n            handleStatus('Microphone access denied. Please allow microphone permissions.', 'error');\r\n            console.error('Error accessing microphone:', err);\r\n        }\r\n    };\r\n\r\n    const startCountdown = () => {\r\n        setCountdown(10);\r\n        countdownRef.current = setInterval(() => {\r\n            setCountdown(prev => {\r\n                if (prev <= 1) {\r\n                    clearInterval(countdownRef.current);\r\n                    stopRecording();\r\n                    return 0;\r\n                }\r\n                return prev - 1;\r\n            });\r\n        }, 1000);\r\n    };\r\n\r\n    const stopRecording = () => {\r\n        if (mediaRecorderRef.current) {\r\n            mediaRecorderRef.current.stop();\r\n            setIsRecording(false);\r\n            mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());\r\n        }\r\n    };\r\n\r\n    const processRecording = async (blob) => {\r\n        try {\r\n            let response;\r\n            if (mode === 'register') {\r\n                response = await registerVoice(blob, userData);\r\n            } else {\r\n                response = await loginVoice(blob, userData.username);\r\n            }\r\n            \r\n            if (response.success) {\r\n                setPassphrase(response.passphrase || '');\r\n                handleStatus(response.message, 'success');\r\n            } else {\r\n                handleStatus(response.message, 'error');\r\n            }\r\n        } catch (err) {\r\n            handleStatus('Failed to process recording. Please try again.', 'error');\r\n            console.error('Error processing recording:', err);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"panel\">\r\n            <div className=\"panel-title\">\r\n                <i className=\"fas fa-microphone\"></i>\r\n                <h2>{mode === 'register' ? 'Voice Registration' : 'Voice Authentication'}</h2>\r\n            </div>\r\n            \r\n            <div className=\"buttons\">\r\n                <button \r\n                    className={`btn btn-primary ${isRecording ? 'disabled' : ''}`}\r\n                    onClick={startRecording}\r\n                    disabled={isRecording}\r\n                >\r\n                    <i className=\"fas fa-microphone\"></i> \r\n                    {mode === 'register' ? 'Record Passphrase' : 'Verify Identity'}\r\n                </button>\r\n            </div>\r\n            \r\n            {isRecording && (\r\n                <>\r\n                    <div className=\"recording-indicator\">\r\n                        <div className=\"pulse\"></div>\r\n                        <div>Recording your voice... Please speak now</div>\r\n                    </div>\r\n                    <div className=\"timer\">{countdown}</div>\r\n                    <div className=\"voice-wave\">\r\n                        {[...Array(8)].map((_, i) => (\r\n                            <div key={i} className=\"wave-bar\"></div>\r\n                        ))}\r\n                    </div>\r\n                </>\r\n            )}\r\n            \r\n            {passphrase && (\r\n                <div className=\"result-box\">\r\n                    <div className=\"result-text\">\r\n                        Your {mode === 'register' ? 'registered' : 'recognized'} passphrase: \r\n                        <span> \"{passphrase}\"</span>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VoiceRecorder;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}