{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\-IdentiVoice\\\\frontend\\\\src\\\\components\\\\VoiceRecorder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { registerVoice, loginVoice } from '../utils/api';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst VoiceRecorder = ({\n  mode,\n  userData,\n  handleStatus\n}) => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [countdown, setCountdown] = useState(10);\n  const [passphrase, setPassphrase] = useState('');\n  const audioChunksRef = useRef([]);\n  const mediaStreamRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const countdownRef = useRef(null);\n  useEffect(() => {\n    return () => cleanupRecording();\n  }, []);\n  const cleanupRecording = () => {\n    try {\n      var _mediaRecorderRef$cur, _mediaStreamRef$curre;\n      if (((_mediaRecorderRef$cur = mediaRecorderRef.current) === null || _mediaRecorderRef$cur === void 0 ? void 0 : _mediaRecorderRef$cur.state) !== 'inactive') {\n        mediaRecorderRef.current.stop();\n      }\n      (_mediaStreamRef$curre = mediaStreamRef.current) === null || _mediaStreamRef$curre === void 0 ? void 0 : _mediaStreamRef$curre.getTracks().forEach(track => track.stop());\n      clearInterval(countdownRef.current);\n      setIsRecording(false);\n      setCountdown(10);\n      audioChunksRef.current = [];\n    } catch (err) {\n      console.error('Error in cleanup:', err);\n    }\n  };\n  const startRecording = async () => {\n    try {\n      cleanupRecording();\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      mediaStreamRef.current = stream;\n      const recorder = new MediaRecorder(stream);\n      mediaRecorderRef.current = recorder;\n      recorder.ondataavailable = e => {\n        if (e.data.size > 0) audioChunksRef.current.push(e.data);\n      };\n      recorder.onstop = async () => {\n        try {\n          const blob = new Blob(audioChunksRef.current, {\n            type: 'audio/webm'\n          });\n          const wavBlob = await convertToWav(blob);\n          await processRecording(wavBlob);\n        } catch (err) {\n          console.error('Error creating WAV:', err);\n          handleStatus('Error converting recording to WAV format.', 'error');\n        }\n      };\n      recorder.start(100);\n      setIsRecording(true);\n      startCountdown();\n    } catch (err) {\n      console.error('Error starting recording:', err);\n      handleStatus('Failed to start recording. Check microphone permissions.', 'error');\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n      mediaRecorderRef.current.stop();\n    }\n  };\n  const startCountdown = () => {\n    countdownRef.current = setInterval(() => {\n      setCountdown(prev => {\n        if (prev <= 1) {\n          clearInterval(countdownRef.current);\n          stopRecording();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n  const convertToWav = async webmBlob => {\n    const arrayBuffer = await webmBlob.arrayBuffer();\n    const audioCtx = new (window.AudioContext || window.webkitAudioContext)({\n      sampleRate: 16000\n    });\n    const audioBuffer = await audioCtx.decodeAudioData(arrayBuffer);\n    const channelData = audioBuffer.numberOfChannels > 1 ? averageChannels(audioBuffer) : audioBuffer.getChannelData(0);\n    const pcmData = floatTo16BitPCM(channelData);\n    const header = createWavHeader(pcmData.length * 2, 16000, 1, 16);\n    const wavBuffer = new Uint8Array(header.byteLength + pcmData.byteLength);\n    wavBuffer.set(new Uint8Array(header), 0);\n    wavBuffer.set(new Uint8Array(pcmData.buffer), header.byteLength);\n    return new Blob([wavBuffer], {\n      type: 'audio/wav'\n    });\n  };\n  const averageChannels = audioBuffer => {\n    const length = audioBuffer.length;\n    const channels = audioBuffer.numberOfChannels;\n    const output = new Float32Array(length);\n    for (let c = 0; c < channels; c++) {\n      const channel = audioBuffer.getChannelData(c);\n      for (let i = 0; i < length; i++) {\n        output[i] += channel[i] / channels;\n      }\n    }\n    return output;\n  };\n  const floatTo16BitPCM = input => {\n    const output = new Int16Array(input.length);\n    for (let i = 0; i < input.length; i++) {\n      const s = Math.max(-1, Math.min(1, input[i]));\n      output[i] = s < 0 ? s * 0x8000 : s * 0x7FFF;\n    }\n    return output;\n  };\n  const createWavHeader = (dataLength, sampleRate, channels, bitsPerSample) => {\n    const blockAlign = channels * bitsPerSample / 8;\n    const byteRate = sampleRate * blockAlign;\n    const buffer = new ArrayBuffer(44);\n    const view = new DataView(buffer);\n    writeString(view, 0, 'RIFF');\n    view.setUint32(4, 36 + dataLength, true);\n    writeString(view, 8, 'WAVE');\n    writeString(view, 12, 'fmt ');\n    view.setUint32(16, 16, true);\n    view.setUint16(20, 1, true);\n    view.setUint16(22, channels, true);\n    view.setUint32(24, sampleRate, true);\n    view.setUint32(28, byteRate, true);\n    view.setUint16(32, blockAlign, true);\n    view.setUint16(34, bitsPerSample, true);\n    writeString(view, 36, 'data');\n    view.setUint32(40, dataLength, true);\n    return buffer;\n  };\n  const writeString = (view, offset, str) => {\n    for (let i = 0; i < str.length; i++) {\n      view.setUint8(offset + i, str.charCodeAt(i));\n    }\n  };\n  const processRecording = async wavBlob => {\n    try {\n      const response = mode === 'register' ? await registerVoice(wavBlob, userData) : await loginVoice(wavBlob, userData.username);\n      if (response.success) {\n        setPassphrase(response.passphrase || '');\n        handleStatus(response.message, 'success');\n      } else {\n        handleStatus(response.message, 'error');\n      }\n    } catch (err) {\n      console.error('Error processing recording:', err);\n      handleStatus('Failed to process recording.', 'error');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel-title\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-microphone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: mode === 'register' ? 'Voice Registration' : 'Voice Authentication'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: startRecording,\n        disabled: isRecording,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-microphone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 21\n        }, this), mode === 'register' ? 'Record Passphrase' : 'Verify Identity']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this), isRecording && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-danger\",\n        onClick: stopRecording,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 25\n        }, this), \" Stop Recording\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }, this), isRecording && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recording-indicator\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pulse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Recording your voice... Please speak now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: countdown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), passphrase && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-box\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-text\",\n        children: [\"Your \", mode === 'register' ? 'registered' : 'recognized', \" passphrase:\", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\" \\\"\", passphrase, \"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 9\n  }, this);\n};\n_s(VoiceRecorder, \"4QSWYJN4bsASINzmq+bQMi8FeLU=\");\n_c = VoiceRecorder;\nexport default VoiceRecorder;\nvar _c;\n$RefreshReg$(_c, \"VoiceRecorder\");","map":{"version":3,"names":["React","useState","useEffect","useRef","registerVoice","loginVoice","jsxDEV","_jsxDEV","Fragment","_Fragment","VoiceRecorder","mode","userData","handleStatus","_s","isRecording","setIsRecording","countdown","setCountdown","passphrase","setPassphrase","audioChunksRef","mediaStreamRef","mediaRecorderRef","countdownRef","cleanupRecording","_mediaRecorderRef$cur","_mediaStreamRef$curre","current","state","stop","getTracks","forEach","track","clearInterval","err","console","error","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","recorder","MediaRecorder","ondataavailable","e","data","size","push","onstop","blob","Blob","type","wavBlob","convertToWav","processRecording","start","startCountdown","stopRecording","setInterval","prev","webmBlob","arrayBuffer","audioCtx","window","AudioContext","webkitAudioContext","sampleRate","audioBuffer","decodeAudioData","channelData","numberOfChannels","averageChannels","getChannelData","pcmData","floatTo16BitPCM","header","createWavHeader","length","wavBuffer","Uint8Array","byteLength","set","buffer","channels","output","Float32Array","c","channel","i","input","Int16Array","s","Math","max","min","dataLength","bitsPerSample","blockAlign","byteRate","ArrayBuffer","view","DataView","writeString","setUint32","setUint16","offset","str","setUint8","charCodeAt","response","username","success","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/-IdentiVoice/frontend/src/components/VoiceRecorder.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { registerVoice, loginVoice } from '../utils/api';\r\n\r\nconst VoiceRecorder = ({ mode, userData, handleStatus }) => {\r\n    const [isRecording, setIsRecording] = useState(false);\r\n    const [countdown, setCountdown] = useState(10);\r\n    const [passphrase, setPassphrase] = useState('');\r\n    const audioChunksRef = useRef([]);\r\n    const mediaStreamRef = useRef(null);\r\n    const mediaRecorderRef = useRef(null);\r\n    const countdownRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        return () => cleanupRecording();\r\n    }, []);\r\n\r\n    const cleanupRecording = () => {\r\n        try {\r\n            if (mediaRecorderRef.current?.state !== 'inactive') {\r\n                mediaRecorderRef.current.stop();\r\n            }\r\n            mediaStreamRef.current?.getTracks().forEach(track => track.stop());\r\n            clearInterval(countdownRef.current);\r\n            setIsRecording(false);\r\n            setCountdown(10);\r\n            audioChunksRef.current = [];\r\n        } catch (err) {\r\n            console.error('Error in cleanup:', err);\r\n        }\r\n    };\r\n\r\n    const startRecording = async () => {\r\n        try {\r\n            cleanupRecording();\r\n\r\n            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n            mediaStreamRef.current = stream;\r\n\r\n            const recorder = new MediaRecorder(stream);\r\n            mediaRecorderRef.current = recorder;\r\n\r\n            recorder.ondataavailable = (e) => {\r\n                if (e.data.size > 0) audioChunksRef.current.push(e.data);\r\n            };\r\n\r\n            recorder.onstop = async () => {\r\n                try {\r\n                    const blob = new Blob(audioChunksRef.current, { type: 'audio/webm' });\r\n                    const wavBlob = await convertToWav(blob);\r\n                    await processRecording(wavBlob);\r\n                } catch (err) {\r\n                    console.error('Error creating WAV:', err);\r\n                    handleStatus('Error converting recording to WAV format.', 'error');\r\n                }\r\n            };\r\n\r\n            recorder.start(100);\r\n            setIsRecording(true);\r\n            startCountdown();\r\n        } catch (err) {\r\n            console.error('Error starting recording:', err);\r\n            handleStatus('Failed to start recording. Check microphone permissions.', 'error');\r\n        }\r\n    };\r\n\r\n    const stopRecording = () => {\r\n        if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\r\n            mediaRecorderRef.current.stop();\r\n        }\r\n    };\r\n\r\n    const startCountdown = () => {\r\n        countdownRef.current = setInterval(() => {\r\n            setCountdown(prev => {\r\n                if (prev <= 1) {\r\n                    clearInterval(countdownRef.current);\r\n                    stopRecording();\r\n                    return 0;\r\n                }\r\n                return prev - 1;\r\n            });\r\n        }, 1000);\r\n    };\r\n\r\n    const convertToWav = async (webmBlob) => {\r\n        const arrayBuffer = await webmBlob.arrayBuffer();\r\n        const audioCtx = new (window.AudioContext || window.webkitAudioContext)({ sampleRate: 16000 });\r\n        const audioBuffer = await audioCtx.decodeAudioData(arrayBuffer);\r\n\r\n        const channelData = audioBuffer.numberOfChannels > 1\r\n            ? averageChannels(audioBuffer)\r\n            : audioBuffer.getChannelData(0);\r\n\r\n        const pcmData = floatTo16BitPCM(channelData);\r\n        const header = createWavHeader(pcmData.length * 2, 16000, 1, 16);\r\n        const wavBuffer = new Uint8Array(header.byteLength + pcmData.byteLength);\r\n\r\n        wavBuffer.set(new Uint8Array(header), 0);\r\n        wavBuffer.set(new Uint8Array(pcmData.buffer), header.byteLength);\r\n\r\n        return new Blob([wavBuffer], { type: 'audio/wav' });\r\n    };\r\n\r\n    const averageChannels = (audioBuffer) => {\r\n        const length = audioBuffer.length;\r\n        const channels = audioBuffer.numberOfChannels;\r\n        const output = new Float32Array(length);\r\n        for (let c = 0; c < channels; c++) {\r\n            const channel = audioBuffer.getChannelData(c);\r\n            for (let i = 0; i < length; i++) {\r\n                output[i] += channel[i] / channels;\r\n            }\r\n        }\r\n        return output;\r\n    };\r\n\r\n    const floatTo16BitPCM = (input) => {\r\n        const output = new Int16Array(input.length);\r\n        for (let i = 0; i < input.length; i++) {\r\n            const s = Math.max(-1, Math.min(1, input[i]));\r\n            output[i] = s < 0 ? s * 0x8000 : s * 0x7FFF;\r\n        }\r\n        return output;\r\n    };\r\n\r\n    const createWavHeader = (dataLength, sampleRate, channels, bitsPerSample) => {\r\n        const blockAlign = channels * bitsPerSample / 8;\r\n        const byteRate = sampleRate * blockAlign;\r\n        const buffer = new ArrayBuffer(44);\r\n        const view = new DataView(buffer);\r\n\r\n        writeString(view, 0, 'RIFF');\r\n        view.setUint32(4, 36 + dataLength, true);\r\n        writeString(view, 8, 'WAVE');\r\n        writeString(view, 12, 'fmt ');\r\n        view.setUint32(16, 16, true);\r\n        view.setUint16(20, 1, true);\r\n        view.setUint16(22, channels, true);\r\n        view.setUint32(24, sampleRate, true);\r\n        view.setUint32(28, byteRate, true);\r\n        view.setUint16(32, blockAlign, true);\r\n        view.setUint16(34, bitsPerSample, true);\r\n        writeString(view, 36, 'data');\r\n        view.setUint32(40, dataLength, true);\r\n\r\n        return buffer;\r\n    };\r\n\r\n    const writeString = (view, offset, str) => {\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(offset + i, str.charCodeAt(i));\r\n        }\r\n    };\r\n\r\n    const processRecording = async (wavBlob) => {\r\n        try {\r\n            const response = mode === 'register'\r\n                ? await registerVoice(wavBlob, userData)\r\n                : await loginVoice(wavBlob, userData.username);\r\n\r\n            if (response.success) {\r\n                setPassphrase(response.passphrase || '');\r\n                handleStatus(response.message, 'success');\r\n            } else {\r\n                handleStatus(response.message, 'error');\r\n            }\r\n        } catch (err) {\r\n            console.error('Error processing recording:', err);\r\n            handleStatus('Failed to process recording.', 'error');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"panel\">\r\n            <div className=\"panel-title\">\r\n                <i className=\"fas fa-microphone\"></i>\r\n                <h2>{mode === 'register' ? 'Voice Registration' : 'Voice Authentication'}</h2>\r\n            </div>\r\n\r\n            <div className=\"buttons\">\r\n                <button className=\"btn btn-primary\" onClick={startRecording} disabled={isRecording}>\r\n                    <i className=\"fas fa-microphone\"></i>\r\n                    {mode === 'register' ? 'Record Passphrase' : 'Verify Identity'}\r\n                </button>\r\n                {isRecording && (\r\n                    <button className=\"btn btn-danger\" onClick={stopRecording}>\r\n                        <i className=\"fas fa-stop\"></i> Stop Recording\r\n                    </button>\r\n                )}\r\n            </div>\r\n\r\n            {isRecording && (\r\n                <>\r\n                    <div className=\"recording-indicator\">\r\n                        <div className=\"pulse\"></div>\r\n                        <div>Recording your voice... Please speak now</div>\r\n                    </div>\r\n                    <div className=\"timer\">{countdown}</div>\r\n                </>\r\n            )}\r\n\r\n            {passphrase && (\r\n                <div className=\"result-box\">\r\n                    <div className=\"result-text\">\r\n                        Your {mode === 'register' ? 'registered' : 'recognized'} passphrase:\r\n                        <span> \"{passphrase}\"</span>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VoiceRecorder;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}