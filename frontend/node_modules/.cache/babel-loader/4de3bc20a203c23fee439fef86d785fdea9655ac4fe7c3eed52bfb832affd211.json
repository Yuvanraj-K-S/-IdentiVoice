{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\-IdentiVoice\\\\frontend\\\\src\\\\components\\\\VoiceRecorder.js\",\n  _s = $RefreshSig$();\n// Modified VoiceRecorder.js with proper WAV encoding and cleanup handling\nimport React, { useState, useEffect, useRef } from 'react';\nimport { registerVoice, loginVoice } from '../utils/api';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst VoiceRecorder = ({\n  mode,\n  userData,\n  handleStatus\n}) => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [countdown, setCountdown] = useState(10);\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [passphrase, setPassphrase] = useState('');\n  const [rawBlob, setRawBlob] = useState(null);\n  const mediaRecorderRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const countdownRef = useRef(null);\n  useEffect(() => {\n    return () => {\n      cleanupRecording();\n    };\n  }, []);\n  const initAudioContext = () => {\n    if (!audioContextRef.current || audioContextRef.current.state === 'closed') {\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n    }\n    return audioContextRef.current;\n  };\n  const cleanupRecording = () => {\n    try {\n      var _mediaRecorderRef$cur, _mediaRecorderRef$cur2, _mediaRecorderRef$cur3;\n      if (((_mediaRecorderRef$cur = mediaRecorderRef.current) === null || _mediaRecorderRef$cur === void 0 ? void 0 : _mediaRecorderRef$cur.state) === 'recording') {\n        mediaRecorderRef.current.stop();\n      }\n      (_mediaRecorderRef$cur2 = mediaRecorderRef.current) === null || _mediaRecorderRef$cur2 === void 0 ? void 0 : (_mediaRecorderRef$cur3 = _mediaRecorderRef$cur2.stream) === null || _mediaRecorderRef$cur3 === void 0 ? void 0 : _mediaRecorderRef$cur3.getTracks().forEach(track => track.stop());\n      if (countdownRef.current) clearInterval(countdownRef.current);\n      mediaRecorderRef.current = null;\n      audioChunksRef.current = [];\n      setIsRecording(false);\n      setCountdown(10);\n    } catch (err) {\n      console.error('Error in cleanup:', err);\n    }\n  };\n  const averageChannels = audioBuffer => {\n    const numChannels = audioBuffer.numberOfChannels;\n    const length = audioBuffer.length;\n    const avgData = new Float32Array(length);\n    for (let c = 0; c < numChannels; c++) {\n      const channel = audioBuffer.getChannelData(c);\n      for (let i = 0; i < length; i++) {\n        avgData[i] += channel[i] / numChannels;\n      }\n    }\n    return avgData;\n  };\n  const startRecording = async () => {\n    try {\n      cleanupRecording();\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorderRef.current = mediaRecorder;\n      audioChunksRef.current = [];\n      mediaRecorder.ondataavailable = e => {\n        if (e.data.size > 0) audioChunksRef.current.push(e.data);\n      };\n      mediaRecorder.onstop = async () => {\n        try {\n          const webmBlob = new Blob(audioChunksRef.current, {\n            type: 'audio/webm'\n          });\n          setRawBlob(webmBlob);\n          const arrayBuffer = await webmBlob.arrayBuffer();\n          const audioContext = initAudioContext();\n          const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n\n          // Convert to mono Float32Array\n          const monoData = audioBuffer.numberOfChannels > 1 ? averageChannels(audioBuffer) : audioBuffer.getChannelData(0);\n          console.log('WebM Blob:', webmBlob, 'Size:', webmBlob.size);\n          if (!webmBlob) {\n            throw new Error('Failed to create audio blobs');\n          }\n          await processRecording(webmBlob);\n        } catch (error) {\n          console.error('Error creating WAV:', error);\n          handleStatus('Error converting recording to WAV format.', 'error');\n        } finally {\n          cleanupRecording();\n        }\n      };\n      mediaRecorder.start(100);\n      setIsRecording(true);\n      startCountdown();\n    } catch (err) {\n      console.error('Error starting recording:', err);\n      handleStatus('Failed to start recording. Check mic permissions.', 'error');\n      cleanupRecording();\n    }\n  };\n  const startCountdown = () => {\n    setCountdown(10);\n    countdownRef.current = setInterval(() => {\n      setCountdown(prev => {\n        if (prev <= 1) {\n          clearInterval(countdownRef.current);\n          stopRecording();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n  const stopRecording = () => {\n    try {\n      var _mediaRecorderRef$cur4;\n      if (((_mediaRecorderRef$cur4 = mediaRecorderRef.current) === null || _mediaRecorderRef$cur4 === void 0 ? void 0 : _mediaRecorderRef$cur4.state) === 'recording') {\n        mediaRecorderRef.current.stop();\n      }\n    } catch (err) {\n      console.error('Error stopping recording:', err);\n      handleStatus('Error stopping recording. Try again.', 'error');\n      cleanupRecording();\n    }\n  };\n  const processRecording = async webmBlob => {\n    try {\n      if (!webmBlob) {\n        throw new Error('Missing audio data');\n      }\n      const response = mode === 'register' ? await registerVoice(webmBlob, userData) : await loginVoice(webmBlob, userData.username);\n      if (response.success) {\n        setPassphrase(response.passphrase || '');\n        handleStatus(response.message, 'success');\n      } else {\n        handleStatus(response.message, 'error');\n      }\n    } catch (err) {\n      console.error('Error processing recording:', err);\n      handleStatus(err.message || 'Failed to process recording.', 'error');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel-title\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-microphone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: mode === 'register' ? 'Voice Registration' : 'Voice Authentication'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `btn btn-primary ${isRecording ? 'disabled' : ''}`,\n        onClick: startRecording,\n        disabled: isRecording,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-microphone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 25\n        }, this), mode === 'register' ? 'Record Passphrase' : 'Verify Identity']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 21\n      }, this), isRecording && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-danger\",\n        onClick: stopRecording,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 29\n        }, this), \" Stop Recording\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 17\n    }, this), isRecording && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recording-indicator\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pulse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Recording your voice... Please speak now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: countdown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"voice-wave\",\n        children: [...Array(8)].map((_, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wave-bar\"\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 58\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true), passphrase && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-box\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-text\",\n        children: [\"Your \", mode === 'register' ? 'registered' : 'recognized', \" passphrase:\", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\" \\\"\", passphrase, \"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 13\n  }, this);\n};\n_s(VoiceRecorder, \"ix7j9RiM7OlMgh9pAeiox8ZJzdU=\");\n_c = VoiceRecorder;\nexport default VoiceRecorder;\nvar _c;\n$RefreshReg$(_c, \"VoiceRecorder\");","map":{"version":3,"names":["React","useState","useEffect","useRef","registerVoice","loginVoice","jsxDEV","_jsxDEV","Fragment","_Fragment","VoiceRecorder","mode","userData","handleStatus","_s","isRecording","setIsRecording","countdown","setCountdown","audioBlob","setAudioBlob","passphrase","setPassphrase","rawBlob","setRawBlob","mediaRecorderRef","audioContextRef","audioChunksRef","countdownRef","cleanupRecording","initAudioContext","current","state","window","AudioContext","webkitAudioContext","_mediaRecorderRef$cur","_mediaRecorderRef$cur2","_mediaRecorderRef$cur3","stop","stream","getTracks","forEach","track","clearInterval","err","console","error","averageChannels","audioBuffer","numChannels","numberOfChannels","length","avgData","Float32Array","c","channel","getChannelData","i","startRecording","navigator","mediaDevices","getUserMedia","audio","mediaRecorder","MediaRecorder","ondataavailable","e","data","size","push","onstop","webmBlob","Blob","type","arrayBuffer","audioContext","decodeAudioData","monoData","log","Error","processRecording","start","startCountdown","setInterval","prev","stopRecording","_mediaRecorderRef$cur4","response","username","success","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","Array","map","_","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/-IdentiVoice/frontend/src/components/VoiceRecorder.js"],"sourcesContent":["    // Modified VoiceRecorder.js with proper WAV encoding and cleanup handling\r\n    import React, { useState, useEffect, useRef } from 'react';\r\n    import { registerVoice, loginVoice } from '../utils/api';\r\n    \r\n    const VoiceRecorder = ({ mode, userData, handleStatus }) => {\r\n        const [isRecording, setIsRecording] = useState(false);\r\n        const [countdown, setCountdown] = useState(10);\r\n        const [audioBlob, setAudioBlob] = useState(null);\r\n        const [passphrase, setPassphrase] = useState('');\r\n        const [rawBlob, setRawBlob] = useState(null); \r\n        const mediaRecorderRef = useRef(null);\r\n        const audioContextRef = useRef(null);\r\n        const audioChunksRef = useRef([]);\r\n        const countdownRef = useRef(null);\r\n\r\n        useEffect(() => {\r\n            return () => {\r\n                cleanupRecording();\r\n            };\r\n        }, []);\r\n\r\n        const initAudioContext = () => {\r\n            if (!audioContextRef.current || audioContextRef.current.state === 'closed') {\r\n                audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\r\n            }\r\n            return audioContextRef.current;\r\n        };\r\n\r\n        const cleanupRecording = () => {\r\n            try {\r\n                if (mediaRecorderRef.current?.state === 'recording') {\r\n                    mediaRecorderRef.current.stop();\r\n                }\r\n                mediaRecorderRef.current?.stream?.getTracks().forEach(track => track.stop());\r\n                if (countdownRef.current) clearInterval(countdownRef.current);\r\n\r\n                mediaRecorderRef.current = null;\r\n                audioChunksRef.current = [];\r\n                setIsRecording(false);\r\n                setCountdown(10);\r\n            } catch (err) {\r\n                console.error('Error in cleanup:', err);\r\n            }\r\n        };\r\n\r\n        const averageChannels = (audioBuffer) => {\r\n            const numChannels = audioBuffer.numberOfChannels;\r\n            const length = audioBuffer.length;\r\n            const avgData = new Float32Array(length);\r\n            for (let c = 0; c < numChannels; c++) {\r\n                const channel = audioBuffer.getChannelData(c);\r\n                for (let i = 0; i < length; i++) {\r\n                    avgData[i] += channel[i] / numChannels;\r\n                }\r\n            }\r\n            return avgData;\r\n        };\r\n\r\n        const startRecording = async () => {\r\n            try {\r\n                cleanupRecording();\r\n                const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n\r\n                const mediaRecorder = new MediaRecorder(stream);\r\n                mediaRecorderRef.current = mediaRecorder;\r\n                audioChunksRef.current = [];\r\n\r\n                mediaRecorder.ondataavailable = e => {\r\n                    if (e.data.size > 0) audioChunksRef.current.push(e.data);\r\n                };\r\n\r\n                mediaRecorder.onstop = async () => {\r\n                    try {\r\n                        const webmBlob = new Blob(audioChunksRef.current, { type: 'audio/webm' });\r\n                        setRawBlob(webmBlob);\r\n\r\n\r\n                        const arrayBuffer = await webmBlob.arrayBuffer();\r\n                        const audioContext = initAudioContext();\r\n                        const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\r\n\r\n                        // Convert to mono Float32Array\r\n                        const monoData = audioBuffer.numberOfChannels > 1\r\n                            ? averageChannels(audioBuffer)\r\n                            : audioBuffer.getChannelData(0);\r\n\r\n                        \r\n                        console.log('WebM Blob:', webmBlob, 'Size:', webmBlob.size);\r\n    \r\n                        if (!webmBlob) {\r\n                            throw new Error('Failed to create audio blobs');\r\n                        }\r\n                        await processRecording(webmBlob);\r\n                    } catch (error) {\r\n                        console.error('Error creating WAV:', error);\r\n                        handleStatus('Error converting recording to WAV format.', 'error');\r\n                    } finally {\r\n                        cleanupRecording();\r\n                    }\r\n                };\r\n\r\n                mediaRecorder.start(100);\r\n                setIsRecording(true);\r\n                startCountdown();\r\n\r\n            } catch (err) {\r\n                console.error('Error starting recording:', err);\r\n                handleStatus('Failed to start recording. Check mic permissions.', 'error');\r\n                cleanupRecording();\r\n            }\r\n        };\r\n\r\n        const startCountdown = () => {\r\n            setCountdown(10);\r\n            countdownRef.current = setInterval(() => {\r\n                setCountdown(prev => {\r\n                    if (prev <= 1) {\r\n                        clearInterval(countdownRef.current);\r\n                        stopRecording();\r\n                        return 0;\r\n                    }\r\n                    return prev - 1;\r\n                });\r\n            }, 1000);\r\n        };\r\n\r\n        const stopRecording = () => {\r\n            try {\r\n                if (mediaRecorderRef.current?.state === 'recording') {\r\n                    mediaRecorderRef.current.stop();\r\n                }\r\n            } catch (err) {\r\n                console.error('Error stopping recording:', err);\r\n                handleStatus('Error stopping recording. Try again.', 'error');\r\n                cleanupRecording();\r\n            }\r\n        };\r\n\r\n        const processRecording = async (webmBlob) => {\r\n        try {\r\n            if (!webmBlob) {\r\n                throw new Error('Missing audio data');\r\n            }\r\n            const response = mode === 'register'\r\n                ? await registerVoice(webmBlob, userData)\r\n                : await loginVoice(webmBlob, userData.username);\r\n\r\n            if (response.success) {\r\n                setPassphrase(response.passphrase || '');\r\n                handleStatus(response.message, 'success');\r\n            } else {\r\n                handleStatus(response.message, 'error');\r\n            }\r\n        } catch (err) {\r\n            console.error('Error processing recording:', err);\r\n            handleStatus(err.message || 'Failed to process recording.', 'error');\r\n        }\r\n    };\r\n\r\n        return (\r\n            <div className=\"panel\">\r\n                <div className=\"panel-title\">\r\n                    <i className=\"fas fa-microphone\"></i>\r\n                    <h2>{mode === 'register' ? 'Voice Registration' : 'Voice Authentication'}</h2>\r\n                </div>\r\n\r\n                <div className=\"buttons\">\r\n                    <button className={`btn btn-primary ${isRecording ? 'disabled' : ''}`} onClick={startRecording} disabled={isRecording}>\r\n                        <i className=\"fas fa-microphone\"></i>\r\n                        {mode === 'register' ? 'Record Passphrase' : 'Verify Identity'}\r\n                    </button>\r\n                    {isRecording && (\r\n                        <button className=\"btn btn-danger\" onClick={stopRecording}>\r\n                            <i className=\"fas fa-stop\"></i> Stop Recording\r\n                        </button>\r\n                    )}\r\n                </div>\r\n\r\n                {isRecording && (\r\n                    <>\r\n                        <div className=\"recording-indicator\">\r\n                            <div className=\"pulse\"></div>\r\n                            <div>Recording your voice... Please speak now</div>\r\n                        </div>\r\n                        <div className=\"timer\">{countdown}</div>\r\n                        <div className=\"voice-wave\">\r\n                            {[...Array(8)].map((_, i) => <div key={i} className=\"wave-bar\"></div>)}\r\n                        </div>\r\n                    </>\r\n                )}\r\n\r\n                {passphrase && (\r\n                    <div className=\"result-box\">\r\n                        <div className=\"result-text\">\r\n                            Your {mode === 'register' ? 'registered' : 'recognized'} passphrase:\r\n                            <span> \"{passphrase}\"</span>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    export default VoiceRecorder;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}