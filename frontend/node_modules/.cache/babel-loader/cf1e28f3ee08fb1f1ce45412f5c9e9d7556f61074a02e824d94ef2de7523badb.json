{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\voice-auth-system\\\\frontend\\\\src\\\\components\\\\VoiceRecorder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { registerVoice, loginVoice } from '../utils/api';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst VoiceRecorder = ({\n  mode,\n  userData,\n  handleStatus\n}) => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [countdown, setCountdown] = useState(10);\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [passphrase, setPassphrase] = useState('');\n  const mediaRecorderRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const countdownRef = useRef(null);\n\n  // Get supported MIME type\n  const getSupportedMimeType = () => {\n    const types = ['audio/webm', 'audio/wav', 'audio/ogg', 'audio/mp4'];\n    return types.find(type => MediaRecorder.isTypeSupported(type)) || 'audio/webm';\n  };\n\n  // Initialize AudioContext\n  const initAudioContext = () => {\n    if (!audioContextRef.current || audioContextRef.current.state === 'closed') {\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)({\n        sampleRate: 16000\n      });\n    }\n    return audioContextRef.current;\n  };\n  useEffect(() => {\n    return () => {\n      cleanupRecording();\n    };\n  }, []);\n  const cleanupRecording = () => {\n    try {\n      if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n        mediaRecorderRef.current.stop();\n      }\n      if (mediaRecorderRef.current && mediaRecorderRef.current.stream) {\n        mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());\n      }\n      if (countdownRef.current) {\n        clearInterval(countdownRef.current);\n      }\n      mediaRecorderRef.current = null;\n      audioChunksRef.current = [];\n      setIsRecording(false);\n      setCountdown(10);\n    } catch (err) {\n      console.error('Error in cleanup:', err);\n    }\n  };\n  const createSimpleWavFromBlob = async blob => {\n    const arrayBuffer = await blob.arrayBuffer();\n    const wavHeader = createWavHeader(arrayBuffer.byteLength);\n    const fullBuffer = new Uint8Array(wavHeader.byteLength + arrayBuffer.byteLength);\n    fullBuffer.set(new Uint8Array(wavHeader), 0);\n    fullBuffer.set(new Uint8Array(arrayBuffer), wavHeader.byteLength);\n    return new Blob([fullBuffer], {\n      type: 'audio/wav'\n    });\n  };\n  const floatTo16BitPCM = float32Array => {\n    const buffer = new Int16Array(float32Array.length);\n    for (let i = 0; i < float32Array.length; i++) {\n      const s = Math.max(-1, Math.min(1, float32Array[i]));\n      buffer[i] = s < 0 ? s * 0x8000 : s * 0x7FFF;\n    }\n    return buffer;\n  };\n  const createWavHeader = (totalSamples, sampleRate = 16000, numChannels = 1, bitsPerSample = 16) => {\n    const byteRate = sampleRate * numChannels * (bitsPerSample / 8);\n    const blockAlign = numChannels * (bitsPerSample / 8);\n    const subChunk2Size = totalSamples * blockAlign;\n    const chunkSize = 36 + subChunk2Size;\n    const buffer = new ArrayBuffer(44);\n    const view = new DataView(buffer);\n\n    // RIFF chunk descriptor\n    writeString(view, 0, 'RIFF'); // ChunkID\n    view.setUint32(4, chunkSize, true); // ChunkSize\n    writeString(view, 8, 'WAVE'); // Format\n\n    // fmt sub-chunk\n    writeString(view, 12, 'fmt '); // Subchunk1ID\n    view.setUint32(16, 16, true); // Subchunk1Size (16 for PCM)\n    view.setUint16(20, 1, true); // AudioFormat (1 for PCM)\n    view.setUint16(22, numChannels, true); // NumChannels\n    view.setUint32(24, sampleRate, true); // SampleRate\n    view.setUint32(28, byteRate, true); // ByteRate\n    view.setUint16(32, blockAlign, true); // BlockAlign\n    view.setUint16(34, bitsPerSample, true); // BitsPerSample\n\n    // data sub-chunk\n    writeString(view, 36, 'data'); // Subchunk2ID\n    view.setUint32(40, subChunk2Size, true); // Subchunk2Size\n\n    return buffer;\n  };\n  const writeString = (view, offset, string) => {\n    for (let i = 0; i < string.length; i++) {\n      view.setUint8(offset + i, string.charCodeAt(i));\n    }\n  };\n  const startRecording = async () => {\n    try {\n      cleanupRecording();\n\n      // Initialize AudioContext first\n      const audioContext = initAudioContext();\n      if (audioContext.state === 'suspended') {\n        await audioContext.resume();\n      }\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          channelCount: 1,\n          sampleRate: 16000,\n          sampleSize: 16,\n          volume: 1.0\n        }\n      });\n      const mediaRecorder = new MediaRecorder(stream, {\n        mimeType: getSupportedMimeType(),\n        audioBitsPerSecond: 16000\n      });\n      mediaRecorderRef.current = mediaRecorder;\n      audioChunksRef.current = [];\n      mediaRecorder.ondataavailable = e => {\n        if (e.data && e.data.size > 0) {\n          audioChunksRef.current.push(e.data);\n        }\n      };\n      mediaRecorder.onerror = event => {\n        console.error('Recording error:', event.error);\n        handleStatus('Error during recording. Please try again.', 'error');\n        cleanupRecording();\n      };\n      mediaRecorder.onstop = async () => {\n        try {\n          if (audioChunksRef.current.length === 0) {\n            throw new Error('No audio data recorded');\n          }\n\n          // Create blob with recorded data\n          const recordedBlob = new Blob(audioChunksRef.current, {\n            type: getSupportedMimeType()\n          });\n\n          // Convert blob to array buffer\n          const arrayBuffer = await recordedBlob.arrayBuffer();\n          try {\n            // Create audio context with specific sample rate\n            const audioContext = new (window.AudioContext || window.webkitAudioContext)({\n              sampleRate: 16000\n            });\n\n            // Decode the audio data\n            const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n\n            // Ensure mono channel\n            const monoData = audioBuffer.numberOfChannels > 1 ? audioBuffer.getChannelData(0).map((sample, i) => {\n              return Array.from({\n                length: audioBuffer.numberOfChannels\n              }, (_, channel) => audioBuffer.getChannelData(channel)[i]).reduce((a, b) => a + b) / audioBuffer.numberOfChannels;\n            }) : audioBuffer.getChannelData(0);\n\n            // Convert to 16-bit PCM\n            const pcmData = new Int16Array(monoData.length);\n            for (let i = 0; i < monoData.length; i++) {\n              const s = Math.max(-1, Math.min(1, monoData[i]));\n              pcmData[i] = s < 0 ? s * 0x8000 : s * 0x7FFF;\n            }\n\n            // Create WAV header\n            const wavHeader = createWavHeader(pcmData.length);\n\n            // Combine header and data\n            const wavBuffer = new Uint8Array(wavHeader.byteLength + pcmData.buffer.byteLength);\n            wavBuffer.set(new Uint8Array(wavHeader), 0);\n            wavBuffer.set(new Uint8Array(pcmData.buffer), wavHeader.byteLength);\n\n            // Create WAV blob\n            const wavBlob = new Blob([wavBuffer], {\n              type: 'audio/wav'\n            });\n\n            // Validate WAV format\n            const validateBuffer = await wavBlob.arrayBuffer();\n            const validateView = new DataView(validateBuffer);\n\n            // Check RIFF header\n            const riffHeader = String.fromCharCode(validateView.getUint8(0), validateView.getUint8(1), validateView.getUint8(2), validateView.getUint8(3));\n            if (riffHeader !== 'RIFF') {\n              throw new Error('Invalid WAV format: Missing RIFF header');\n            }\n\n            // Check WAVE format\n            const waveFormat = String.fromCharCode(validateView.getUint8(8), validateView.getUint8(9), validateView.getUint8(10), validateView.getUint8(11));\n            if (waveFormat !== 'WAVE') {\n              throw new Error('Invalid WAV format: Missing WAVE format');\n            }\n            setAudioBlob(wavBlob);\n            await processRecording(wavBlob);\n          } catch (decodeError) {\n            console.error('Error processing audio:', decodeError);\n            handleStatus('Failed to process audio. Please ensure your microphone is working properly.', 'error');\n            cleanupRecording();\n          }\n        } catch (error) {\n          console.error('Error processing audio:', error);\n          handleStatus('Failed to process recording. Please try again.', 'error');\n          cleanupRecording();\n        }\n      };\n      mediaRecorder.start(100);\n      setIsRecording(true);\n      startCountdown();\n    } catch (err) {\n      console.error('Error starting recording:', err);\n      handleStatus('Failed to start recording. Please check microphone permissions.', 'error');\n      cleanupRecording();\n    }\n  };\n  const startCountdown = () => {\n    setCountdown(10);\n    countdownRef.current = setInterval(() => {\n      setCountdown(prev => {\n        if (prev <= 1) {\n          clearInterval(countdownRef.current);\n          stopRecording();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n  const stopRecording = () => {\n    try {\n      if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n        mediaRecorderRef.current.stop();\n      } else {\n        cleanupRecording();\n      }\n    } catch (err) {\n      console.error('Error stopping recording:', err);\n      handleStatus('Error stopping recording. Please try again.', 'error');\n      cleanupRecording();\n    }\n  };\n  const processRecording = async blob => {\n    try {\n      let response;\n      if (mode === 'register') {\n        response = await registerVoice(blob, userData);\n      } else {\n        response = await loginVoice(blob, userData.username);\n      }\n      if (response.success) {\n        setPassphrase(response.passphrase || '');\n        handleStatus(response.message, 'success');\n      } else {\n        handleStatus(response.message, 'error');\n      }\n    } catch (err) {\n      console.error('Error processing recording:', err);\n      handleStatus('Failed to process recording. Please try again.', 'error');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel-title\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-microphone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: mode === 'register' ? 'Voice Registration' : 'Voice Authentication'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `btn btn-primary ${isRecording ? 'disabled' : ''}`,\n        onClick: startRecording,\n        disabled: isRecording,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-microphone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 21\n        }, this), mode === 'register' ? 'Record Passphrase' : 'Verify Identity']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 17\n      }, this), isRecording && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-danger\",\n        onClick: stopRecording,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 25\n        }, this), \" Stop Recording\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 13\n    }, this), isRecording && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recording-indicator\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pulse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Recording your voice... Please speak now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: countdown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"voice-wave\",\n        children: [...Array(8)].map((_, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wave-bar\"\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), passphrase && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-box\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-text\",\n        children: [\"Your \", mode === 'register' ? 'registered' : 'recognized', \" passphrase:\", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\" \\\"\", passphrase, \"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 307,\n    columnNumber: 9\n  }, this);\n};\n_s(VoiceRecorder, \"VzV+byMWjrxh1x6R9aUbxmqSb+U=\");\n_c = VoiceRecorder;\nexport default VoiceRecorder;\nvar _c;\n$RefreshReg$(_c, \"VoiceRecorder\");","map":{"version":3,"names":["React","useState","useEffect","useRef","registerVoice","loginVoice","jsxDEV","_jsxDEV","Fragment","_Fragment","VoiceRecorder","mode","userData","handleStatus","_s","isRecording","setIsRecording","countdown","setCountdown","audioBlob","setAudioBlob","passphrase","setPassphrase","mediaRecorderRef","audioContextRef","audioChunksRef","countdownRef","getSupportedMimeType","types","find","type","MediaRecorder","isTypeSupported","initAudioContext","current","state","window","AudioContext","webkitAudioContext","sampleRate","cleanupRecording","stop","stream","getTracks","forEach","track","clearInterval","err","console","error","createSimpleWavFromBlob","blob","arrayBuffer","wavHeader","createWavHeader","byteLength","fullBuffer","Uint8Array","set","Blob","floatTo16BitPCM","float32Array","buffer","Int16Array","length","i","s","Math","max","min","totalSamples","numChannels","bitsPerSample","byteRate","blockAlign","subChunk2Size","chunkSize","ArrayBuffer","view","DataView","writeString","setUint32","setUint16","offset","string","setUint8","charCodeAt","startRecording","audioContext","resume","navigator","mediaDevices","getUserMedia","audio","channelCount","sampleSize","volume","mediaRecorder","mimeType","audioBitsPerSecond","ondataavailable","e","data","size","push","onerror","event","onstop","Error","recordedBlob","audioBuffer","decodeAudioData","monoData","numberOfChannels","getChannelData","map","sample","Array","from","_","channel","reduce","a","b","pcmData","wavBuffer","wavBlob","validateBuffer","validateView","riffHeader","String","fromCharCode","getUint8","waveFormat","processRecording","decodeError","start","startCountdown","setInterval","prev","stopRecording","response","username","success","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/voice-auth-system/frontend/src/components/VoiceRecorder.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { registerVoice, loginVoice } from '../utils/api';\r\n\r\nconst VoiceRecorder = ({ mode, userData, handleStatus }) => {\r\n    const [isRecording, setIsRecording] = useState(false);\r\n    const [countdown, setCountdown] = useState(10);\r\n    const [audioBlob, setAudioBlob] = useState(null);\r\n    const [passphrase, setPassphrase] = useState('');\r\n    const mediaRecorderRef = useRef(null);\r\n    const audioContextRef = useRef(null);\r\n    const audioChunksRef = useRef([]);\r\n    const countdownRef = useRef(null);\r\n\r\n    // Get supported MIME type\r\n    const getSupportedMimeType = () => {\r\n        const types = [\r\n            'audio/webm',\r\n            'audio/wav',\r\n            'audio/ogg',\r\n            'audio/mp4'\r\n        ];\r\n        return types.find(type => MediaRecorder.isTypeSupported(type)) || 'audio/webm';\r\n    };\r\n\r\n    // Initialize AudioContext\r\n    const initAudioContext = () => {\r\n        if (!audioContextRef.current || audioContextRef.current.state === 'closed') {\r\n            audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)({\r\n                sampleRate: 16000\r\n            });\r\n        }\r\n        return audioContextRef.current;\r\n    };\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            cleanupRecording();\r\n        };\r\n    }, []);\r\n\r\n    const cleanupRecording = () => {\r\n        try {\r\n            if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\r\n                mediaRecorderRef.current.stop();\r\n            }\r\n            if (mediaRecorderRef.current && mediaRecorderRef.current.stream) {\r\n                mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());\r\n            }\r\n            if (countdownRef.current) {\r\n                clearInterval(countdownRef.current);\r\n            }\r\n            mediaRecorderRef.current = null;\r\n            audioChunksRef.current = [];\r\n            setIsRecording(false);\r\n            setCountdown(10);\r\n        } catch (err) {\r\n            console.error('Error in cleanup:', err);\r\n        }\r\n    };\r\n\r\n    const createSimpleWavFromBlob = async (blob) => {\r\n        const arrayBuffer = await blob.arrayBuffer();\r\n        const wavHeader = createWavHeader(arrayBuffer.byteLength);\r\n        const fullBuffer = new Uint8Array(wavHeader.byteLength + arrayBuffer.byteLength);\r\n        fullBuffer.set(new Uint8Array(wavHeader), 0);\r\n        fullBuffer.set(new Uint8Array(arrayBuffer), wavHeader.byteLength);\r\n        return new Blob([fullBuffer], { type: 'audio/wav' });\r\n    };\r\n\r\n    const floatTo16BitPCM = (float32Array) => {\r\n        const buffer = new Int16Array(float32Array.length);\r\n        for (let i = 0; i < float32Array.length; i++) {\r\n            const s = Math.max(-1, Math.min(1, float32Array[i]));\r\n            buffer[i] = s < 0 ? s * 0x8000 : s * 0x7FFF;\r\n        }\r\n        return buffer;\r\n    };\r\n\r\n    const createWavHeader = (totalSamples, sampleRate = 16000, numChannels = 1, bitsPerSample = 16) => {\r\n        const byteRate = sampleRate * numChannels * (bitsPerSample / 8);\r\n        const blockAlign = numChannels * (bitsPerSample / 8);\r\n        const subChunk2Size = totalSamples * blockAlign;\r\n        const chunkSize = 36 + subChunk2Size;\r\n\r\n        const buffer = new ArrayBuffer(44);\r\n        const view = new DataView(buffer);\r\n\r\n        // RIFF chunk descriptor\r\n        writeString(view, 0, 'RIFF');                     // ChunkID\r\n        view.setUint32(4, chunkSize, true);              // ChunkSize\r\n        writeString(view, 8, 'WAVE');                     // Format\r\n\r\n        // fmt sub-chunk\r\n        writeString(view, 12, 'fmt ');                    // Subchunk1ID\r\n        view.setUint32(16, 16, true);                    // Subchunk1Size (16 for PCM)\r\n        view.setUint16(20, 1, true);                     // AudioFormat (1 for PCM)\r\n        view.setUint16(22, numChannels, true);           // NumChannels\r\n        view.setUint32(24, sampleRate, true);            // SampleRate\r\n        view.setUint32(28, byteRate, true);              // ByteRate\r\n        view.setUint16(32, blockAlign, true);            // BlockAlign\r\n        view.setUint16(34, bitsPerSample, true);         // BitsPerSample\r\n\r\n        // data sub-chunk\r\n        writeString(view, 36, 'data');                    // Subchunk2ID\r\n        view.setUint32(40, subChunk2Size, true);         // Subchunk2Size\r\n\r\n        return buffer;\r\n    };\r\n\r\n    const writeString = (view, offset, string) => {\r\n        for (let i = 0; i < string.length; i++) {\r\n            view.setUint8(offset + i, string.charCodeAt(i));\r\n        }\r\n    };\r\n\r\n    const startRecording = async () => {\r\n        try {\r\n            cleanupRecording();\r\n\r\n            // Initialize AudioContext first\r\n            const audioContext = initAudioContext();\r\n            if (audioContext.state === 'suspended') {\r\n                await audioContext.resume();\r\n            }\r\n\r\n            const stream = await navigator.mediaDevices.getUserMedia({ \r\n                audio: {\r\n                    channelCount: 1,\r\n                    sampleRate: 16000,\r\n                    sampleSize: 16,\r\n                    volume: 1.0\r\n                } \r\n            });\r\n\r\n            const mediaRecorder = new MediaRecorder(stream, {\r\n                mimeType: getSupportedMimeType(),\r\n                audioBitsPerSecond: 16000\r\n            });\r\n\r\n            mediaRecorderRef.current = mediaRecorder;\r\n            audioChunksRef.current = [];\r\n\r\n            mediaRecorder.ondataavailable = (e) => {\r\n                if (e.data && e.data.size > 0) {\r\n                    audioChunksRef.current.push(e.data);\r\n                }\r\n            };\r\n\r\n            mediaRecorder.onerror = (event) => {\r\n                console.error('Recording error:', event.error);\r\n                handleStatus('Error during recording. Please try again.', 'error');\r\n                cleanupRecording();\r\n            };\r\n\r\n            mediaRecorder.onstop = async () => {\r\n                try {\r\n                    if (audioChunksRef.current.length === 0) {\r\n                        throw new Error('No audio data recorded');\r\n                    }\r\n\r\n                    // Create blob with recorded data\r\n                    const recordedBlob = new Blob(audioChunksRef.current, { type: getSupportedMimeType() });\r\n                    \r\n                    // Convert blob to array buffer\r\n                    const arrayBuffer = await recordedBlob.arrayBuffer();\r\n                    \r\n                    try {\r\n                        // Create audio context with specific sample rate\r\n                        const audioContext = new (window.AudioContext || window.webkitAudioContext)({\r\n                            sampleRate: 16000\r\n                        });\r\n\r\n                        // Decode the audio data\r\n                        const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\r\n\r\n                        // Ensure mono channel\r\n                        const monoData = audioBuffer.numberOfChannels > 1 \r\n                            ? audioBuffer.getChannelData(0).map((sample, i) => {\r\n                                return Array.from({length: audioBuffer.numberOfChannels}, (_, channel) => \r\n                                    audioBuffer.getChannelData(channel)[i]\r\n                                ).reduce((a, b) => a + b) / audioBuffer.numberOfChannels;\r\n                            })\r\n                            : audioBuffer.getChannelData(0);\r\n\r\n                        // Convert to 16-bit PCM\r\n                        const pcmData = new Int16Array(monoData.length);\r\n                        for (let i = 0; i < monoData.length; i++) {\r\n                            const s = Math.max(-1, Math.min(1, monoData[i]));\r\n                            pcmData[i] = s < 0 ? s * 0x8000 : s * 0x7FFF;\r\n                        }\r\n\r\n                        // Create WAV header\r\n                        const wavHeader = createWavHeader(pcmData.length);\r\n                        \r\n                        // Combine header and data\r\n                        const wavBuffer = new Uint8Array(wavHeader.byteLength + pcmData.buffer.byteLength);\r\n                        wavBuffer.set(new Uint8Array(wavHeader), 0);\r\n                        wavBuffer.set(new Uint8Array(pcmData.buffer), wavHeader.byteLength);\r\n\r\n                        // Create WAV blob\r\n                        const wavBlob = new Blob([wavBuffer], { type: 'audio/wav' });\r\n\r\n                        // Validate WAV format\r\n                        const validateBuffer = await wavBlob.arrayBuffer();\r\n                        const validateView = new DataView(validateBuffer);\r\n                        \r\n                        // Check RIFF header\r\n                        const riffHeader = String.fromCharCode(\r\n                            validateView.getUint8(0),\r\n                            validateView.getUint8(1),\r\n                            validateView.getUint8(2),\r\n                            validateView.getUint8(3)\r\n                        );\r\n                        \r\n                        if (riffHeader !== 'RIFF') {\r\n                            throw new Error('Invalid WAV format: Missing RIFF header');\r\n                        }\r\n\r\n                        // Check WAVE format\r\n                        const waveFormat = String.fromCharCode(\r\n                            validateView.getUint8(8),\r\n                            validateView.getUint8(9),\r\n                            validateView.getUint8(10),\r\n                            validateView.getUint8(11)\r\n                        );\r\n                        \r\n                        if (waveFormat !== 'WAVE') {\r\n                            throw new Error('Invalid WAV format: Missing WAVE format');\r\n                        }\r\n\r\n                        setAudioBlob(wavBlob);\r\n                        await processRecording(wavBlob);\r\n\r\n                    } catch (decodeError) {\r\n                        console.error('Error processing audio:', decodeError);\r\n                        handleStatus('Failed to process audio. Please ensure your microphone is working properly.', 'error');\r\n                        cleanupRecording();\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error processing audio:', error);\r\n                    handleStatus('Failed to process recording. Please try again.', 'error');\r\n                    cleanupRecording();\r\n                }\r\n            };\r\n\r\n            mediaRecorder.start(100);\r\n            setIsRecording(true);\r\n            startCountdown();\r\n\r\n        } catch (err) {\r\n            console.error('Error starting recording:', err);\r\n            handleStatus('Failed to start recording. Please check microphone permissions.', 'error');\r\n            cleanupRecording();\r\n        }\r\n    };\r\n\r\n    const startCountdown = () => {\r\n        setCountdown(10);\r\n        countdownRef.current = setInterval(() => {\r\n            setCountdown(prev => {\r\n                if (prev <= 1) {\r\n                    clearInterval(countdownRef.current);\r\n                    stopRecording();\r\n                    return 0;\r\n                }\r\n                return prev - 1;\r\n            });\r\n        }, 1000);\r\n    };\r\n\r\n    const stopRecording = () => {\r\n        try {\r\n            if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\r\n                mediaRecorderRef.current.stop();\r\n            } else {\r\n                cleanupRecording();\r\n            }\r\n        } catch (err) {\r\n            console.error('Error stopping recording:', err);\r\n            handleStatus('Error stopping recording. Please try again.', 'error');\r\n            cleanupRecording();\r\n        }\r\n    };\r\n\r\n    const processRecording = async (blob) => {\r\n        try {\r\n            let response;\r\n            if (mode === 'register') {\r\n                response = await registerVoice(blob, userData);\r\n            } else {\r\n                response = await loginVoice(blob, userData.username);\r\n            }\r\n            \r\n            if (response.success) {\r\n                setPassphrase(response.passphrase || '');\r\n                handleStatus(response.message, 'success');\r\n            } else {\r\n                handleStatus(response.message, 'error');\r\n            }\r\n        } catch (err) {\r\n            console.error('Error processing recording:', err);\r\n            handleStatus('Failed to process recording. Please try again.', 'error');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"panel\">\r\n            <div className=\"panel-title\">\r\n                <i className=\"fas fa-microphone\"></i>\r\n                <h2>{mode === 'register' ? 'Voice Registration' : 'Voice Authentication'}</h2>\r\n            </div>\r\n            \r\n            <div className=\"buttons\">\r\n                <button \r\n                    className={`btn btn-primary ${isRecording ? 'disabled' : ''}`}\r\n                    onClick={startRecording}\r\n                    disabled={isRecording}\r\n                >\r\n                    <i className=\"fas fa-microphone\"></i> \r\n                    {mode === 'register' ? 'Record Passphrase' : 'Verify Identity'}\r\n                </button>\r\n                {isRecording && (\r\n                    <button \r\n                        className=\"btn btn-danger\"\r\n                        onClick={stopRecording}\r\n                    >\r\n                        <i className=\"fas fa-stop\"></i> Stop Recording\r\n                    </button>\r\n                )}\r\n            </div>\r\n            \r\n            {isRecording && (\r\n                <>\r\n                    <div className=\"recording-indicator\">\r\n                        <div className=\"pulse\"></div>\r\n                        <div>Recording your voice... Please speak now</div>\r\n                    </div>\r\n                    <div className=\"timer\">{countdown}</div>\r\n                    <div className=\"voice-wave\">\r\n                        {[...Array(8)].map((_, i) => (\r\n                            <div key={i} className=\"wave-bar\"></div>\r\n                        ))}\r\n                    </div>\r\n                </>\r\n            )}\r\n            \r\n            {passphrase && (\r\n                <div className=\"result-box\">\r\n                    <div className=\"result-text\">\r\n                        Your {mode === 'register' ? 'registered' : 'recognized'} passphrase: \r\n                        <span> \"{passphrase}\"</span>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VoiceRecorder;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}