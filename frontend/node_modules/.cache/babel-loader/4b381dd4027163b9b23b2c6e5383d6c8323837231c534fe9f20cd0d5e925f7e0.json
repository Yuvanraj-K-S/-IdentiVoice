{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\-IdentiVoice\\\\frontend\\\\src\\\\components\\\\VoiceRecorder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { registerVoice, loginVoice } from '../utils/api';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconsole.log('VoiceRecorder component file loaded');\nconst VoiceRecorder = ({\n  mode,\n  userData,\n  handleStatus\n}) => {\n  _s();\n  console.log('VoiceRecorder component rendering with mode:', mode);\n  const [isRecording, setIsRecording] = useState(false);\n  const [countdown, setCountdown] = useState(10);\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [passphrase, setPassphrase] = useState('');\n\n  // Updated refs for AudioWorklet\n  const audioContextRef = useRef(null);\n  const audioStreamRef = useRef(null);\n  const audioWorkletNodeRef = useRef(null);\n  const audioDataRef = useRef([]);\n  const countdownRef = useRef(null);\n  const isProcessingRef = useRef(false);\n  const isChunkProcessingRef = useRef(false); // New ref for chunk processing state\n  const recordingDataRef = useRef([]);\n  const lastChunkTimeRef = useRef(null); // New ref to track last chunk time\n\n  // Debug function to check if refs are initialized\n  const debugCheckRefs = () => {\n    console.log('Debug - Checking refs:');\n    console.log('audioContextRef:', !!audioContextRef.current);\n    console.log('audioStreamRef:', !!audioStreamRef.current);\n    console.log('audioWorkletNodeRef:', !!audioWorkletNodeRef.current);\n    console.log('recordingDataRef length:', recordingDataRef.current.length);\n    console.log('isProcessingRef:', isProcessingRef.current);\n    console.log('isRecording state:', isRecording);\n  };\n\n  // Memoize handleStatus to avoid render-phase updates\n  const safeHandleStatus = useCallback((message, type) => {\n    console.log('safeHandleStatus called with:', message, type);\n    setTimeout(() => handleStatus(message, type), 0);\n  }, [handleStatus]);\n  useEffect(() => {\n    console.log('VoiceRecorder component mounted');\n\n    // Initialize AudioContext and load worklet on mount\n    const initAudioWorklet = async () => {\n      try {\n        console.log('Initializing AudioWorklet...');\n        if (!audioContextRef.current) {\n          const audioContext = new (window.AudioContext || window.webkitAudioContext)({\n            sampleRate: 16000\n          });\n          console.log('AudioContext created');\n          try {\n            console.log('Loading audio worklet module...');\n            await audioContext.audioWorklet.addModule('/audioRecorderWorklet.js');\n            console.log('Audio worklet module loaded successfully');\n          } catch (workletErr) {\n            console.error('Failed to load audio worklet module:', workletErr);\n            throw workletErr;\n          }\n          audioContextRef.current = audioContext;\n          console.log('AudioContext initialized and stored in ref');\n        }\n      } catch (err) {\n        console.error('Failed to initialize audio worklet:', err);\n        safeHandleStatus('Failed to initialize audio system. Please refresh the page.', 'error');\n      }\n    };\n    initAudioWorklet();\n    debugCheckRefs(); // Log initial ref state\n\n    return () => {\n      console.log('VoiceRecorder component unmounting');\n      cleanupRecording();\n      if (audioContextRef.current) {\n        audioContextRef.current.close();\n        audioContextRef.current = null;\n      }\n    };\n  }, [safeHandleStatus]);\n  const cleanupRecording = useCallback(() => {\n    try {\n      if (audioWorkletNodeRef.current) {\n        audioWorkletNodeRef.current.disconnect();\n        audioWorkletNodeRef.current = null;\n      }\n      if (audioStreamRef.current) {\n        audioStreamRef.current.getTracks().forEach(track => track.stop());\n        audioStreamRef.current = null;\n      }\n      if (countdownRef.current) {\n        clearInterval(countdownRef.current);\n        countdownRef.current = null;\n      }\n      setIsRecording(false);\n      setCountdown(10);\n    } catch (err) {\n      console.error('Error in cleanup:', err);\n    }\n  }, []);\n  const flattenAudioData = chunks => {\n    if (!chunks || !chunks.length) return new Float32Array(0);\n    let totalLength = 0;\n    for (const chunk of chunks) {\n      totalLength += chunk.length;\n    }\n    const result = new Float32Array(totalLength);\n    let offset = 0;\n    for (const chunk of chunks) {\n      if (chunk && chunk.length > 0) {\n        result.set(chunk, offset);\n        offset += chunk.length;\n      }\n    }\n    return result;\n  };\n  const floatTo16BitPCM = float32Array => {\n    const buffer = new Int16Array(float32Array.length);\n    for (let i = 0; i < float32Array.length; i++) {\n      const s = Math.max(-1, Math.min(1, float32Array[i]));\n      buffer[i] = s < 0 ? s * 0x8000 : s * 0x7FFF;\n    }\n    return buffer;\n  };\n  const createWavHeader = (totalSamples, sampleRate = 16000, numChannels = 1, bitsPerSample = 16) => {\n    const byteRate = sampleRate * numChannels * (bitsPerSample / 8);\n    const blockAlign = numChannels * (bitsPerSample / 8);\n    const subChunk2Size = totalSamples * blockAlign;\n    const chunkSize = 36 + subChunk2Size;\n    const buffer = new ArrayBuffer(44);\n    const view = new DataView(buffer);\n\n    // RIFF chunk descriptor\n    writeString(view, 0, 'RIFF'); // ChunkID\n    view.setUint32(4, chunkSize, true); // ChunkSize\n    writeString(view, 8, 'WAVE'); // Format\n\n    // fmt sub-chunk\n    writeString(view, 12, 'fmt '); // Subchunk1ID\n    view.setUint32(16, 16, true); // Subchunk1Size (16 for PCM)\n    view.setUint16(20, 1, true); // AudioFormat (1 for PCM)\n    view.setUint16(22, numChannels, true); // NumChannels\n    view.setUint32(24, sampleRate, true); // SampleRate\n    view.setUint32(28, byteRate, true); // ByteRate\n    view.setUint16(32, blockAlign, true); // BlockAlign\n    view.setUint16(34, bitsPerSample, true); // BitsPerSample\n\n    // data sub-chunk\n    writeString(view, 36, 'data'); // Subchunk2ID\n    view.setUint32(40, subChunk2Size, true); // Subchunk2Size\n\n    return buffer;\n  };\n  const writeString = (view, offset, string) => {\n    for (let i = 0; i < string.length; i++) {\n      view.setUint8(offset + i, string.charCodeAt(i));\n    }\n  };\n  const startRecording = async () => {\n    console.log('üé§ startRecording called');\n    if (isProcessingRef.current) {\n      console.log('‚ö†Ô∏è Already processing, cannot start recording');\n      return;\n    }\n    try {\n      if (!audioContextRef.current) {\n        console.error('‚ùå Audio system not initialized');\n        throw new Error('Audio system not initialized');\n      }\n      console.log('üßπ Cleaning up previous recording');\n      cleanupRecording();\n      isProcessingRef.current = true;\n      recordingDataRef.current = [];\n      lastChunkTimeRef.current = null;\n      console.log('üéØ Recording state reset');\n      console.log('üé§ Requesting microphone access');\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          channelCount: 1,\n          sampleRate: 16000,\n          echoCancellation: true,\n          noiseSuppression: true\n        }\n      });\n      audioStreamRef.current = stream;\n      console.log('‚úÖ Microphone access granted');\n      if (audioContextRef.current.state === 'suspended') {\n        console.log('‚èØÔ∏è Resuming audio context');\n        await audioContextRef.current.resume();\n      }\n      console.log('üîÑ Setting up audio worklet');\n      const source = audioContextRef.current.createMediaStreamSource(stream);\n      const workletNode = new AudioWorkletNode(audioContextRef.current, 'audio-recorder-worklet');\n      workletNode.port.onmessage = event => {\n        if (event.data.eventType === 'data' && Array.isArray(recordingDataRef.current)) {\n          isChunkProcessingRef.current = true;\n          const audioData = event.data.audioData;\n          console.log('üì¶ Audio chunk received at:', Date.now(), 'length:', audioData.length);\n          recordingDataRef.current.push(new Float32Array(audioData));\n          lastChunkTimeRef.current = Date.now();\n          isChunkProcessingRef.current = false;\n        }\n      };\n      source.connect(workletNode);\n      workletNode.connect(audioContextRef.current.destination);\n      audioWorkletNodeRef.current = workletNode;\n      console.log('‚úÖ Audio worklet setup complete');\n      setIsRecording(true);\n      startCountdown();\n      console.log('‚è∫Ô∏è Recording started');\n    } catch (err) {\n      console.error('‚ùå Error starting recording:', err);\n      safeHandleStatus('Failed to start recording. Please check microphone permissions.', 'error');\n    } finally {\n      isProcessingRef.current = false;\n    }\n  };\n  const waitForFinalChunk = async () => {\n    console.log('‚è≥ Waiting for final chunks...');\n    // Wait for any in-progress chunk processing\n    let waitCount = 0;\n    while (isChunkProcessingRef.current && waitCount < 100) {\n      // Add timeout\n      await new Promise(resolve => setTimeout(resolve, 10));\n      waitCount++;\n    }\n    if (waitCount >= 100) {\n      console.warn('‚ö†Ô∏è Timeout waiting for chunk processing');\n    }\n\n    // If we received a chunk recently, wait a bit longer for potential final chunks\n    if (lastChunkTimeRef.current && Date.now() - lastChunkTimeRef.current < 100) {\n      console.log('‚è≥ Waiting for potential final chunks...');\n      await new Promise(resolve => setTimeout(resolve, 100));\n    }\n    console.log('‚úÖ Finished waiting for chunks');\n  };\n  const stopRecording = useCallback(async () => {\n    console.log('üõë Stop recording called');\n    if (isProcessingRef.current) {\n      console.log('‚ö†Ô∏è Already processing, cannot stop recording');\n      return;\n    }\n    try {\n      console.log('üîí Setting processing flag');\n      isProcessingRef.current = true;\n      console.log('‚è±Ô∏è Stop recording called at:', Date.now());\n\n      // Disconnect audio nodes first\n      console.log('üîå Disconnecting audio nodes');\n      if (audioWorkletNodeRef.current) {\n        audioWorkletNodeRef.current.disconnect();\n        audioWorkletNodeRef.current = null;\n      }\n      if (audioStreamRef.current) {\n        audioStreamRef.current.getTracks().forEach(track => {\n          console.log('üé§ Stopping audio track');\n          track.stop();\n        });\n        audioStreamRef.current = null;\n      }\n      console.log('‚è≥ Waiting for final chunks');\n      await waitForFinalChunk();\n      console.log('üìä Saving recording data');\n      const recordedData = Array.isArray(recordingDataRef.current) ? [...recordingDataRef.current] : [];\n      console.log('üìà Current recording data length:', recordedData.length);\n      if (!recordedData.length) {\n        console.error('‚ùå No recording data available');\n        throw new Error('No audio data recorded');\n      }\n      console.log('üîÑ Processing chunks at:', Date.now());\n      console.log('üìä Total audio chunks:', recordedData.length);\n      const flatData = flattenAudioData(recordedData);\n      console.log('üìà Flattened data length:', flatData.length);\n      if (flatData.length < 16000) {\n        console.error('‚ùå Recording too short:', flatData.length, 'samples');\n        throw new Error('Recording too short. Please speak for at least 1 second.');\n      }\n      console.log('üîÑ Converting to PCM');\n      const pcm = floatTo16BitPCM(flatData);\n      const header = createWavHeader(pcm.length, 16000, 1, 16);\n      console.log('üì¶ Creating WAV buffer');\n      const wavBuffer = new Uint8Array(header.byteLength + pcm.byteLength);\n      wavBuffer.set(new Uint8Array(header), 0);\n      wavBuffer.set(new Uint8Array(pcm.buffer), header.byteLength);\n      console.log('‚úÖ Validating WAV file');\n      const validateResult = validateWavFile(wavBuffer);\n      if (!validateResult.isValid) {\n        console.error('‚ùå Invalid WAV file:', validateResult.error);\n        throw new Error(`Invalid WAV file: ${validateResult.error}`);\n      }\n      const wavBlob = new Blob([wavBuffer], {\n        type: 'audio/wav'\n      });\n      console.log('‚úÖ WAV blob created, size:', wavBlob.size);\n      setAudioBlob(wavBlob);\n      console.log('üßπ Cleaning up recording resources');\n      cleanupRecording();\n      recordingDataRef.current = [];\n      console.log('üì§ Processing recording');\n      await processRecording(wavBlob);\n      console.log('‚úÖ Recording processed successfully');\n    } catch (err) {\n      console.error('‚ùå Error stopping recording:', err);\n      safeHandleStatus('Failed to stop recording: ' + err.message, 'error');\n      cleanupRecording();\n      recordingDataRef.current = [];\n    } finally {\n      console.log('üîì Clearing processing flag');\n      isProcessingRef.current = false;\n      setIsRecording(false);\n    }\n  }, [cleanupRecording, safeHandleStatus]);\n  const validateWavFile = buffer => {\n    try {\n      const view = new DataView(buffer.buffer);\n\n      // Check RIFF header\n      const riff = String.fromCharCode(view.getUint8(0), view.getUint8(1), view.getUint8(2), view.getUint8(3));\n      if (riff !== 'RIFF') {\n        return {\n          isValid: false,\n          error: 'Invalid RIFF header'\n        };\n      }\n\n      // Check WAVE format\n      const wave = String.fromCharCode(view.getUint8(8), view.getUint8(9), view.getUint8(10), view.getUint8(11));\n      if (wave !== 'WAVE') {\n        return {\n          isValid: false,\n          error: 'Invalid WAVE format'\n        };\n      }\n\n      // Check sample rate (must be 16kHz)\n      const sampleRate = view.getUint32(24, true);\n      if (sampleRate !== 16000) {\n        return {\n          isValid: false,\n          error: 'Sample rate must be 16kHz'\n        };\n      }\n\n      // Check channels (must be mono)\n      const channels = view.getUint16(22, true);\n      if (channels !== 1) {\n        return {\n          isValid: false,\n          error: 'Must be mono channel'\n        };\n      }\n\n      // Check bits per sample (must be 16-bit)\n      const bitsPerSample = view.getUint16(34, true);\n      if (bitsPerSample !== 16) {\n        return {\n          isValid: false,\n          error: 'Must be 16-bit PCM'\n        };\n      }\n      return {\n        isValid: true\n      };\n    } catch (err) {\n      return {\n        isValid: false,\n        error: 'Failed to validate WAV file'\n      };\n    }\n  };\n  const startCountdown = useCallback(() => {\n    console.log('üïí Starting countdown from:', countdown);\n    setCountdown(10);\n    countdownRef.current = setInterval(() => {\n      setCountdown(prev => {\n        console.log('‚è≤Ô∏è Countdown:', prev);\n        if (prev <= 1) {\n          console.log('‚èπÔ∏è Countdown finished, stopping recording');\n          clearInterval(countdownRef.current);\n          stopRecording();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  }, [stopRecording]);\n  const processRecording = async blob => {\n    console.log('üîÑ processRecording called with blob size:', blob.size);\n    if (!blob) {\n      console.error('‚ùå No blob provided to processRecording');\n      return;\n    }\n    if (isProcessingRef.current) {\n      console.log('‚ö†Ô∏è Already processing, skipping');\n      return;\n    }\n    try {\n      isProcessingRef.current = true;\n      console.log('üîÑ Processing mode:', mode);\n      let response;\n      if (mode === 'register') {\n        console.log('üìù Sending registration request');\n        response = await registerVoice(blob, userData);\n      } else {\n        console.log('üîê Sending login request');\n        response = await loginVoice(blob, userData.username);\n      }\n      console.log('‚úÖ Server response:', response);\n      if (response.success) {\n        setPassphrase(response.passphrase || '');\n        safeHandleStatus(response.message, 'success');\n      } else {\n        safeHandleStatus(response.message, 'error');\n      }\n    } catch (err) {\n      console.error('‚ùå Error processing recording:', err);\n      safeHandleStatus('Failed to process recording. Please try again.', 'error');\n    } finally {\n      isProcessingRef.current = false;\n    }\n  };\n  const handleStartRecording = () => {\n    console.log('Start recording button clicked');\n    debugCheckRefs();\n    startRecording();\n  };\n  const handleStopRecording = () => {\n    console.log('Stop recording button clicked');\n    debugCheckRefs();\n    stopRecording();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel-title\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-microphone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: mode === 'register' ? 'Voice Registration' : 'Voice Authentication'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `btn btn-primary ${isRecording || isProcessingRef.current ? 'disabled' : ''}`,\n        onClick: handleStartRecording,\n        disabled: isRecording || isProcessingRef.current,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-microphone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 21\n        }, this), mode === 'register' ? 'Record Passphrase' : 'Verify Identity']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 17\n      }, this), isRecording && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-danger\",\n        onClick: handleStopRecording,\n        disabled: isProcessingRef.current,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 25\n        }, this), \" Stop Recording\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 13\n    }, this), isRecording && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recording-indicator\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pulse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Recording your voice... Please speak now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: countdown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"voice-wave\",\n        children: [...Array(8)].map((_, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wave-bar\"\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), passphrase && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-box\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-text\",\n        children: [\"Your \", mode === 'register' ? 'registered' : 'recognized', \" passphrase:\", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\" \\\"\", passphrase, \"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 470,\n    columnNumber: 9\n  }, this);\n};\n_s(VoiceRecorder, \"YbCruBQeEAYW9CPS2x00KHHPsfY=\");\n_c = VoiceRecorder;\nexport default VoiceRecorder;\nvar _c;\n$RefreshReg$(_c, \"VoiceRecorder\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","registerVoice","loginVoice","jsxDEV","_jsxDEV","Fragment","_Fragment","console","log","VoiceRecorder","mode","userData","handleStatus","_s","isRecording","setIsRecording","countdown","setCountdown","audioBlob","setAudioBlob","passphrase","setPassphrase","audioContextRef","audioStreamRef","audioWorkletNodeRef","audioDataRef","countdownRef","isProcessingRef","isChunkProcessingRef","recordingDataRef","lastChunkTimeRef","debugCheckRefs","current","length","safeHandleStatus","message","type","setTimeout","initAudioWorklet","audioContext","window","AudioContext","webkitAudioContext","sampleRate","audioWorklet","addModule","workletErr","error","err","cleanupRecording","close","disconnect","getTracks","forEach","track","stop","clearInterval","flattenAudioData","chunks","Float32Array","totalLength","chunk","result","offset","set","floatTo16BitPCM","float32Array","buffer","Int16Array","i","s","Math","max","min","createWavHeader","totalSamples","numChannels","bitsPerSample","byteRate","blockAlign","subChunk2Size","chunkSize","ArrayBuffer","view","DataView","writeString","setUint32","setUint16","string","setUint8","charCodeAt","startRecording","Error","stream","navigator","mediaDevices","getUserMedia","audio","channelCount","echoCancellation","noiseSuppression","state","resume","source","createMediaStreamSource","workletNode","AudioWorkletNode","port","onmessage","event","data","eventType","Array","isArray","audioData","Date","now","push","connect","destination","startCountdown","waitForFinalChunk","waitCount","Promise","resolve","warn","stopRecording","recordedData","flatData","pcm","header","wavBuffer","Uint8Array","byteLength","validateResult","validateWavFile","isValid","wavBlob","Blob","size","processRecording","riff","String","fromCharCode","getUint8","wave","getUint32","channels","getUint16","setInterval","prev","blob","response","username","success","handleStartRecording","handleStopRecording","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","map","_","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/-IdentiVoice/frontend/src/components/VoiceRecorder.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport { registerVoice, loginVoice } from '../utils/api';\r\n\r\nconsole.log('VoiceRecorder component file loaded');\r\n\r\nconst VoiceRecorder = ({ mode, userData, handleStatus }) => {\r\n    console.log('VoiceRecorder component rendering with mode:', mode);\r\n\r\n    const [isRecording, setIsRecording] = useState(false);\r\n    const [countdown, setCountdown] = useState(10);\r\n    const [audioBlob, setAudioBlob] = useState(null);\r\n    const [passphrase, setPassphrase] = useState('');\r\n    \r\n    // Updated refs for AudioWorklet\r\n    const audioContextRef = useRef(null);\r\n    const audioStreamRef = useRef(null);\r\n    const audioWorkletNodeRef = useRef(null);\r\n    const audioDataRef = useRef([]);\r\n    const countdownRef = useRef(null);\r\n    const isProcessingRef = useRef(false);\r\n    const isChunkProcessingRef = useRef(false);  // New ref for chunk processing state\r\n    const recordingDataRef = useRef([]);\r\n    const lastChunkTimeRef = useRef(null);  // New ref to track last chunk time\r\n\r\n    // Debug function to check if refs are initialized\r\n    const debugCheckRefs = () => {\r\n        console.log('Debug - Checking refs:');\r\n        console.log('audioContextRef:', !!audioContextRef.current);\r\n        console.log('audioStreamRef:', !!audioStreamRef.current);\r\n        console.log('audioWorkletNodeRef:', !!audioWorkletNodeRef.current);\r\n        console.log('recordingDataRef length:', recordingDataRef.current.length);\r\n        console.log('isProcessingRef:', isProcessingRef.current);\r\n        console.log('isRecording state:', isRecording);\r\n    };\r\n\r\n    // Memoize handleStatus to avoid render-phase updates\r\n    const safeHandleStatus = useCallback((message, type) => {\r\n        console.log('safeHandleStatus called with:', message, type);\r\n        setTimeout(() => handleStatus(message, type), 0);\r\n    }, [handleStatus]);\r\n\r\n    useEffect(() => {\r\n        console.log('VoiceRecorder component mounted');\r\n        \r\n        // Initialize AudioContext and load worklet on mount\r\n        const initAudioWorklet = async () => {\r\n            try {\r\n                console.log('Initializing AudioWorklet...');\r\n                if (!audioContextRef.current) {\r\n                    const audioContext = new (window.AudioContext || window.webkitAudioContext)({ sampleRate: 16000 });\r\n                    console.log('AudioContext created');\r\n                    \r\n                    try {\r\n                        console.log('Loading audio worklet module...');\r\n                        await audioContext.audioWorklet.addModule('/audioRecorderWorklet.js');\r\n                        console.log('Audio worklet module loaded successfully');\r\n                    } catch (workletErr) {\r\n                        console.error('Failed to load audio worklet module:', workletErr);\r\n                        throw workletErr;\r\n                    }\r\n                    \r\n                    audioContextRef.current = audioContext;\r\n                    console.log('AudioContext initialized and stored in ref');\r\n                }\r\n            } catch (err) {\r\n                console.error('Failed to initialize audio worklet:', err);\r\n                safeHandleStatus('Failed to initialize audio system. Please refresh the page.', 'error');\r\n            }\r\n        };\r\n        \r\n        initAudioWorklet();\r\n        debugCheckRefs();  // Log initial ref state\r\n        \r\n        return () => {\r\n            console.log('VoiceRecorder component unmounting');\r\n            cleanupRecording();\r\n            if (audioContextRef.current) {\r\n                audioContextRef.current.close();\r\n                audioContextRef.current = null;\r\n            }\r\n        };\r\n    }, [safeHandleStatus]);\r\n\r\n    const cleanupRecording = useCallback(() => {\r\n        try {\r\n            if (audioWorkletNodeRef.current) {\r\n                audioWorkletNodeRef.current.disconnect();\r\n                audioWorkletNodeRef.current = null;\r\n            }\r\n            if (audioStreamRef.current) {\r\n                audioStreamRef.current.getTracks().forEach(track => track.stop());\r\n                audioStreamRef.current = null;\r\n            }\r\n            if (countdownRef.current) {\r\n                clearInterval(countdownRef.current);\r\n                countdownRef.current = null;\r\n            }\r\n            setIsRecording(false);\r\n            setCountdown(10);\r\n        } catch (err) {\r\n            console.error('Error in cleanup:', err);\r\n        }\r\n    }, []);\r\n\r\n    const flattenAudioData = (chunks) => {\r\n        if (!chunks || !chunks.length) return new Float32Array(0);\r\n        \r\n        let totalLength = 0;\r\n        for (const chunk of chunks) {\r\n            totalLength += chunk.length;\r\n        }\r\n        \r\n        const result = new Float32Array(totalLength);\r\n        let offset = 0;\r\n        \r\n        for (const chunk of chunks) {\r\n            if (chunk && chunk.length > 0) {\r\n                result.set(chunk, offset);\r\n                offset += chunk.length;\r\n            }\r\n        }\r\n        \r\n        return result;\r\n    };\r\n\r\n    const floatTo16BitPCM = (float32Array) => {\r\n        const buffer = new Int16Array(float32Array.length);\r\n        for (let i = 0; i < float32Array.length; i++) {\r\n            const s = Math.max(-1, Math.min(1, float32Array[i]));\r\n            buffer[i] = s < 0 ? s * 0x8000 : s * 0x7FFF;\r\n        }\r\n        return buffer;\r\n    };\r\n\r\n    const createWavHeader = (totalSamples, sampleRate = 16000, numChannels = 1, bitsPerSample = 16) => {\r\n        const byteRate = sampleRate * numChannels * (bitsPerSample / 8);\r\n        const blockAlign = numChannels * (bitsPerSample / 8);\r\n        const subChunk2Size = totalSamples * blockAlign;\r\n        const chunkSize = 36 + subChunk2Size;\r\n\r\n        const buffer = new ArrayBuffer(44);\r\n        const view = new DataView(buffer);\r\n\r\n        // RIFF chunk descriptor\r\n        writeString(view, 0, 'RIFF');                     // ChunkID\r\n        view.setUint32(4, chunkSize, true);              // ChunkSize\r\n        writeString(view, 8, 'WAVE');                     // Format\r\n\r\n        // fmt sub-chunk\r\n        writeString(view, 12, 'fmt ');                    // Subchunk1ID\r\n        view.setUint32(16, 16, true);                    // Subchunk1Size (16 for PCM)\r\n        view.setUint16(20, 1, true);                     // AudioFormat (1 for PCM)\r\n        view.setUint16(22, numChannels, true);           // NumChannels\r\n        view.setUint32(24, sampleRate, true);            // SampleRate\r\n        view.setUint32(28, byteRate, true);              // ByteRate\r\n        view.setUint16(32, blockAlign, true);            // BlockAlign\r\n        view.setUint16(34, bitsPerSample, true);         // BitsPerSample\r\n\r\n        // data sub-chunk\r\n        writeString(view, 36, 'data');                    // Subchunk2ID\r\n        view.setUint32(40, subChunk2Size, true);         // Subchunk2Size\r\n\r\n        return buffer;\r\n    };\r\n\r\n    const writeString = (view, offset, string) => {\r\n        for (let i = 0; i < string.length; i++) {\r\n            view.setUint8(offset + i, string.charCodeAt(i));\r\n        }\r\n    };\r\n\r\n    const startRecording = async () => {\r\n        console.log('üé§ startRecording called');\r\n        if (isProcessingRef.current) {\r\n            console.log('‚ö†Ô∏è Already processing, cannot start recording');\r\n            return;\r\n        }\r\n        \r\n        try {\r\n            if (!audioContextRef.current) {\r\n                console.error('‚ùå Audio system not initialized');\r\n                throw new Error('Audio system not initialized');\r\n            }\r\n\r\n            console.log('üßπ Cleaning up previous recording');\r\n            cleanupRecording();\r\n            isProcessingRef.current = true;\r\n            recordingDataRef.current = [];\r\n            lastChunkTimeRef.current = null;\r\n            console.log('üéØ Recording state reset');\r\n\r\n            console.log('üé§ Requesting microphone access');\r\n            const stream = await navigator.mediaDevices.getUserMedia({ \r\n                audio: {\r\n                    channelCount: 1,\r\n                    sampleRate: 16000,\r\n                    echoCancellation: true,\r\n                    noiseSuppression: true\r\n                } \r\n            });\r\n            audioStreamRef.current = stream;\r\n            console.log('‚úÖ Microphone access granted');\r\n\r\n            if (audioContextRef.current.state === 'suspended') {\r\n                console.log('‚èØÔ∏è Resuming audio context');\r\n                await audioContextRef.current.resume();\r\n            }\r\n\r\n            console.log('üîÑ Setting up audio worklet');\r\n            const source = audioContextRef.current.createMediaStreamSource(stream);\r\n            const workletNode = new AudioWorkletNode(audioContextRef.current, 'audio-recorder-worklet');\r\n\r\n            workletNode.port.onmessage = (event) => {\r\n                if (event.data.eventType === 'data' && Array.isArray(recordingDataRef.current)) {\r\n                    isChunkProcessingRef.current = true;\r\n                    const audioData = event.data.audioData;\r\n                    console.log('üì¶ Audio chunk received at:', Date.now(), 'length:', audioData.length);\r\n                    recordingDataRef.current.push(new Float32Array(audioData));\r\n                    lastChunkTimeRef.current = Date.now();\r\n                    isChunkProcessingRef.current = false;\r\n                }\r\n            };\r\n\r\n            source.connect(workletNode);\r\n            workletNode.connect(audioContextRef.current.destination);\r\n\r\n            audioWorkletNodeRef.current = workletNode;\r\n            console.log('‚úÖ Audio worklet setup complete');\r\n            \r\n            setIsRecording(true);\r\n            startCountdown();\r\n            console.log('‚è∫Ô∏è Recording started');\r\n\r\n        } catch (err) {\r\n            console.error('‚ùå Error starting recording:', err);\r\n            safeHandleStatus('Failed to start recording. Please check microphone permissions.', 'error');\r\n        } finally {\r\n            isProcessingRef.current = false;\r\n        }\r\n    };\r\n\r\n    const waitForFinalChunk = async () => {\r\n        console.log('‚è≥ Waiting for final chunks...');\r\n        // Wait for any in-progress chunk processing\r\n        let waitCount = 0;\r\n        while (isChunkProcessingRef.current && waitCount < 100) { // Add timeout\r\n            await new Promise(resolve => setTimeout(resolve, 10));\r\n            waitCount++;\r\n        }\r\n        if (waitCount >= 100) {\r\n            console.warn('‚ö†Ô∏è Timeout waiting for chunk processing');\r\n        }\r\n\r\n        // If we received a chunk recently, wait a bit longer for potential final chunks\r\n        if (lastChunkTimeRef.current && Date.now() - lastChunkTimeRef.current < 100) {\r\n            console.log('‚è≥ Waiting for potential final chunks...');\r\n            await new Promise(resolve => setTimeout(resolve, 100));\r\n        }\r\n        console.log('‚úÖ Finished waiting for chunks');\r\n    };\r\n\r\n    const stopRecording = useCallback(async () => {\r\n        console.log('üõë Stop recording called');\r\n        if (isProcessingRef.current) {\r\n            console.log('‚ö†Ô∏è Already processing, cannot stop recording');\r\n            return;\r\n        }\r\n        \r\n        try {\r\n            console.log('üîí Setting processing flag');\r\n            isProcessingRef.current = true;\r\n            console.log('‚è±Ô∏è Stop recording called at:', Date.now());\r\n\r\n            // Disconnect audio nodes first\r\n            console.log('üîå Disconnecting audio nodes');\r\n            if (audioWorkletNodeRef.current) {\r\n                audioWorkletNodeRef.current.disconnect();\r\n                audioWorkletNodeRef.current = null;\r\n            }\r\n            if (audioStreamRef.current) {\r\n                audioStreamRef.current.getTracks().forEach(track => {\r\n                    console.log('üé§ Stopping audio track');\r\n                    track.stop();\r\n                });\r\n                audioStreamRef.current = null;\r\n            }\r\n\r\n            console.log('‚è≥ Waiting for final chunks');\r\n            await waitForFinalChunk();\r\n\r\n            console.log('üìä Saving recording data');\r\n            const recordedData = Array.isArray(recordingDataRef.current) ? [...recordingDataRef.current] : [];\r\n            console.log('üìà Current recording data length:', recordedData.length);\r\n            \r\n            if (!recordedData.length) {\r\n                console.error('‚ùå No recording data available');\r\n                throw new Error('No audio data recorded');\r\n            }\r\n            \r\n            console.log('üîÑ Processing chunks at:', Date.now());\r\n            console.log('üìä Total audio chunks:', recordedData.length);\r\n            const flatData = flattenAudioData(recordedData);\r\n            console.log('üìà Flattened data length:', flatData.length);\r\n\r\n            if (flatData.length < 16000) {\r\n                console.error('‚ùå Recording too short:', flatData.length, 'samples');\r\n                throw new Error('Recording too short. Please speak for at least 1 second.');\r\n            }\r\n\r\n            console.log('üîÑ Converting to PCM');\r\n            const pcm = floatTo16BitPCM(flatData);\r\n            const header = createWavHeader(pcm.length, 16000, 1, 16);\r\n\r\n            console.log('üì¶ Creating WAV buffer');\r\n            const wavBuffer = new Uint8Array(header.byteLength + pcm.byteLength);\r\n            wavBuffer.set(new Uint8Array(header), 0);\r\n            wavBuffer.set(new Uint8Array(pcm.buffer), header.byteLength);\r\n\r\n            console.log('‚úÖ Validating WAV file');\r\n            const validateResult = validateWavFile(wavBuffer);\r\n            if (!validateResult.isValid) {\r\n                console.error('‚ùå Invalid WAV file:', validateResult.error);\r\n                throw new Error(`Invalid WAV file: ${validateResult.error}`);\r\n            }\r\n\r\n            const wavBlob = new Blob([wavBuffer], { type: 'audio/wav' });\r\n            console.log('‚úÖ WAV blob created, size:', wavBlob.size);\r\n            \r\n            setAudioBlob(wavBlob);\r\n            \r\n            console.log('üßπ Cleaning up recording resources');\r\n            cleanupRecording();\r\n            recordingDataRef.current = [];\r\n            \r\n            console.log('üì§ Processing recording');\r\n            await processRecording(wavBlob);\r\n            console.log('‚úÖ Recording processed successfully');\r\n\r\n        } catch (err) {\r\n            console.error('‚ùå Error stopping recording:', err);\r\n            safeHandleStatus('Failed to stop recording: ' + err.message, 'error');\r\n            cleanupRecording();\r\n            recordingDataRef.current = [];\r\n        } finally {\r\n            console.log('üîì Clearing processing flag');\r\n            isProcessingRef.current = false;\r\n            setIsRecording(false);\r\n        }\r\n    }, [cleanupRecording, safeHandleStatus]);\r\n\r\n    const validateWavFile = (buffer) => {\r\n        try {\r\n            const view = new DataView(buffer.buffer);\r\n            \r\n            // Check RIFF header\r\n            const riff = String.fromCharCode(\r\n                view.getUint8(0),\r\n                view.getUint8(1),\r\n                view.getUint8(2),\r\n                view.getUint8(3)\r\n            );\r\n            if (riff !== 'RIFF') {\r\n                return { isValid: false, error: 'Invalid RIFF header' };\r\n            }\r\n\r\n            // Check WAVE format\r\n            const wave = String.fromCharCode(\r\n                view.getUint8(8),\r\n                view.getUint8(9),\r\n                view.getUint8(10),\r\n                view.getUint8(11)\r\n            );\r\n            if (wave !== 'WAVE') {\r\n                return { isValid: false, error: 'Invalid WAVE format' };\r\n            }\r\n\r\n            // Check sample rate (must be 16kHz)\r\n            const sampleRate = view.getUint32(24, true);\r\n            if (sampleRate !== 16000) {\r\n                return { isValid: false, error: 'Sample rate must be 16kHz' };\r\n            }\r\n\r\n            // Check channels (must be mono)\r\n            const channels = view.getUint16(22, true);\r\n            if (channels !== 1) {\r\n                return { isValid: false, error: 'Must be mono channel' };\r\n            }\r\n\r\n            // Check bits per sample (must be 16-bit)\r\n            const bitsPerSample = view.getUint16(34, true);\r\n            if (bitsPerSample !== 16) {\r\n                return { isValid: false, error: 'Must be 16-bit PCM' };\r\n            }\r\n\r\n            return { isValid: true };\r\n        } catch (err) {\r\n            return { isValid: false, error: 'Failed to validate WAV file' };\r\n        }\r\n    };\r\n\r\n    const startCountdown = useCallback(() => {\r\n        console.log('üïí Starting countdown from:', countdown);\r\n        setCountdown(10);\r\n        countdownRef.current = setInterval(() => {\r\n            setCountdown(prev => {\r\n                console.log('‚è≤Ô∏è Countdown:', prev);\r\n                if (prev <= 1) {\r\n                    console.log('‚èπÔ∏è Countdown finished, stopping recording');\r\n                    clearInterval(countdownRef.current);\r\n                    stopRecording();\r\n                    return 0;\r\n                }\r\n                return prev - 1;\r\n            });\r\n        }, 1000);\r\n    }, [stopRecording]);\r\n\r\n    const processRecording = async (blob) => {\r\n        console.log('üîÑ processRecording called with blob size:', blob.size);\r\n        if (!blob) {\r\n            console.error('‚ùå No blob provided to processRecording');\r\n            return;\r\n        }\r\n        if (isProcessingRef.current) {\r\n            console.log('‚ö†Ô∏è Already processing, skipping');\r\n            return;\r\n        }\r\n        \r\n        try {\r\n            isProcessingRef.current = true;\r\n            console.log('üîÑ Processing mode:', mode);\r\n            let response;\r\n            \r\n            if (mode === 'register') {\r\n                console.log('üìù Sending registration request');\r\n                response = await registerVoice(blob, userData);\r\n            } else {\r\n                console.log('üîê Sending login request');\r\n                response = await loginVoice(blob, userData.username);\r\n            }\r\n            \r\n            console.log('‚úÖ Server response:', response);\r\n            if (response.success) {\r\n                setPassphrase(response.passphrase || '');\r\n                safeHandleStatus(response.message, 'success');\r\n            } else {\r\n                safeHandleStatus(response.message, 'error');\r\n            }\r\n        } catch (err) {\r\n            console.error('‚ùå Error processing recording:', err);\r\n            safeHandleStatus('Failed to process recording. Please try again.', 'error');\r\n        } finally {\r\n            isProcessingRef.current = false;\r\n        }\r\n    };\r\n\r\n    const handleStartRecording = () => {\r\n        console.log('Start recording button clicked');\r\n        debugCheckRefs();\r\n        startRecording();\r\n    };\r\n\r\n    const handleStopRecording = () => {\r\n        console.log('Stop recording button clicked');\r\n        debugCheckRefs();\r\n        stopRecording();\r\n    };\r\n\r\n    return (\r\n        <div className=\"panel\">\r\n            <div className=\"panel-title\">\r\n                <i className=\"fas fa-microphone\"></i>\r\n                <h2>{mode === 'register' ? 'Voice Registration' : 'Voice Authentication'}</h2>\r\n            </div>\r\n            \r\n            <div className=\"buttons\">\r\n                <button \r\n                    className={`btn btn-primary ${isRecording || isProcessingRef.current ? 'disabled' : ''}`}\r\n                    onClick={handleStartRecording}\r\n                    disabled={isRecording || isProcessingRef.current}\r\n                >\r\n                    <i className=\"fas fa-microphone\"></i> \r\n                    {mode === 'register' ? 'Record Passphrase' : 'Verify Identity'}\r\n                </button>\r\n                {isRecording && (\r\n                    <button \r\n                        className=\"btn btn-danger\"\r\n                        onClick={handleStopRecording}\r\n                        disabled={isProcessingRef.current}\r\n                    >\r\n                        <i className=\"fas fa-stop\"></i> Stop Recording\r\n                    </button>\r\n                )}\r\n            </div>\r\n            \r\n            {isRecording && (\r\n                <>\r\n                    <div className=\"recording-indicator\">\r\n                        <div className=\"pulse\"></div>\r\n                        <div>Recording your voice... Please speak now</div>\r\n                    </div>\r\n                    <div className=\"timer\">{countdown}</div>\r\n                    <div className=\"voice-wave\">\r\n                        {[...Array(8)].map((_, i) => (\r\n                            <div key={i} className=\"wave-bar\"></div>\r\n                        ))}\r\n                    </div>\r\n                </>\r\n            )}\r\n            \r\n            {passphrase && (\r\n                <div className=\"result-box\">\r\n                    <div className=\"result-text\">\r\n                        Your {mode === 'register' ? 'registered' : 'recognized'} passphrase: \r\n                        <span> \"{passphrase}\"</span>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VoiceRecorder;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}