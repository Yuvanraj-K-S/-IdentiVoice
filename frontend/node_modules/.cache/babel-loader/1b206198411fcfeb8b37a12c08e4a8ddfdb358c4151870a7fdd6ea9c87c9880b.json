{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\-IdentiVoice\\\\frontend\\\\src\\\\components\\\\VoiceRecorder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { registerVoice, loginVoice } from '../utils/api';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst VoiceRecorder = ({\n  mode,\n  userData,\n  handleStatus\n}) => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [countdown, setCountdown] = useState(10);\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [passphrase, setPassphrase] = useState('');\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const countdownRef = useRef(null);\n  const getSupportedMimeType = () => {\n    const types = ['audio/webm;codecs=opus', 'audio/webm', 'audio/ogg'];\n    return types.find(type => MediaRecorder.isTypeSupported(type)) || '';\n  };\n  useEffect(() => {\n    return () => {\n      cleanupRecording();\n    };\n  }, []);\n  const cleanupRecording = () => {\n    try {\n      var _mediaRecorderRef$cur, _mediaRecorderRef$cur2, _mediaRecorderRef$cur3;\n      if (((_mediaRecorderRef$cur = mediaRecorderRef.current) === null || _mediaRecorderRef$cur === void 0 ? void 0 : _mediaRecorderRef$cur.state) !== 'inactive') {\n        mediaRecorderRef.current.stop();\n      }\n      (_mediaRecorderRef$cur2 = mediaRecorderRef.current) === null || _mediaRecorderRef$cur2 === void 0 ? void 0 : (_mediaRecorderRef$cur3 = _mediaRecorderRef$cur2.stream) === null || _mediaRecorderRef$cur3 === void 0 ? void 0 : _mediaRecorderRef$cur3.getTracks().forEach(track => track.stop());\n      if (countdownRef.current) clearInterval(countdownRef.current);\n      mediaRecorderRef.current = null;\n      audioChunksRef.current = [];\n      setIsRecording(false);\n      setCountdown(10);\n    } catch (err) {\n      console.error('Error in cleanup:', err);\n    }\n  };\n  const floatTo16BitPCM = float32Array => {\n    const int16Array = new Int16Array(float32Array.length);\n    for (let i = 0; i < float32Array.length; i++) {\n      const s = Math.max(-1, Math.min(1, float32Array[i]));\n      int16Array[i] = s < 0 ? s * 0x8000 : s * 0x7FFF;\n    }\n    return int16Array;\n  };\n  const averageChannels = audioBuffer => {\n    const numChannels = audioBuffer.numberOfChannels;\n    const length = audioBuffer.length;\n    const averaged = new Float32Array(length);\n    for (let c = 0; c < numChannels; c++) {\n      const data = audioBuffer.getChannelData(c);\n      for (let i = 0; i < length; i++) {\n        averaged[i] += data[i] / numChannels;\n      }\n    }\n    return averaged;\n  };\n  const createWavHeader = (samplesLength, sampleRate = 16000, numChannels = 1, bitsPerSample = 16) => {\n    const blockAlign = numChannels * (bitsPerSample / 8);\n    const byteRate = sampleRate * blockAlign;\n    const dataSize = samplesLength * (bitsPerSample / 8);\n    const buffer = new ArrayBuffer(44);\n    const view = new DataView(buffer);\n    const writeString = (offset, str) => {\n      for (let i = 0; i < str.length; i++) {\n        view.setUint8(offset + i, str.charCodeAt(i));\n      }\n    };\n    writeString(0, 'RIFF');\n    view.setUint32(4, 36 + dataSize, true);\n    writeString(8, 'WAVE');\n    writeString(12, 'fmt ');\n    view.setUint32(16, 16, true);\n    view.setUint16(20, 1, true);\n    view.setUint16(22, numChannels, true);\n    view.setUint32(24, sampleRate, true);\n    view.setUint32(28, byteRate, true);\n    view.setUint16(32, blockAlign, true);\n    view.setUint16(34, bitsPerSample, true);\n    writeString(36, 'data');\n    view.setUint32(40, dataSize, true);\n    return buffer;\n  };\n  const convertToWav = async blob => {\n    const arrayBuffer = await blob.arrayBuffer();\n    const audioCtx = new (window.AudioContext || window.webkitAudioContext)({\n      sampleRate: 16000\n    });\n    const decoded = await audioCtx.decodeAudioData(arrayBuffer);\n    const monoData = averageChannels(decoded);\n    const pcm = floatTo16BitPCM(monoData);\n    const wavHeader = createWavHeader(pcm.length, 16000, 1, 16);\n    const wavBuffer = new Uint8Array(wavHeader.byteLength + pcm.byteLength);\n    wavBuffer.set(new Uint8Array(wavHeader), 0);\n    wavBuffer.set(new Uint8Array(pcm.buffer), wavHeader.byteLength);\n    return new Blob([wavBuffer], {\n      type: 'audio/wav'\n    });\n  };\n  const startRecording = async () => {\n    try {\n      cleanupRecording();\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      const mimeType = getSupportedMimeType();\n      if (!mimeType) {\n        handleStatus('No supported audio format.', 'error');\n        return;\n      }\n      const recorder = new MediaRecorder(stream, {\n        mimeType\n      });\n      mediaRecorderRef.current = recorder;\n      audioChunksRef.current = [];\n      recorder.ondataavailable = e => {\n        var _e$data;\n        if (((_e$data = e.data) === null || _e$data === void 0 ? void 0 : _e$data.size) > 0) {\n          audioChunksRef.current.push(e.data);\n        }\n      };\n      recorder.onstop = async () => {\n        try {\n          const fullBlob = new Blob(audioChunksRef.current, {\n            type: recorder.mimeType\n          });\n          const wavBlob = await convertToWav(fullBlob);\n          setAudioBlob(wavBlob);\n          await processRecording(wavBlob);\n        } catch (err) {\n          console.error('Error creating WAV:', err);\n          handleStatus('Error converting recording to WAV format.', 'error');\n        }\n      };\n      recorder.start(100);\n      setIsRecording(true);\n      startCountdown();\n    } catch (err) {\n      console.error('Error starting recording:', err);\n      handleStatus('Failed to start recording. Check mic permissions.', 'error');\n    }\n  };\n  const startCountdown = () => {\n    setCountdown(10);\n    countdownRef.current = setInterval(() => {\n      setCountdown(prev => {\n        if (prev <= 1) {\n          clearInterval(countdownRef.current);\n          stopRecording();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n  const stopRecording = () => {\n    var _mediaRecorderRef$cur4;\n    if (((_mediaRecorderRef$cur4 = mediaRecorderRef.current) === null || _mediaRecorderRef$cur4 === void 0 ? void 0 : _mediaRecorderRef$cur4.state) === 'recording') {\n      mediaRecorderRef.current.stop();\n    } else {\n      cleanupRecording();\n    }\n  };\n  const processRecording = async blob => {\n    try {\n      const response = mode === 'register' ? await registerVoice(blob, userData) : await loginVoice(blob, userData.username);\n      if (response.success) {\n        setPassphrase(response.passphrase || '');\n        handleStatus(response.message, 'success');\n      } else {\n        handleStatus(response.message, 'error');\n      }\n    } catch (err) {\n      console.error('Processing error:', err);\n      handleStatus('Failed to process recording.', 'error');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel-title\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-microphone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: mode === 'register' ? 'Voice Registration' : 'Voice Authentication'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `btn btn-primary ${isRecording ? 'disabled' : ''}`,\n        onClick: startRecording,\n        disabled: isRecording,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-microphone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 21\n        }, this), mode === 'register' ? 'Record Passphrase' : 'Verify Identity']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }, this), isRecording && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-danger\",\n        onClick: stopRecording,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 25\n        }, this), \" Stop Recording\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }, this), isRecording && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recording-indicator\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pulse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Recording your voice... Please speak now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: countdown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"voice-wave\",\n        children: [...Array(8)].map((_, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wave-bar\"\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), passphrase && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-box\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-text\",\n        children: [\"Your \", mode === 'register' ? 'registered' : 'recognized', \" passphrase:\", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\" \\\"\", passphrase, \"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 9\n  }, this);\n};\n_s(VoiceRecorder, \"qG2QUNgwD7BrCv8Y2/BNeRmjsOk=\");\n_c = VoiceRecorder;\nexport default VoiceRecorder;\nvar _c;\n$RefreshReg$(_c, \"VoiceRecorder\");","map":{"version":3,"names":["React","useState","useEffect","useRef","registerVoice","loginVoice","jsxDEV","_jsxDEV","Fragment","_Fragment","VoiceRecorder","mode","userData","handleStatus","_s","isRecording","setIsRecording","countdown","setCountdown","audioBlob","setAudioBlob","passphrase","setPassphrase","mediaRecorderRef","audioChunksRef","countdownRef","getSupportedMimeType","types","find","type","MediaRecorder","isTypeSupported","cleanupRecording","_mediaRecorderRef$cur","_mediaRecorderRef$cur2","_mediaRecorderRef$cur3","current","state","stop","stream","getTracks","forEach","track","clearInterval","err","console","error","floatTo16BitPCM","float32Array","int16Array","Int16Array","length","i","s","Math","max","min","averageChannels","audioBuffer","numChannels","numberOfChannels","averaged","Float32Array","c","data","getChannelData","createWavHeader","samplesLength","sampleRate","bitsPerSample","blockAlign","byteRate","dataSize","buffer","ArrayBuffer","view","DataView","writeString","offset","str","setUint8","charCodeAt","setUint32","setUint16","convertToWav","blob","arrayBuffer","audioCtx","window","AudioContext","webkitAudioContext","decoded","decodeAudioData","monoData","pcm","wavHeader","wavBuffer","Uint8Array","byteLength","set","Blob","startRecording","navigator","mediaDevices","getUserMedia","audio","mimeType","recorder","ondataavailable","e","_e$data","size","push","onstop","fullBlob","wavBlob","processRecording","start","startCountdown","setInterval","prev","stopRecording","_mediaRecorderRef$cur4","response","username","success","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","Array","map","_","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/-IdentiVoice/frontend/src/components/VoiceRecorder.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { registerVoice, loginVoice } from '../utils/api';\r\n\r\nconst VoiceRecorder = ({ mode, userData, handleStatus }) => {\r\n    const [isRecording, setIsRecording] = useState(false);\r\n    const [countdown, setCountdown] = useState(10);\r\n    const [audioBlob, setAudioBlob] = useState(null);\r\n    const [passphrase, setPassphrase] = useState('');\r\n    const mediaRecorderRef = useRef(null);\r\n    const audioChunksRef = useRef([]);\r\n    const countdownRef = useRef(null);\r\n\r\n    const getSupportedMimeType = () => {\r\n        const types = ['audio/webm;codecs=opus', 'audio/webm', 'audio/ogg'];\r\n        return types.find(type => MediaRecorder.isTypeSupported(type)) || '';\r\n    };\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            cleanupRecording();\r\n        };\r\n    }, []);\r\n\r\n    const cleanupRecording = () => {\r\n        try {\r\n            if (mediaRecorderRef.current?.state !== 'inactive') {\r\n                mediaRecorderRef.current.stop();\r\n            }\r\n            mediaRecorderRef.current?.stream?.getTracks().forEach(track => track.stop());\r\n            if (countdownRef.current) clearInterval(countdownRef.current);\r\n            mediaRecorderRef.current = null;\r\n            audioChunksRef.current = [];\r\n            setIsRecording(false);\r\n            setCountdown(10);\r\n        } catch (err) {\r\n            console.error('Error in cleanup:', err);\r\n        }\r\n    };\r\n\r\n    const floatTo16BitPCM = (float32Array) => {\r\n        const int16Array = new Int16Array(float32Array.length);\r\n        for (let i = 0; i < float32Array.length; i++) {\r\n            const s = Math.max(-1, Math.min(1, float32Array[i]));\r\n            int16Array[i] = s < 0 ? s * 0x8000 : s * 0x7FFF;\r\n        }\r\n        return int16Array;\r\n    };\r\n\r\n    const averageChannels = (audioBuffer) => {\r\n        const numChannels = audioBuffer.numberOfChannels;\r\n        const length = audioBuffer.length;\r\n        const averaged = new Float32Array(length);\r\n        for (let c = 0; c < numChannels; c++) {\r\n            const data = audioBuffer.getChannelData(c);\r\n            for (let i = 0; i < length; i++) {\r\n                averaged[i] += data[i] / numChannels;\r\n            }\r\n        }\r\n        return averaged;\r\n    };\r\n\r\n    const createWavHeader = (samplesLength, sampleRate = 16000, numChannels = 1, bitsPerSample = 16) => {\r\n        const blockAlign = numChannels * (bitsPerSample / 8);\r\n        const byteRate = sampleRate * blockAlign;\r\n        const dataSize = samplesLength * (bitsPerSample / 8);\r\n        const buffer = new ArrayBuffer(44);\r\n        const view = new DataView(buffer);\r\n\r\n        const writeString = (offset, str) => {\r\n            for (let i = 0; i < str.length; i++) {\r\n                view.setUint8(offset + i, str.charCodeAt(i));\r\n            }\r\n        };\r\n\r\n        writeString(0, 'RIFF');\r\n        view.setUint32(4, 36 + dataSize, true);\r\n        writeString(8, 'WAVE');\r\n        writeString(12, 'fmt ');\r\n        view.setUint32(16, 16, true);\r\n        view.setUint16(20, 1, true);\r\n        view.setUint16(22, numChannels, true);\r\n        view.setUint32(24, sampleRate, true);\r\n        view.setUint32(28, byteRate, true);\r\n        view.setUint16(32, blockAlign, true);\r\n        view.setUint16(34, bitsPerSample, true);\r\n        writeString(36, 'data');\r\n        view.setUint32(40, dataSize, true);\r\n\r\n        return buffer;\r\n    };\r\n\r\n    const convertToWav = async (blob) => {\r\n        const arrayBuffer = await blob.arrayBuffer();\r\n        const audioCtx = new (window.AudioContext || window.webkitAudioContext)({ sampleRate: 16000 });\r\n        const decoded = await audioCtx.decodeAudioData(arrayBuffer);\r\n        const monoData = averageChannels(decoded);\r\n        const pcm = floatTo16BitPCM(monoData);\r\n        const wavHeader = createWavHeader(pcm.length, 16000, 1, 16);\r\n\r\n        const wavBuffer = new Uint8Array(wavHeader.byteLength + pcm.byteLength);\r\n        wavBuffer.set(new Uint8Array(wavHeader), 0);\r\n        wavBuffer.set(new Uint8Array(pcm.buffer), wavHeader.byteLength);\r\n\r\n        return new Blob([wavBuffer], { type: 'audio/wav' });\r\n    };\r\n\r\n    const startRecording = async () => {\r\n        try {\r\n            cleanupRecording();\r\n\r\n            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n            const mimeType = getSupportedMimeType();\r\n            if (!mimeType) {\r\n                handleStatus('No supported audio format.', 'error');\r\n                return;\r\n            }\r\n\r\n            const recorder = new MediaRecorder(stream, { mimeType });\r\n            mediaRecorderRef.current = recorder;\r\n            audioChunksRef.current = [];\r\n\r\n            recorder.ondataavailable = (e) => {\r\n                if (e.data?.size > 0) {\r\n                    audioChunksRef.current.push(e.data);\r\n                }\r\n            };\r\n\r\n            recorder.onstop = async () => {\r\n                try {\r\n                    const fullBlob = new Blob(audioChunksRef.current, { type: recorder.mimeType });\r\n                    const wavBlob = await convertToWav(fullBlob);\r\n                    setAudioBlob(wavBlob);\r\n                    await processRecording(wavBlob);\r\n                } catch (err) {\r\n                    console.error('Error creating WAV:', err);\r\n                    handleStatus('Error converting recording to WAV format.', 'error');\r\n                }\r\n            };\r\n\r\n            recorder.start(100);\r\n            setIsRecording(true);\r\n            startCountdown();\r\n        } catch (err) {\r\n            console.error('Error starting recording:', err);\r\n            handleStatus('Failed to start recording. Check mic permissions.', 'error');\r\n        }\r\n    };\r\n\r\n    const startCountdown = () => {\r\n        setCountdown(10);\r\n        countdownRef.current = setInterval(() => {\r\n            setCountdown(prev => {\r\n                if (prev <= 1) {\r\n                    clearInterval(countdownRef.current);\r\n                    stopRecording();\r\n                    return 0;\r\n                }\r\n                return prev - 1;\r\n            });\r\n        }, 1000);\r\n    };\r\n\r\n    const stopRecording = () => {\r\n        if (mediaRecorderRef.current?.state === 'recording') {\r\n            mediaRecorderRef.current.stop();\r\n        } else {\r\n            cleanupRecording();\r\n        }\r\n    };\r\n\r\n    const processRecording = async (blob) => {\r\n        try {\r\n            const response = mode === 'register'\r\n                ? await registerVoice(blob, userData)\r\n                : await loginVoice(blob, userData.username);\r\n\r\n            if (response.success) {\r\n                setPassphrase(response.passphrase || '');\r\n                handleStatus(response.message, 'success');\r\n            } else {\r\n                handleStatus(response.message, 'error');\r\n            }\r\n        } catch (err) {\r\n            console.error('Processing error:', err);\r\n            handleStatus('Failed to process recording.', 'error');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"panel\">\r\n            <div className=\"panel-title\">\r\n                <i className=\"fas fa-microphone\" />\r\n                <h2>{mode === 'register' ? 'Voice Registration' : 'Voice Authentication'}</h2>\r\n            </div>\r\n            <div className=\"buttons\">\r\n                <button\r\n                    className={`btn btn-primary ${isRecording ? 'disabled' : ''}`}\r\n                    onClick={startRecording}\r\n                    disabled={isRecording}\r\n                >\r\n                    <i className=\"fas fa-microphone\" />\r\n                    {mode === 'register' ? 'Record Passphrase' : 'Verify Identity'}\r\n                </button>\r\n                {isRecording && (\r\n                    <button className=\"btn btn-danger\" onClick={stopRecording}>\r\n                        <i className=\"fas fa-stop\" /> Stop Recording\r\n                    </button>\r\n                )}\r\n            </div>\r\n            {isRecording && (\r\n                <>\r\n                    <div className=\"recording-indicator\">\r\n                        <div className=\"pulse\" />\r\n                        <div>Recording your voice... Please speak now</div>\r\n                    </div>\r\n                    <div className=\"timer\">{countdown}</div>\r\n                    <div className=\"voice-wave\">\r\n                        {[...Array(8)].map((_, i) => (\r\n                            <div key={i} className=\"wave-bar\" />\r\n                        ))}\r\n                    </div>\r\n                </>\r\n            )}\r\n            {passphrase && (\r\n                <div className=\"result-box\">\r\n                    <div className=\"result-text\">\r\n                        Your {mode === 'register' ? 'registered' : 'recognized'} passphrase:\r\n                        <span> \"{passphrase}\"</span>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VoiceRecorder;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}