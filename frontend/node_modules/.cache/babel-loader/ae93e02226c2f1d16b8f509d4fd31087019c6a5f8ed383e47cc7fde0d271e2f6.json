{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\voice-auth-system\\\\frontend\\\\src\\\\components\\\\VoiceRecorder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { registerVoice, loginVoice } from '../utils/api';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst VoiceRecorder = ({\n  mode,\n  userData,\n  handleStatus\n}) => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [countdown, setCountdown] = useState(10);\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [passphrase, setPassphrase] = useState('');\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const countdownRef = useRef(null);\n  useEffect(() => {\n    return () => {\n      stopRecording();\n      if (countdownRef.current) {\n        clearInterval(countdownRef.current);\n      }\n    };\n  }, []);\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          channelCount: 1,\n          sampleRate: 16000\n        }\n      });\n\n      // Create MediaRecorder with specific MIME type\n      const options = {\n        mimeType: 'audio/webm'\n      };\n      mediaRecorderRef.current = new MediaRecorder(stream, options);\n      audioChunksRef.current = [];\n      mediaRecorderRef.current.ondataavailable = e => {\n        if (e.data.size > 0) {\n          audioChunksRef.current.push(e.data);\n        }\n      };\n      mediaRecorderRef.current.onstop = async () => {\n        try {\n          // Create a blob from the audio chunks\n          const audioBlob = new Blob(audioChunksRef.current, {\n            type: 'audio/webm'\n          });\n\n          // Convert webm to wav using Web Audio API\n          const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n          const arrayBuffer = await audioBlob.arrayBuffer();\n          const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n\n          // Create WAV file\n          const wavBuffer = audioBufferToWav(audioBuffer);\n          const wavBlob = new Blob([wavBuffer], {\n            type: 'audio/wav'\n          });\n          setAudioBlob(wavBlob);\n          processRecording(wavBlob);\n        } catch (error) {\n          console.error('Error processing audio:', error);\n          handleStatus('Error processing audio. Please try again.', 'error');\n        }\n      };\n\n      // Start recording with timeslices to get data more frequently\n      mediaRecorderRef.current.start(100);\n      setIsRecording(true);\n      startCountdown();\n    } catch (err) {\n      handleStatus('Microphone access denied. Please allow microphone permissions.', 'error');\n      console.error('Error accessing microphone:', err);\n    }\n  };\n\n  // Function to convert AudioBuffer to WAV format\n  const audioBufferToWav = audioBuffer => {\n    const numOfChan = audioBuffer.numberOfChannels;\n    const length = audioBuffer.length * numOfChan * 2;\n    const buffer = new ArrayBuffer(44 + length);\n    const view = new DataView(buffer);\n    const channels = [];\n    let sample;\n    let offset = 0;\n    let pos = 0;\n\n    // Write WAV header\n    setUint32(0x46464952); // \"RIFF\"\n    setUint32(36 + length); // file length\n    setUint32(0x45564157); // \"WAVE\"\n    setUint32(0x20746D66); // \"fmt \" chunk\n    setUint32(16); // length = 16\n    setUint16(1); // PCM (uncompressed)\n    setUint16(numOfChan);\n    setUint32(audioBuffer.sampleRate);\n    setUint32(audioBuffer.sampleRate * 2 * numOfChan); // avg. bytes/sec\n    setUint16(numOfChan * 2); // block-align\n    setUint16(16); // 16-bit\n    setUint32(0x61746164); // \"data\" - chunk\n    setUint32(length); // chunk length\n\n    // Write interleaved data\n    for (let i = 0; i < audioBuffer.numberOfChannels; i++) {\n      channels.push(audioBuffer.getChannelData(i));\n    }\n    while (pos < audioBuffer.length) {\n      for (let i = 0; i < numOfChan; i++) {\n        sample = Math.max(-1, Math.min(1, channels[i][pos]));\n        sample = (0.5 + sample < 0 ? sample * 32768 : sample * 32767) | 0;\n        view.setInt16(44 + offset, sample, true);\n        offset += 2;\n      }\n      pos++;\n    }\n    return buffer;\n    function setUint16(data) {\n      view.setUint16(pos, data, true);\n      pos += 2;\n    }\n    function setUint32(data) {\n      view.setUint32(pos, data, true);\n      pos += 4;\n    }\n  };\n  const startCountdown = () => {\n    setCountdown(10);\n    countdownRef.current = setInterval(() => {\n      setCountdown(prev => {\n        if (prev <= 1) {\n          clearInterval(countdownRef.current);\n          stopRecording();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n  const stopRecording = () => {\n    try {\n      if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n        mediaRecorderRef.current.stop();\n        mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());\n        setIsRecording(false);\n      }\n    } catch (err) {\n      console.error('Error stopping recording:', err);\n      handleStatus('Error stopping recording. Please try again.', 'error');\n      setIsRecording(false);\n    }\n  };\n  const processRecording = async blob => {\n    try {\n      let response;\n      if (mode === 'register') {\n        response = await registerVoice(blob, userData);\n      } else {\n        response = await loginVoice(blob, userData.username);\n      }\n      if (response.success) {\n        setPassphrase(response.passphrase || '');\n        handleStatus(response.message, 'success');\n      } else {\n        handleStatus(response.message, 'error');\n      }\n    } catch (err) {\n      handleStatus('Failed to process recording. Please try again.', 'error');\n      console.error('Error processing recording:', err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel-title\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-microphone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: mode === 'register' ? 'Voice Registration' : 'Voice Authentication'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `btn btn-primary ${isRecording ? 'disabled' : ''}`,\n        onClick: startRecording,\n        disabled: isRecording,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-microphone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 21\n        }, this), mode === 'register' ? 'Record Passphrase' : 'Verify Identity']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }, this), isRecording && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recording-indicator\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pulse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Recording your voice... Please speak now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: countdown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"voice-wave\",\n        children: [...Array(8)].map((_, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wave-bar\"\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), passphrase && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-box\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-text\",\n        children: [\"Your \", mode === 'register' ? 'registered' : 'recognized', \" passphrase:\", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\" \\\"\", passphrase, \"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 9\n  }, this);\n};\n_s(VoiceRecorder, \"qG2QUNgwD7BrCv8Y2/BNeRmjsOk=\");\n_c = VoiceRecorder;\nexport default VoiceRecorder;\nvar _c;\n$RefreshReg$(_c, \"VoiceRecorder\");","map":{"version":3,"names":["React","useState","useEffect","useRef","registerVoice","loginVoice","jsxDEV","_jsxDEV","Fragment","_Fragment","VoiceRecorder","mode","userData","handleStatus","_s","isRecording","setIsRecording","countdown","setCountdown","audioBlob","setAudioBlob","passphrase","setPassphrase","mediaRecorderRef","audioChunksRef","countdownRef","stopRecording","current","clearInterval","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","channelCount","sampleRate","options","mimeType","MediaRecorder","ondataavailable","e","data","size","push","onstop","Blob","type","audioContext","window","AudioContext","webkitAudioContext","arrayBuffer","audioBuffer","decodeAudioData","wavBuffer","audioBufferToWav","wavBlob","processRecording","error","console","start","startCountdown","err","numOfChan","numberOfChannels","length","buffer","ArrayBuffer","view","DataView","channels","sample","offset","pos","setUint32","setUint16","i","getChannelData","Math","max","min","setInt16","setInterval","prev","state","stop","getTracks","forEach","track","blob","response","username","success","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","Array","map","_","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/voice-auth-system/frontend/src/components/VoiceRecorder.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { registerVoice, loginVoice } from '../utils/api';\r\n\r\nconst VoiceRecorder = ({ mode, userData, handleStatus }) => {\r\n    const [isRecording, setIsRecording] = useState(false);\r\n    const [countdown, setCountdown] = useState(10);\r\n    const [audioBlob, setAudioBlob] = useState(null);\r\n    const [passphrase, setPassphrase] = useState('');\r\n    const mediaRecorderRef = useRef(null);\r\n    const audioChunksRef = useRef([]);\r\n    const countdownRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            stopRecording();\r\n            if (countdownRef.current) {\r\n                clearInterval(countdownRef.current);\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    const startRecording = async () => {\r\n        try {\r\n            const stream = await navigator.mediaDevices.getUserMedia({ \r\n                audio: {\r\n                    channelCount: 1,\r\n                    sampleRate: 16000\r\n                } \r\n            });\r\n            \r\n            // Create MediaRecorder with specific MIME type\r\n            const options = { mimeType: 'audio/webm' };\r\n            mediaRecorderRef.current = new MediaRecorder(stream, options);\r\n            audioChunksRef.current = [];\r\n            \r\n            mediaRecorderRef.current.ondataavailable = (e) => {\r\n                if (e.data.size > 0) {\r\n                    audioChunksRef.current.push(e.data);\r\n                }\r\n            };\r\n            \r\n            mediaRecorderRef.current.onstop = async () => {\r\n                try {\r\n                    // Create a blob from the audio chunks\r\n                    const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/webm' });\r\n                    \r\n                    // Convert webm to wav using Web Audio API\r\n                    const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n                    const arrayBuffer = await audioBlob.arrayBuffer();\r\n                    const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\r\n                    \r\n                    // Create WAV file\r\n                    const wavBuffer = audioBufferToWav(audioBuffer);\r\n                    const wavBlob = new Blob([wavBuffer], { type: 'audio/wav' });\r\n                    \r\n                    setAudioBlob(wavBlob);\r\n                    processRecording(wavBlob);\r\n                } catch (error) {\r\n                    console.error('Error processing audio:', error);\r\n                    handleStatus('Error processing audio. Please try again.', 'error');\r\n                }\r\n            };\r\n\r\n            // Start recording with timeslices to get data more frequently\r\n            mediaRecorderRef.current.start(100);\r\n            setIsRecording(true);\r\n            startCountdown();\r\n            \r\n        } catch (err) {\r\n            handleStatus('Microphone access denied. Please allow microphone permissions.', 'error');\r\n            console.error('Error accessing microphone:', err);\r\n        }\r\n    };\r\n\r\n    // Function to convert AudioBuffer to WAV format\r\n    const audioBufferToWav = (audioBuffer) => {\r\n        const numOfChan = audioBuffer.numberOfChannels;\r\n        const length = audioBuffer.length * numOfChan * 2;\r\n        const buffer = new ArrayBuffer(44 + length);\r\n        const view = new DataView(buffer);\r\n        const channels = [];\r\n        let sample;\r\n        let offset = 0;\r\n        let pos = 0;\r\n\r\n        // Write WAV header\r\n        setUint32(0x46464952);          // \"RIFF\"\r\n        setUint32(36 + length);         // file length\r\n        setUint32(0x45564157);          // \"WAVE\"\r\n        setUint32(0x20746D66);          // \"fmt \" chunk\r\n        setUint32(16);                  // length = 16\r\n        setUint16(1);                   // PCM (uncompressed)\r\n        setUint16(numOfChan);\r\n        setUint32(audioBuffer.sampleRate);\r\n        setUint32(audioBuffer.sampleRate * 2 * numOfChan); // avg. bytes/sec\r\n        setUint16(numOfChan * 2);       // block-align\r\n        setUint16(16);                  // 16-bit\r\n        setUint32(0x61746164);          // \"data\" - chunk\r\n        setUint32(length);              // chunk length\r\n\r\n        // Write interleaved data\r\n        for (let i = 0; i < audioBuffer.numberOfChannels; i++) {\r\n            channels.push(audioBuffer.getChannelData(i));\r\n        }\r\n\r\n        while (pos < audioBuffer.length) {\r\n            for (let i = 0; i < numOfChan; i++) {\r\n                sample = Math.max(-1, Math.min(1, channels[i][pos]));\r\n                sample = (0.5 + sample < 0 ? sample * 32768 : sample * 32767) | 0;\r\n                view.setInt16(44 + offset, sample, true);\r\n                offset += 2;\r\n            }\r\n            pos++;\r\n        }\r\n\r\n        return buffer;\r\n\r\n        function setUint16(data) {\r\n            view.setUint16(pos, data, true);\r\n            pos += 2;\r\n        }\r\n\r\n        function setUint32(data) {\r\n            view.setUint32(pos, data, true);\r\n            pos += 4;\r\n        }\r\n    };\r\n\r\n    const startCountdown = () => {\r\n        setCountdown(10);\r\n        countdownRef.current = setInterval(() => {\r\n            setCountdown(prev => {\r\n                if (prev <= 1) {\r\n                    clearInterval(countdownRef.current);\r\n                    stopRecording();\r\n                    return 0;\r\n                }\r\n                return prev - 1;\r\n            });\r\n        }, 1000);\r\n    };\r\n\r\n    const stopRecording = () => {\r\n        try {\r\n            if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\r\n                mediaRecorderRef.current.stop();\r\n                mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());\r\n                setIsRecording(false);\r\n            }\r\n        } catch (err) {\r\n            console.error('Error stopping recording:', err);\r\n            handleStatus('Error stopping recording. Please try again.', 'error');\r\n            setIsRecording(false);\r\n        }\r\n    };\r\n\r\n    const processRecording = async (blob) => {\r\n        try {\r\n            let response;\r\n            if (mode === 'register') {\r\n                response = await registerVoice(blob, userData);\r\n            } else {\r\n                response = await loginVoice(blob, userData.username);\r\n            }\r\n            \r\n            if (response.success) {\r\n                setPassphrase(response.passphrase || '');\r\n                handleStatus(response.message, 'success');\r\n            } else {\r\n                handleStatus(response.message, 'error');\r\n            }\r\n        } catch (err) {\r\n            handleStatus('Failed to process recording. Please try again.', 'error');\r\n            console.error('Error processing recording:', err);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"panel\">\r\n            <div className=\"panel-title\">\r\n                <i className=\"fas fa-microphone\"></i>\r\n                <h2>{mode === 'register' ? 'Voice Registration' : 'Voice Authentication'}</h2>\r\n            </div>\r\n            \r\n            <div className=\"buttons\">\r\n                <button \r\n                    className={`btn btn-primary ${isRecording ? 'disabled' : ''}`}\r\n                    onClick={startRecording}\r\n                    disabled={isRecording}\r\n                >\r\n                    <i className=\"fas fa-microphone\"></i> \r\n                    {mode === 'register' ? 'Record Passphrase' : 'Verify Identity'}\r\n                </button>\r\n            </div>\r\n            \r\n            {isRecording && (\r\n                <>\r\n                    <div className=\"recording-indicator\">\r\n                        <div className=\"pulse\"></div>\r\n                        <div>Recording your voice... Please speak now</div>\r\n                    </div>\r\n                    <div className=\"timer\">{countdown}</div>\r\n                    <div className=\"voice-wave\">\r\n                        {[...Array(8)].map((_, i) => (\r\n                            <div key={i} className=\"wave-bar\"></div>\r\n                        ))}\r\n                    </div>\r\n                </>\r\n            )}\r\n            \r\n            {passphrase && (\r\n                <div className=\"result-box\">\r\n                    <div className=\"result-text\">\r\n                        Your {mode === 'register' ? 'registered' : 'recognized'} passphrase: \r\n                        <span> \"{passphrase}\"</span>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VoiceRecorder;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,aAAa,EAAEC,UAAU,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEzD,MAAMC,aAAa,GAAGA,CAAC;EAAEC,IAAI;EAAEC,QAAQ;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EACxD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACgB,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACkB,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACoB,UAAU,EAAEC,aAAa,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAMsB,gBAAgB,GAAGpB,MAAM,CAAC,IAAI,CAAC;EACrC,MAAMqB,cAAc,GAAGrB,MAAM,CAAC,EAAE,CAAC;EACjC,MAAMsB,YAAY,GAAGtB,MAAM,CAAC,IAAI,CAAC;EAEjCD,SAAS,CAAC,MAAM;IACZ,OAAO,MAAM;MACTwB,aAAa,CAAC,CAAC;MACf,IAAID,YAAY,CAACE,OAAO,EAAE;QACtBC,aAAa,CAACH,YAAY,CAACE,OAAO,CAAC;MACvC;IACJ,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,cAAc,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACA,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QACrDC,KAAK,EAAE;UACHC,YAAY,EAAE,CAAC;UACfC,UAAU,EAAE;QAChB;MACJ,CAAC,CAAC;;MAEF;MACA,MAAMC,OAAO,GAAG;QAAEC,QAAQ,EAAE;MAAa,CAAC;MAC1Cf,gBAAgB,CAACI,OAAO,GAAG,IAAIY,aAAa,CAACT,MAAM,EAAEO,OAAO,CAAC;MAC7Db,cAAc,CAACG,OAAO,GAAG,EAAE;MAE3BJ,gBAAgB,CAACI,OAAO,CAACa,eAAe,GAAIC,CAAC,IAAK;QAC9C,IAAIA,CAAC,CAACC,IAAI,CAACC,IAAI,GAAG,CAAC,EAAE;UACjBnB,cAAc,CAACG,OAAO,CAACiB,IAAI,CAACH,CAAC,CAACC,IAAI,CAAC;QACvC;MACJ,CAAC;MAEDnB,gBAAgB,CAACI,OAAO,CAACkB,MAAM,GAAG,YAAY;QAC1C,IAAI;UACA;UACA,MAAM1B,SAAS,GAAG,IAAI2B,IAAI,CAACtB,cAAc,CAACG,OAAO,EAAE;YAAEoB,IAAI,EAAE;UAAa,CAAC,CAAC;;UAE1E;UACA,MAAMC,YAAY,GAAG,KAAKC,MAAM,CAACC,YAAY,IAAID,MAAM,CAACE,kBAAkB,EAAE,CAAC;UAC7E,MAAMC,WAAW,GAAG,MAAMjC,SAAS,CAACiC,WAAW,CAAC,CAAC;UACjD,MAAMC,WAAW,GAAG,MAAML,YAAY,CAACM,eAAe,CAACF,WAAW,CAAC;;UAEnE;UACA,MAAMG,SAAS,GAAGC,gBAAgB,CAACH,WAAW,CAAC;UAC/C,MAAMI,OAAO,GAAG,IAAIX,IAAI,CAAC,CAACS,SAAS,CAAC,EAAE;YAAER,IAAI,EAAE;UAAY,CAAC,CAAC;UAE5D3B,YAAY,CAACqC,OAAO,CAAC;UACrBC,gBAAgB,CAACD,OAAO,CAAC;QAC7B,CAAC,CAAC,OAAOE,KAAK,EAAE;UACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;UAC/C9C,YAAY,CAAC,2CAA2C,EAAE,OAAO,CAAC;QACtE;MACJ,CAAC;;MAED;MACAU,gBAAgB,CAACI,OAAO,CAACkC,KAAK,CAAC,GAAG,CAAC;MACnC7C,cAAc,CAAC,IAAI,CAAC;MACpB8C,cAAc,CAAC,CAAC;IAEpB,CAAC,CAAC,OAAOC,GAAG,EAAE;MACVlD,YAAY,CAAC,gEAAgE,EAAE,OAAO,CAAC;MACvF+C,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEI,GAAG,CAAC;IACrD;EACJ,CAAC;;EAED;EACA,MAAMP,gBAAgB,GAAIH,WAAW,IAAK;IACtC,MAAMW,SAAS,GAAGX,WAAW,CAACY,gBAAgB;IAC9C,MAAMC,MAAM,GAAGb,WAAW,CAACa,MAAM,GAAGF,SAAS,GAAG,CAAC;IACjD,MAAMG,MAAM,GAAG,IAAIC,WAAW,CAAC,EAAE,GAAGF,MAAM,CAAC;IAC3C,MAAMG,IAAI,GAAG,IAAIC,QAAQ,CAACH,MAAM,CAAC;IACjC,MAAMI,QAAQ,GAAG,EAAE;IACnB,IAAIC,MAAM;IACV,IAAIC,MAAM,GAAG,CAAC;IACd,IAAIC,GAAG,GAAG,CAAC;;IAEX;IACAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAU;IAChCA,SAAS,CAAC,EAAE,GAAGT,MAAM,CAAC,CAAC,CAAS;IAChCS,SAAS,CAAC,UAAU,CAAC,CAAC,CAAU;IAChCA,SAAS,CAAC,UAAU,CAAC,CAAC,CAAU;IAChCA,SAAS,CAAC,EAAE,CAAC,CAAC,CAAkB;IAChCC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAmB;IAChCA,SAAS,CAACZ,SAAS,CAAC;IACpBW,SAAS,CAACtB,WAAW,CAACjB,UAAU,CAAC;IACjCuC,SAAS,CAACtB,WAAW,CAACjB,UAAU,GAAG,CAAC,GAAG4B,SAAS,CAAC,CAAC,CAAC;IACnDY,SAAS,CAACZ,SAAS,GAAG,CAAC,CAAC,CAAC,CAAO;IAChCY,SAAS,CAAC,EAAE,CAAC,CAAC,CAAkB;IAChCD,SAAS,CAAC,UAAU,CAAC,CAAC,CAAU;IAChCA,SAAS,CAACT,MAAM,CAAC,CAAC,CAAc;;IAEhC;IACA,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxB,WAAW,CAACY,gBAAgB,EAAEY,CAAC,EAAE,EAAE;MACnDN,QAAQ,CAAC3B,IAAI,CAACS,WAAW,CAACyB,cAAc,CAACD,CAAC,CAAC,CAAC;IAChD;IAEA,OAAOH,GAAG,GAAGrB,WAAW,CAACa,MAAM,EAAE;MAC7B,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,SAAS,EAAEa,CAAC,EAAE,EAAE;QAChCL,MAAM,GAAGO,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,EAAED,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEV,QAAQ,CAACM,CAAC,CAAC,CAACH,GAAG,CAAC,CAAC,CAAC;QACpDF,MAAM,GAAG,CAAC,GAAG,GAAGA,MAAM,GAAG,CAAC,GAAGA,MAAM,GAAG,KAAK,GAAGA,MAAM,GAAG,KAAK,IAAI,CAAC;QACjEH,IAAI,CAACa,QAAQ,CAAC,EAAE,GAAGT,MAAM,EAAED,MAAM,EAAE,IAAI,CAAC;QACxCC,MAAM,IAAI,CAAC;MACf;MACAC,GAAG,EAAE;IACT;IAEA,OAAOP,MAAM;IAEb,SAASS,SAASA,CAAClC,IAAI,EAAE;MACrB2B,IAAI,CAACO,SAAS,CAACF,GAAG,EAAEhC,IAAI,EAAE,IAAI,CAAC;MAC/BgC,GAAG,IAAI,CAAC;IACZ;IAEA,SAASC,SAASA,CAACjC,IAAI,EAAE;MACrB2B,IAAI,CAACM,SAAS,CAACD,GAAG,EAAEhC,IAAI,EAAE,IAAI,CAAC;MAC/BgC,GAAG,IAAI,CAAC;IACZ;EACJ,CAAC;EAED,MAAMZ,cAAc,GAAGA,CAAA,KAAM;IACzB5C,YAAY,CAAC,EAAE,CAAC;IAChBO,YAAY,CAACE,OAAO,GAAGwD,WAAW,CAAC,MAAM;MACrCjE,YAAY,CAACkE,IAAI,IAAI;QACjB,IAAIA,IAAI,IAAI,CAAC,EAAE;UACXxD,aAAa,CAACH,YAAY,CAACE,OAAO,CAAC;UACnCD,aAAa,CAAC,CAAC;UACf,OAAO,CAAC;QACZ;QACA,OAAO0D,IAAI,GAAG,CAAC;MACnB,CAAC,CAAC;IACN,CAAC,EAAE,IAAI,CAAC;EACZ,CAAC;EAED,MAAM1D,aAAa,GAAGA,CAAA,KAAM;IACxB,IAAI;MACA,IAAIH,gBAAgB,CAACI,OAAO,IAAIJ,gBAAgB,CAACI,OAAO,CAAC0D,KAAK,KAAK,UAAU,EAAE;QAC3E9D,gBAAgB,CAACI,OAAO,CAAC2D,IAAI,CAAC,CAAC;QAC/B/D,gBAAgB,CAACI,OAAO,CAACG,MAAM,CAACyD,SAAS,CAAC,CAAC,CAACC,OAAO,CAACC,KAAK,IAAIA,KAAK,CAACH,IAAI,CAAC,CAAC,CAAC;QAC1EtE,cAAc,CAAC,KAAK,CAAC;MACzB;IACJ,CAAC,CAAC,OAAO+C,GAAG,EAAE;MACVH,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEI,GAAG,CAAC;MAC/ClD,YAAY,CAAC,6CAA6C,EAAE,OAAO,CAAC;MACpEG,cAAc,CAAC,KAAK,CAAC;IACzB;EACJ,CAAC;EAED,MAAM0C,gBAAgB,GAAG,MAAOgC,IAAI,IAAK;IACrC,IAAI;MACA,IAAIC,QAAQ;MACZ,IAAIhF,IAAI,KAAK,UAAU,EAAE;QACrBgF,QAAQ,GAAG,MAAMvF,aAAa,CAACsF,IAAI,EAAE9E,QAAQ,CAAC;MAClD,CAAC,MAAM;QACH+E,QAAQ,GAAG,MAAMtF,UAAU,CAACqF,IAAI,EAAE9E,QAAQ,CAACgF,QAAQ,CAAC;MACxD;MAEA,IAAID,QAAQ,CAACE,OAAO,EAAE;QAClBvE,aAAa,CAACqE,QAAQ,CAACtE,UAAU,IAAI,EAAE,CAAC;QACxCR,YAAY,CAAC8E,QAAQ,CAACG,OAAO,EAAE,SAAS,CAAC;MAC7C,CAAC,MAAM;QACHjF,YAAY,CAAC8E,QAAQ,CAACG,OAAO,EAAE,OAAO,CAAC;MAC3C;IACJ,CAAC,CAAC,OAAO/B,GAAG,EAAE;MACVlD,YAAY,CAAC,gDAAgD,EAAE,OAAO,CAAC;MACvE+C,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEI,GAAG,CAAC;IACrD;EACJ,CAAC;EAED,oBACIxD,OAAA;IAAKwF,SAAS,EAAC,OAAO;IAAAC,QAAA,gBAClBzF,OAAA;MAAKwF,SAAS,EAAC,aAAa;MAAAC,QAAA,gBACxBzF,OAAA;QAAGwF,SAAS,EAAC;MAAmB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrC7F,OAAA;QAAAyF,QAAA,EAAKrF,IAAI,KAAK,UAAU,GAAG,oBAAoB,GAAG;MAAsB;QAAAsF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7E,CAAC,eAEN7F,OAAA;MAAKwF,SAAS,EAAC,SAAS;MAAAC,QAAA,eACpBzF,OAAA;QACIwF,SAAS,EAAE,mBAAmBhF,WAAW,GAAG,UAAU,GAAG,EAAE,EAAG;QAC9DsF,OAAO,EAAExE,cAAe;QACxByE,QAAQ,EAAEvF,WAAY;QAAAiF,QAAA,gBAEtBzF,OAAA;UAAGwF,SAAS,EAAC;QAAmB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EACpCzF,IAAI,KAAK,UAAU,GAAG,mBAAmB,GAAG,iBAAiB;MAAA;QAAAsF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1D;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC,EAELrF,WAAW,iBACRR,OAAA,CAAAE,SAAA;MAAAuF,QAAA,gBACIzF,OAAA;QAAKwF,SAAS,EAAC,qBAAqB;QAAAC,QAAA,gBAChCzF,OAAA;UAAKwF,SAAS,EAAC;QAAO;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC7B7F,OAAA;UAAAyF,QAAA,EAAK;QAAwC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClD,CAAC,eACN7F,OAAA;QAAKwF,SAAS,EAAC,OAAO;QAAAC,QAAA,EAAE/E;MAAS;QAAAgF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACxC7F,OAAA;QAAKwF,SAAS,EAAC,YAAY;QAAAC,QAAA,EACtB,CAAC,GAAGO,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,CAACC,CAAC,EAAE5B,CAAC,kBACpBtE,OAAA;UAAawF,SAAS,EAAC;QAAU,GAAvBlB,CAAC;UAAAoB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAA4B,CAC1C;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC;IAAA,eACR,CACL,EAEA/E,UAAU,iBACPd,OAAA;MAAKwF,SAAS,EAAC,YAAY;MAAAC,QAAA,eACvBzF,OAAA;QAAKwF,SAAS,EAAC,aAAa;QAAAC,QAAA,GAAC,OACpB,EAACrF,IAAI,KAAK,UAAU,GAAG,YAAY,GAAG,YAAY,EAAC,cACxD,eAAAJ,OAAA;UAAAyF,QAAA,GAAM,KAAE,EAAC3E,UAAU,EAAC,IAAC;QAAA;UAAA4E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACtF,EAAA,CAzNIJ,aAAa;AAAAgG,EAAA,GAAbhG,aAAa;AA2NnB,eAAeA,aAAa;AAAC,IAAAgG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}