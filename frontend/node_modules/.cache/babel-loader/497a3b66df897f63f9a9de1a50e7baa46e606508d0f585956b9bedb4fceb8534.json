{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\-IdentiVoice\\\\frontend\\\\src\\\\components\\\\VoiceRecorder.js\",\n  _s = $RefreshSig$();\n// Modified VoiceRecorder.js with proper WAV encoding and cleanup handling\nimport React, { useState, useEffect, useRef } from 'react';\nimport { registerVoice, loginVoice } from '../utils/api';\nimport WavEncoder from 'wav-encoder';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst VoiceRecorder = ({\n  mode,\n  userData,\n  handleStatus\n}) => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [countdown, setCountdown] = useState(10);\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [passphrase, setPassphrase] = useState('');\n  const [rawBlob, setRawBlob] = useState(null);\n  const mediaRecorderRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const countdownRef = useRef(null);\n  useEffect(() => {\n    return () => {\n      cleanupRecording();\n    };\n  }, []);\n  const initAudioContext = () => {\n    if (!audioContextRef.current || audioContextRef.current.state === 'closed') {\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n    }\n    return audioContextRef.current;\n  };\n  const cleanupRecording = () => {\n    try {\n      var _mediaRecorderRef$cur, _mediaRecorderRef$cur2, _mediaRecorderRef$cur3;\n      if (((_mediaRecorderRef$cur = mediaRecorderRef.current) === null || _mediaRecorderRef$cur === void 0 ? void 0 : _mediaRecorderRef$cur.state) === 'recording') {\n        mediaRecorderRef.current.stop();\n      }\n      (_mediaRecorderRef$cur2 = mediaRecorderRef.current) === null || _mediaRecorderRef$cur2 === void 0 ? void 0 : (_mediaRecorderRef$cur3 = _mediaRecorderRef$cur2.stream) === null || _mediaRecorderRef$cur3 === void 0 ? void 0 : _mediaRecorderRef$cur3.getTracks().forEach(track => track.stop());\n      if (countdownRef.current) clearInterval(countdownRef.current);\n      mediaRecorderRef.current = null;\n      audioChunksRef.current = [];\n      setIsRecording(false);\n      setCountdown(10);\n    } catch (err) {\n      console.error('Error in cleanup:', err);\n    }\n  };\n  const floatTo16BitPCM = float32Array => {\n    const buffer = new Int16Array(float32Array.length);\n    for (let i = 0; i < float32Array.length; i++) {\n      const s = Math.max(-1, Math.min(1, float32Array[i]));\n      buffer[i] = s < 0 ? s * 0x8000 : s * 0x7FFF;\n    }\n    return buffer;\n  };\n  const averageChannels = audioBuffer => {\n    const numChannels = audioBuffer.numberOfChannels;\n    const length = audioBuffer.length;\n    const avgData = new Float32Array(length);\n    for (let c = 0; c < numChannels; c++) {\n      const channel = audioBuffer.getChannelData(c);\n      for (let i = 0; i < length; i++) {\n        avgData[i] += channel[i] / numChannels;\n      }\n    }\n    return avgData;\n  };\n  const createWavHeader = (length, sampleRate = 16000, numChannels = 1, bitsPerSample = 16) => {\n    const byteRate = sampleRate * numChannels * bitsPerSample / 8;\n    const blockAlign = numChannels * bitsPerSample / 8;\n    const subChunk2Size = length * numChannels * bitsPerSample / 8;\n    const chunkSize = 36 + subChunk2Size;\n    const buffer = new ArrayBuffer(44);\n    const view = new DataView(buffer);\n    const writeString = (view, offset, string) => {\n      for (let i = 0; i < string.length; i++) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n      }\n    };\n    writeString(view, 0, 'RIFF');\n    view.setUint32(4, chunkSize, true);\n    writeString(view, 8, 'WAVE');\n    writeString(view, 12, 'fmt ');\n    view.setUint32(16, 16, true);\n    view.setUint16(20, 1, true);\n    view.setUint16(22, numChannels, true);\n    view.setUint32(24, sampleRate, true);\n    view.setUint32(28, byteRate, true);\n    view.setUint16(32, blockAlign, true);\n    view.setUint16(34, bitsPerSample, true);\n    writeString(view, 36, 'data');\n    view.setUint32(40, subChunk2Size, true);\n    return buffer;\n  };\n  const startRecording = async () => {\n    try {\n      cleanupRecording();\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorderRef.current = mediaRecorder;\n      audioChunksRef.current = [];\n      mediaRecorder.ondataavailable = e => {\n        if (e.data.size > 0) audioChunksRef.current.push(e.data);\n      };\n      mediaRecorder.onstop = async () => {\n        try {\n          const blob = new Blob(audioChunksRef.current, {\n            type: 'audio/webm'\n          });\n          setRawBlob(blob);\n\n          // Optional: Save raw WebM for debug\n          const rawUrl = URL.createObjectURL(blob);\n          const rawDownload = document.createElement('a');\n          rawDownload.href = rawUrl;\n          rawDownload.download = 'raw_recording.webm';\n          rawDownload.click();\n          URL.revokeObjectURL(rawUrl);\n          const arrayBuffer = await blob.arrayBuffer();\n          const audioContext = initAudioContext();\n          const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n\n          // Convert to mono Float32Array\n          const monoData = audioBuffer.numberOfChannels > 1 ? averageChannels(audioBuffer) : audioBuffer.getChannelData(0);\n\n          // Encode using wav-encoder\n          const wavBuffer = await WavEncoder.encode({\n            sampleRate: 16000,\n            // match what your backend expects\n            channelData: [monoData]\n          });\n          const wavBlob = new Blob([wavBuffer], {\n            type: 'audio/wav'\n          });\n          setAudioBlob(wavBlob);\n\n          // Optional: Download the WAV file\n          const wavUrl = URL.createObjectURL(wavBlob);\n          const downloadLink = document.createElement('a');\n          downloadLink.href = wavUrl;\n          downloadLink.download = 'debug_recording.wav';\n          downloadLink.click();\n          URL.revokeObjectURL(wavUrl);\n          await processRecording(wavBlob, webmBlob);\n        } catch (error) {\n          console.error('Error creating WAV:', error);\n          handleStatus('Error converting recording to WAV format.', 'error');\n        } finally {\n          cleanupRecording();\n        }\n      };\n      mediaRecorder.start(100);\n      setIsRecording(true);\n      startCountdown();\n    } catch (err) {\n      console.error('Error starting recording:', err);\n      handleStatus('Failed to start recording. Check mic permissions.', 'error');\n      cleanupRecording();\n    }\n  };\n  const startCountdown = () => {\n    setCountdown(10);\n    countdownRef.current = setInterval(() => {\n      setCountdown(prev => {\n        if (prev <= 1) {\n          clearInterval(countdownRef.current);\n          stopRecording();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n  const stopRecording = () => {\n    try {\n      var _mediaRecorderRef$cur4;\n      if (((_mediaRecorderRef$cur4 = mediaRecorderRef.current) === null || _mediaRecorderRef$cur4 === void 0 ? void 0 : _mediaRecorderRef$cur4.state) === 'recording') {\n        mediaRecorderRef.current.stop();\n      }\n    } catch (err) {\n      console.error('Error stopping recording:', err);\n      handleStatus('Error stopping recording. Try again.', 'error');\n      cleanupRecording();\n    }\n  };\n  const processRecording = async (wavBlob, webmBlob) => {\n    try {\n      const response = mode === 'register' ? await registerVoice(wavBlob, webmBlob, userData) : await loginVoice(wavBlob, userData.username);\n      if (response.success) {\n        setPassphrase(response.passphrase || '');\n        handleStatus(response.message, 'success');\n      } else {\n        handleStatus(response.message, 'error');\n      }\n    } catch (err) {\n      console.error('Error processing recording:', err);\n      handleStatus(err.message || 'Failed to process recording.', 'error');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel-title\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-microphone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: mode === 'register' ? 'Voice Registration' : 'Voice Authentication'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `btn btn-primary ${isRecording ? 'disabled' : ''}`,\n        onClick: startRecording,\n        disabled: isRecording,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-microphone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 25\n        }, this), mode === 'register' ? 'Record Passphrase' : 'Verify Identity']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 21\n      }, this), isRecording && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-danger\",\n        onClick: stopRecording,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 29\n        }, this), \" Stop Recording\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 17\n    }, this), isRecording && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recording-indicator\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pulse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Recording your voice... Please speak now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: countdown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"voice-wave\",\n        children: [...Array(8)].map((_, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wave-bar\"\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 58\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true), passphrase && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-box\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-text\",\n        children: [\"Your \", mode === 'register' ? 'registered' : 'recognized', \" passphrase:\", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\" \\\"\", passphrase, \"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 13\n  }, this);\n};\n_s(VoiceRecorder, \"ix7j9RiM7OlMgh9pAeiox8ZJzdU=\");\n_c = VoiceRecorder;\nexport default VoiceRecorder;\nvar _c;\n$RefreshReg$(_c, \"VoiceRecorder\");","map":{"version":3,"names":["React","useState","useEffect","useRef","registerVoice","loginVoice","WavEncoder","jsxDEV","_jsxDEV","Fragment","_Fragment","VoiceRecorder","mode","userData","handleStatus","_s","isRecording","setIsRecording","countdown","setCountdown","audioBlob","setAudioBlob","passphrase","setPassphrase","rawBlob","setRawBlob","mediaRecorderRef","audioContextRef","audioChunksRef","countdownRef","cleanupRecording","initAudioContext","current","state","window","AudioContext","webkitAudioContext","_mediaRecorderRef$cur","_mediaRecorderRef$cur2","_mediaRecorderRef$cur3","stop","stream","getTracks","forEach","track","clearInterval","err","console","error","floatTo16BitPCM","float32Array","buffer","Int16Array","length","i","s","Math","max","min","averageChannels","audioBuffer","numChannels","numberOfChannels","avgData","Float32Array","c","channel","getChannelData","createWavHeader","sampleRate","bitsPerSample","byteRate","blockAlign","subChunk2Size","chunkSize","ArrayBuffer","view","DataView","writeString","offset","string","setUint8","charCodeAt","setUint32","setUint16","startRecording","navigator","mediaDevices","getUserMedia","audio","mediaRecorder","MediaRecorder","ondataavailable","e","data","size","push","onstop","blob","Blob","type","rawUrl","URL","createObjectURL","rawDownload","document","createElement","href","download","click","revokeObjectURL","arrayBuffer","audioContext","decodeAudioData","monoData","wavBuffer","encode","channelData","wavBlob","wavUrl","downloadLink","processRecording","webmBlob","start","startCountdown","setInterval","prev","stopRecording","_mediaRecorderRef$cur4","response","username","success","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","Array","map","_","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/-IdentiVoice/frontend/src/components/VoiceRecorder.js"],"sourcesContent":["    // Modified VoiceRecorder.js with proper WAV encoding and cleanup handling\r\n    import React, { useState, useEffect, useRef } from 'react';\r\n    import { registerVoice, loginVoice } from '../utils/api';\r\n    import WavEncoder from 'wav-encoder';\r\n\r\n    const VoiceRecorder = ({ mode, userData, handleStatus }) => {\r\n        const [isRecording, setIsRecording] = useState(false);\r\n        const [countdown, setCountdown] = useState(10);\r\n        const [audioBlob, setAudioBlob] = useState(null);\r\n        const [passphrase, setPassphrase] = useState('');\r\n        const [rawBlob, setRawBlob] = useState(null); \r\n        const mediaRecorderRef = useRef(null);\r\n        const audioContextRef = useRef(null);\r\n        const audioChunksRef = useRef([]);\r\n        const countdownRef = useRef(null);\r\n\r\n        useEffect(() => {\r\n            return () => {\r\n                cleanupRecording();\r\n            };\r\n        }, []);\r\n\r\n        const initAudioContext = () => {\r\n            if (!audioContextRef.current || audioContextRef.current.state === 'closed') {\r\n                audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\r\n            }\r\n            return audioContextRef.current;\r\n        };\r\n\r\n        const cleanupRecording = () => {\r\n            try {\r\n                if (mediaRecorderRef.current?.state === 'recording') {\r\n                    mediaRecorderRef.current.stop();\r\n                }\r\n                mediaRecorderRef.current?.stream?.getTracks().forEach(track => track.stop());\r\n                if (countdownRef.current) clearInterval(countdownRef.current);\r\n\r\n                mediaRecorderRef.current = null;\r\n                audioChunksRef.current = [];\r\n                setIsRecording(false);\r\n                setCountdown(10);\r\n            } catch (err) {\r\n                console.error('Error in cleanup:', err);\r\n            }\r\n        };\r\n\r\n        const floatTo16BitPCM = (float32Array) => {\r\n            const buffer = new Int16Array(float32Array.length);\r\n            for (let i = 0; i < float32Array.length; i++) {\r\n                const s = Math.max(-1, Math.min(1, float32Array[i]));\r\n                buffer[i] = s < 0 ? s * 0x8000 : s * 0x7FFF;\r\n            }\r\n            return buffer;\r\n        };\r\n\r\n        const averageChannels = (audioBuffer) => {\r\n            const numChannels = audioBuffer.numberOfChannels;\r\n            const length = audioBuffer.length;\r\n            const avgData = new Float32Array(length);\r\n            for (let c = 0; c < numChannels; c++) {\r\n                const channel = audioBuffer.getChannelData(c);\r\n                for (let i = 0; i < length; i++) {\r\n                    avgData[i] += channel[i] / numChannels;\r\n                }\r\n            }\r\n            return avgData;\r\n        };\r\n\r\n        const createWavHeader = (length, sampleRate = 16000, numChannels = 1, bitsPerSample = 16) => {\r\n            const byteRate = sampleRate * numChannels * bitsPerSample / 8;\r\n            const blockAlign = numChannels * bitsPerSample / 8;\r\n            const subChunk2Size = length * numChannels * bitsPerSample / 8;\r\n            const chunkSize = 36 + subChunk2Size;\r\n\r\n            const buffer = new ArrayBuffer(44);\r\n            const view = new DataView(buffer);\r\n\r\n            const writeString = (view, offset, string) => {\r\n                for (let i = 0; i < string.length; i++) {\r\n                    view.setUint8(offset + i, string.charCodeAt(i));\r\n                }\r\n            };\r\n\r\n            writeString(view, 0, 'RIFF');\r\n            view.setUint32(4, chunkSize, true);\r\n            writeString(view, 8, 'WAVE');\r\n            writeString(view, 12, 'fmt ');\r\n            view.setUint32(16, 16, true);\r\n            view.setUint16(20, 1, true);\r\n            view.setUint16(22, numChannels, true);\r\n            view.setUint32(24, sampleRate, true);\r\n            view.setUint32(28, byteRate, true);\r\n            view.setUint16(32, blockAlign, true);\r\n            view.setUint16(34, bitsPerSample, true);\r\n            writeString(view, 36, 'data');\r\n            view.setUint32(40, subChunk2Size, true);\r\n\r\n            return buffer;\r\n        };\r\n\r\n        const startRecording = async () => {\r\n            try {\r\n                cleanupRecording();\r\n                const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n\r\n                const mediaRecorder = new MediaRecorder(stream);\r\n                mediaRecorderRef.current = mediaRecorder;\r\n                audioChunksRef.current = [];\r\n\r\n                mediaRecorder.ondataavailable = e => {\r\n                    if (e.data.size > 0) audioChunksRef.current.push(e.data);\r\n                };\r\n\r\n                mediaRecorder.onstop = async () => {\r\n                    try {\r\n                        const blob = new Blob(audioChunksRef.current, { type: 'audio/webm' });\r\n                        setRawBlob(blob);\r\n\r\n                        // Optional: Save raw WebM for debug\r\n                        const rawUrl = URL.createObjectURL(blob);\r\n                        const rawDownload = document.createElement('a');\r\n                        rawDownload.href = rawUrl;\r\n                        rawDownload.download = 'raw_recording.webm';\r\n                        rawDownload.click();\r\n                        URL.revokeObjectURL(rawUrl);\r\n\r\n                        const arrayBuffer = await blob.arrayBuffer();\r\n                        const audioContext = initAudioContext();\r\n                        const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\r\n\r\n                        // Convert to mono Float32Array\r\n                        const monoData = audioBuffer.numberOfChannels > 1\r\n                            ? averageChannels(audioBuffer)\r\n                            : audioBuffer.getChannelData(0);\r\n\r\n                        // Encode using wav-encoder\r\n                        const wavBuffer = await WavEncoder.encode({\r\n                            sampleRate: 16000, // match what your backend expects\r\n                            channelData: [monoData]\r\n                        });\r\n\r\n                        const wavBlob = new Blob([wavBuffer], { type: 'audio/wav' });\r\n                        setAudioBlob(wavBlob);\r\n\r\n                        // Optional: Download the WAV file\r\n                        const wavUrl = URL.createObjectURL(wavBlob);\r\n                        const downloadLink = document.createElement('a');\r\n                        downloadLink.href = wavUrl;\r\n                        downloadLink.download = 'debug_recording.wav';\r\n                        downloadLink.click();\r\n                        URL.revokeObjectURL(wavUrl);\r\n\r\n                        await processRecording(wavBlob,webmBlob);\r\n                    } catch (error) {\r\n                        console.error('Error creating WAV:', error);\r\n                        handleStatus('Error converting recording to WAV format.', 'error');\r\n                    } finally {\r\n                        cleanupRecording();\r\n                    }\r\n                };\r\n\r\n\r\n                mediaRecorder.start(100);\r\n                setIsRecording(true);\r\n                startCountdown();\r\n\r\n            } catch (err) {\r\n                console.error('Error starting recording:', err);\r\n                handleStatus('Failed to start recording. Check mic permissions.', 'error');\r\n                cleanupRecording();\r\n            }\r\n        };\r\n\r\n        const startCountdown = () => {\r\n            setCountdown(10);\r\n            countdownRef.current = setInterval(() => {\r\n                setCountdown(prev => {\r\n                    if (prev <= 1) {\r\n                        clearInterval(countdownRef.current);\r\n                        stopRecording();\r\n                        return 0;\r\n                    }\r\n                    return prev - 1;\r\n                });\r\n            }, 1000);\r\n        };\r\n\r\n        const stopRecording = () => {\r\n            try {\r\n                if (mediaRecorderRef.current?.state === 'recording') {\r\n                    mediaRecorderRef.current.stop();\r\n                }\r\n            } catch (err) {\r\n                console.error('Error stopping recording:', err);\r\n                handleStatus('Error stopping recording. Try again.', 'error');\r\n                cleanupRecording();\r\n            }\r\n        };\r\n\r\n        const processRecording = async (wavBlob, webmBlob) => {\r\n        try {\r\n            const response = mode === 'register'\r\n                ? await registerVoice(wavBlob, webmBlob, userData)\r\n                : await loginVoice(wavBlob, userData.username);\r\n\r\n            if (response.success) {\r\n                setPassphrase(response.passphrase || '');\r\n                handleStatus(response.message, 'success');\r\n            } else {\r\n                handleStatus(response.message, 'error');\r\n            }\r\n        } catch (err) {\r\n            console.error('Error processing recording:', err);\r\n            handleStatus(err.message || 'Failed to process recording.', 'error');\r\n        }\r\n    };\r\n\r\n        return (\r\n            <div className=\"panel\">\r\n                <div className=\"panel-title\">\r\n                    <i className=\"fas fa-microphone\"></i>\r\n                    <h2>{mode === 'register' ? 'Voice Registration' : 'Voice Authentication'}</h2>\r\n                </div>\r\n\r\n                <div className=\"buttons\">\r\n                    <button className={`btn btn-primary ${isRecording ? 'disabled' : ''}`} onClick={startRecording} disabled={isRecording}>\r\n                        <i className=\"fas fa-microphone\"></i>\r\n                        {mode === 'register' ? 'Record Passphrase' : 'Verify Identity'}\r\n                    </button>\r\n                    {isRecording && (\r\n                        <button className=\"btn btn-danger\" onClick={stopRecording}>\r\n                            <i className=\"fas fa-stop\"></i> Stop Recording\r\n                        </button>\r\n                    )}\r\n                </div>\r\n\r\n                {isRecording && (\r\n                    <>\r\n                        <div className=\"recording-indicator\">\r\n                            <div className=\"pulse\"></div>\r\n                            <div>Recording your voice... Please speak now</div>\r\n                        </div>\r\n                        <div className=\"timer\">{countdown}</div>\r\n                        <div className=\"voice-wave\">\r\n                            {[...Array(8)].map((_, i) => <div key={i} className=\"wave-bar\"></div>)}\r\n                        </div>\r\n                    </>\r\n                )}\r\n\r\n                {passphrase && (\r\n                    <div className=\"result-box\">\r\n                        <div className=\"result-text\">\r\n                            Your {mode === 'register' ? 'registered' : 'recognized'} passphrase:\r\n                            <span> \"{passphrase}\"</span>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    export default VoiceRecorder;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}