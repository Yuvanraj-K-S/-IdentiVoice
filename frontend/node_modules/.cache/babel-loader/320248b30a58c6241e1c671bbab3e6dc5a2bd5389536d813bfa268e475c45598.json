{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\-IdentiVoice\\\\frontend\\\\src\\\\components\\\\VoiceRecorder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { registerVoice, loginVoice } from '../utils/api';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst VoiceRecorder = ({\n  mode,\n  userData,\n  handleStatus\n}) => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [countdown, setCountdown] = useState(10);\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [passphrase, setPassphrase] = useState('');\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const countdownRef = useRef(null);\n  const getSupportedMimeType = () => {\n    const types = ['audio/webm;codecs=opus', 'audio/ogg;codecs=opus', 'audio/mp4'];\n    return types.find(type => MediaRecorder.isTypeSupported(type)) || '';\n  };\n  useEffect(() => {\n    return () => {\n      cleanupRecording();\n    };\n  }, []);\n  const cleanupRecording = () => {\n    try {\n      var _mediaRecorderRef$cur;\n      if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n        mediaRecorderRef.current.stop();\n      }\n      if ((_mediaRecorderRef$cur = mediaRecorderRef.current) !== null && _mediaRecorderRef$cur !== void 0 && _mediaRecorderRef$cur.stream) {\n        mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());\n      }\n      if (countdownRef.current) {\n        clearInterval(countdownRef.current);\n      }\n      mediaRecorderRef.current = null;\n      audioChunksRef.current = [];\n      setIsRecording(false);\n      setCountdown(10);\n    } catch (err) {\n      console.error('Error in cleanup:', err);\n    }\n  };\n  const startRecording = async () => {\n    try {\n      cleanupRecording();\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          channelCount: 1,\n          sampleRate: 16000,\n          sampleSize: 16,\n          volume: 1.0\n        }\n      });\n      const mimeType = getSupportedMimeType();\n      if (!mimeType) {\n        handleStatus('No supported audio format found for recording.', 'error');\n        return;\n      }\n      const mediaRecorder = new MediaRecorder(stream, {\n        mimeType,\n        audioBitsPerSecond: 16000\n      });\n      mediaRecorderRef.current = mediaRecorder;\n      audioChunksRef.current = [];\n      mediaRecorder.ondataavailable = e => {\n        if (e.data && e.data.size > 0) {\n          audioChunksRef.current.push(e.data);\n        }\n      };\n      mediaRecorder.onerror = event => {\n        console.error('Recording error:', event.error);\n        handleStatus('Error during recording. Please try again.', 'error');\n        cleanupRecording();\n      };\n      mediaRecorder.onstop = async () => {\n        try {\n          const recordedBlob = new Blob(audioChunksRef.current, {\n            type: mediaRecorder.mimeType\n          });\n          const arrayBuffer = await recordedBlob.arrayBuffer();\n          const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n          const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n          const numChannels = audioBuffer.numberOfChannels;\n          const sampleRate = 16000;\n\n          // Downmix to mono\n          const monoData = new Float32Array(audioBuffer.length);\n          for (let i = 0; i < audioBuffer.length; i++) {\n            let sum = 0;\n            for (let ch = 0; ch < numChannels; ch++) {\n              sum += audioBuffer.getChannelData(ch)[i];\n            }\n            monoData[i] = sum / numChannels;\n          }\n\n          // Convert to 16-bit PCM\n          const pcm16 = new Int16Array(monoData.length);\n          for (let i = 0; i < monoData.length; i++) {\n            const s = Math.max(-1, Math.min(1, monoData[i]));\n            pcm16[i] = s < 0 ? s * 0x8000 : s * 0x7FFF;\n          }\n\n          // Create WAV header\n          const byteRate = sampleRate * 1 * 2;\n          const blockAlign = 1 * 2;\n          const buffer = new ArrayBuffer(44);\n          const view = new DataView(buffer);\n          const writeString = (view, offset, str) => {\n            for (let i = 0; i < str.length; i++) {\n              view.setUint8(offset + i, str.charCodeAt(i));\n            }\n          };\n          writeString(view, 0, 'RIFF');\n          view.setUint32(4, 36 + pcm16.length * 2, true);\n          writeString(view, 8, 'WAVE');\n          writeString(view, 12, 'fmt ');\n          view.setUint32(16, 16, true);\n          view.setUint16(20, 1, true); // PCM\n          view.setUint16(22, 1, true); // Mono\n          view.setUint32(24, sampleRate, true);\n          view.setUint32(28, byteRate, true);\n          view.setUint16(32, blockAlign, true);\n          view.setUint16(34, 16, true);\n          writeString(view, 36, 'data');\n          view.setUint32(40, pcm16.length * 2, true);\n          const wavBytes = new Uint8Array(44 + pcm16.length * 2);\n          wavBytes.set(new Uint8Array(buffer), 0);\n          wavBytes.set(new Uint8Array(pcm16.buffer), 44);\n          const wavBlob = new Blob([wavBytes], {\n            type: 'audio/wav'\n          });\n          setAudioBlob(wavBlob);\n          await processRecording(wavBlob);\n        } catch (err) {\n          console.error('Error creating WAV:', err);\n          handleStatus('Error converting recording to WAV format.', 'error');\n          cleanupRecording();\n        }\n      };\n      mediaRecorder.start(100);\n      setIsRecording(true);\n      startCountdown();\n    } catch (err) {\n      console.error('Error starting recording:', err);\n      handleStatus('Failed to start recording. Please check microphone permissions.', 'error');\n      cleanupRecording();\n    }\n  };\n  const startCountdown = () => {\n    setCountdown(10);\n    countdownRef.current = setInterval(() => {\n      setCountdown(prev => {\n        if (prev <= 1) {\n          clearInterval(countdownRef.current);\n          stopRecording();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n  const stopRecording = () => {\n    try {\n      if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n        mediaRecorderRef.current.stop();\n      } else {\n        cleanupRecording();\n      }\n    } catch (err) {\n      console.error('Error stopping recording:', err);\n      handleStatus('Error stopping recording. Please try again.', 'error');\n      cleanupRecording();\n    }\n  };\n  const processRecording = async blob => {\n    try {\n      let response;\n      if (mode === 'register') {\n        response = await registerVoice(blob, userData);\n      } else {\n        response = await loginVoice(blob, userData.username);\n      }\n      if (response.success) {\n        setPassphrase(response.passphrase || '');\n        handleStatus(response.message, 'success');\n      } else {\n        handleStatus(response.message, 'error');\n      }\n    } catch (err) {\n      console.error('Error processing recording:', err);\n      handleStatus('Failed to process recording. Please try again.', 'error');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel-title\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-microphone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: mode === 'register' ? 'Voice Registration' : 'Voice Authentication'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `btn btn-primary ${isRecording ? 'disabled' : ''}`,\n        onClick: startRecording,\n        disabled: isRecording,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-microphone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 21\n        }, this), mode === 'register' ? 'Record Passphrase' : 'Verify Identity']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }, this), isRecording && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-danger\",\n        onClick: stopRecording,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 25\n        }, this), \" Stop Recording\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }, this), isRecording && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recording-indicator\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pulse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Recording your voice... Please speak now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: countdown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"voice-wave\",\n        children: [...Array(8)].map((_, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wave-bar\"\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), passphrase && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-box\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-text\",\n        children: [\"Your \", mode === 'register' ? 'registered' : 'recognized', \" passphrase:\", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\" \\\"\", passphrase, \"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 9\n  }, this);\n};\n_s(VoiceRecorder, \"qG2QUNgwD7BrCv8Y2/BNeRmjsOk=\");\n_c = VoiceRecorder;\nexport default VoiceRecorder;\nvar _c;\n$RefreshReg$(_c, \"VoiceRecorder\");","map":{"version":3,"names":["React","useState","useEffect","useRef","registerVoice","loginVoice","jsxDEV","_jsxDEV","Fragment","_Fragment","VoiceRecorder","mode","userData","handleStatus","_s","isRecording","setIsRecording","countdown","setCountdown","audioBlob","setAudioBlob","passphrase","setPassphrase","mediaRecorderRef","audioChunksRef","countdownRef","getSupportedMimeType","types","find","type","MediaRecorder","isTypeSupported","cleanupRecording","_mediaRecorderRef$cur","current","state","stop","stream","getTracks","forEach","track","clearInterval","err","console","error","startRecording","navigator","mediaDevices","getUserMedia","audio","channelCount","sampleRate","sampleSize","volume","mimeType","mediaRecorder","audioBitsPerSecond","ondataavailable","e","data","size","push","onerror","event","onstop","recordedBlob","Blob","arrayBuffer","audioContext","window","AudioContext","webkitAudioContext","audioBuffer","decodeAudioData","numChannels","numberOfChannels","monoData","Float32Array","length","i","sum","ch","getChannelData","pcm16","Int16Array","s","Math","max","min","byteRate","blockAlign","buffer","ArrayBuffer","view","DataView","writeString","offset","str","setUint8","charCodeAt","setUint32","setUint16","wavBytes","Uint8Array","set","wavBlob","processRecording","start","startCountdown","setInterval","prev","stopRecording","blob","response","username","success","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","Array","map","_","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/-IdentiVoice/frontend/src/components/VoiceRecorder.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { registerVoice, loginVoice } from '../utils/api';\r\n\r\nconst VoiceRecorder = ({ mode, userData, handleStatus }) => {\r\n    const [isRecording, setIsRecording] = useState(false);\r\n    const [countdown, setCountdown] = useState(10);\r\n    const [audioBlob, setAudioBlob] = useState(null);\r\n    const [passphrase, setPassphrase] = useState('');\r\n    const mediaRecorderRef = useRef(null);\r\n    const audioChunksRef = useRef([]);\r\n    const countdownRef = useRef(null);\r\n\r\n    const getSupportedMimeType = () => {\r\n        const types = [\r\n            'audio/webm;codecs=opus',\r\n            'audio/ogg;codecs=opus',\r\n            'audio/mp4'\r\n        ];\r\n        return types.find(type => MediaRecorder.isTypeSupported(type)) || '';\r\n    };\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            cleanupRecording();\r\n        };\r\n    }, []);\r\n\r\n    const cleanupRecording = () => {\r\n        try {\r\n            if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\r\n                mediaRecorderRef.current.stop();\r\n            }\r\n            if (mediaRecorderRef.current?.stream) {\r\n                mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());\r\n            }\r\n            if (countdownRef.current) {\r\n                clearInterval(countdownRef.current);\r\n            }\r\n            mediaRecorderRef.current = null;\r\n            audioChunksRef.current = [];\r\n            setIsRecording(false);\r\n            setCountdown(10);\r\n        } catch (err) {\r\n            console.error('Error in cleanup:', err);\r\n        }\r\n    };\r\n\r\n    const startRecording = async () => {\r\n        try {\r\n            cleanupRecording();\r\n\r\n            const stream = await navigator.mediaDevices.getUserMedia({\r\n                audio: {\r\n                    channelCount: 1,\r\n                    sampleRate: 16000,\r\n                    sampleSize: 16,\r\n                    volume: 1.0\r\n                }\r\n            });\r\n\r\n            const mimeType = getSupportedMimeType();\r\n            if (!mimeType) {\r\n                handleStatus('No supported audio format found for recording.', 'error');\r\n                return;\r\n            }\r\n\r\n            const mediaRecorder = new MediaRecorder(stream, {\r\n                mimeType,\r\n                audioBitsPerSecond: 16000\r\n            });\r\n\r\n            mediaRecorderRef.current = mediaRecorder;\r\n            audioChunksRef.current = [];\r\n\r\n            mediaRecorder.ondataavailable = (e) => {\r\n                if (e.data && e.data.size > 0) {\r\n                    audioChunksRef.current.push(e.data);\r\n                }\r\n            };\r\n\r\n            mediaRecorder.onerror = (event) => {\r\n                console.error('Recording error:', event.error);\r\n                handleStatus('Error during recording. Please try again.', 'error');\r\n                cleanupRecording();\r\n            };\r\n\r\n            mediaRecorder.onstop = async () => {\r\n                try {\r\n                    const recordedBlob = new Blob(audioChunksRef.current, {\r\n                        type: mediaRecorder.mimeType\r\n                    });\r\n\r\n                    const arrayBuffer = await recordedBlob.arrayBuffer();\r\n                    const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n                    const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\r\n\r\n                    const numChannels = audioBuffer.numberOfChannels;\r\n                    const sampleRate = 16000;\r\n\r\n                    // Downmix to mono\r\n                    const monoData = new Float32Array(audioBuffer.length);\r\n                    for (let i = 0; i < audioBuffer.length; i++) {\r\n                        let sum = 0;\r\n                        for (let ch = 0; ch < numChannels; ch++) {\r\n                            sum += audioBuffer.getChannelData(ch)[i];\r\n                        }\r\n                        monoData[i] = sum / numChannels;\r\n                    }\r\n\r\n                    // Convert to 16-bit PCM\r\n                    const pcm16 = new Int16Array(monoData.length);\r\n                    for (let i = 0; i < monoData.length; i++) {\r\n                        const s = Math.max(-1, Math.min(1, monoData[i]));\r\n                        pcm16[i] = s < 0 ? s * 0x8000 : s * 0x7FFF;\r\n                    }\r\n\r\n                    // Create WAV header\r\n                    const byteRate = sampleRate * 1 * 2;\r\n                    const blockAlign = 1 * 2;\r\n                    const buffer = new ArrayBuffer(44);\r\n                    const view = new DataView(buffer);\r\n\r\n                    const writeString = (view, offset, str) => {\r\n                        for (let i = 0; i < str.length; i++) {\r\n                            view.setUint8(offset + i, str.charCodeAt(i));\r\n                        }\r\n                    };\r\n\r\n                    writeString(view, 0, 'RIFF');\r\n                    view.setUint32(4, 36 + pcm16.length * 2, true);\r\n                    writeString(view, 8, 'WAVE');\r\n                    writeString(view, 12, 'fmt ');\r\n                    view.setUint32(16, 16, true);\r\n                    view.setUint16(20, 1, true);  // PCM\r\n                    view.setUint16(22, 1, true);  // Mono\r\n                    view.setUint32(24, sampleRate, true);\r\n                    view.setUint32(28, byteRate, true);\r\n                    view.setUint16(32, blockAlign, true);\r\n                    view.setUint16(34, 16, true);\r\n                    writeString(view, 36, 'data');\r\n                    view.setUint32(40, pcm16.length * 2, true);\r\n\r\n                    const wavBytes = new Uint8Array(44 + pcm16.length * 2);\r\n                    wavBytes.set(new Uint8Array(buffer), 0);\r\n                    wavBytes.set(new Uint8Array(pcm16.buffer), 44);\r\n\r\n                    const wavBlob = new Blob([wavBytes], { type: 'audio/wav' });\r\n\r\n                    setAudioBlob(wavBlob);\r\n                    await processRecording(wavBlob);\r\n\r\n                } catch (err) {\r\n                    console.error('Error creating WAV:', err);\r\n                    handleStatus('Error converting recording to WAV format.', 'error');\r\n                    cleanupRecording();\r\n                }\r\n            };\r\n\r\n            mediaRecorder.start(100);\r\n            setIsRecording(true);\r\n            startCountdown();\r\n        } catch (err) {\r\n            console.error('Error starting recording:', err);\r\n            handleStatus('Failed to start recording. Please check microphone permissions.', 'error');\r\n            cleanupRecording();\r\n        }\r\n    };\r\n\r\n    const startCountdown = () => {\r\n        setCountdown(10);\r\n        countdownRef.current = setInterval(() => {\r\n            setCountdown(prev => {\r\n                if (prev <= 1) {\r\n                    clearInterval(countdownRef.current);\r\n                    stopRecording();\r\n                    return 0;\r\n                }\r\n                return prev - 1;\r\n            });\r\n        }, 1000);\r\n    };\r\n\r\n    const stopRecording = () => {\r\n        try {\r\n            if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\r\n                mediaRecorderRef.current.stop();\r\n            } else {\r\n                cleanupRecording();\r\n            }\r\n        } catch (err) {\r\n            console.error('Error stopping recording:', err);\r\n            handleStatus('Error stopping recording. Please try again.', 'error');\r\n            cleanupRecording();\r\n        }\r\n    };\r\n\r\n    const processRecording = async (blob) => {\r\n        try {\r\n            let response;\r\n            if (mode === 'register') {\r\n                response = await registerVoice(blob, userData);\r\n            } else {\r\n                response = await loginVoice(blob, userData.username);\r\n            }\r\n\r\n            if (response.success) {\r\n                setPassphrase(response.passphrase || '');\r\n                handleStatus(response.message, 'success');\r\n            } else {\r\n                handleStatus(response.message, 'error');\r\n            }\r\n        } catch (err) {\r\n            console.error('Error processing recording:', err);\r\n            handleStatus('Failed to process recording. Please try again.', 'error');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"panel\">\r\n            <div className=\"panel-title\">\r\n                <i className=\"fas fa-microphone\"></i>\r\n                <h2>{mode === 'register' ? 'Voice Registration' : 'Voice Authentication'}</h2>\r\n            </div>\r\n\r\n            <div className=\"buttons\">\r\n                <button\r\n                    className={`btn btn-primary ${isRecording ? 'disabled' : ''}`}\r\n                    onClick={startRecording}\r\n                    disabled={isRecording}\r\n                >\r\n                    <i className=\"fas fa-microphone\"></i>\r\n                    {mode === 'register' ? 'Record Passphrase' : 'Verify Identity'}\r\n                </button>\r\n                {isRecording && (\r\n                    <button className=\"btn btn-danger\" onClick={stopRecording}>\r\n                        <i className=\"fas fa-stop\"></i> Stop Recording\r\n                    </button>\r\n                )}\r\n            </div>\r\n\r\n            {isRecording && (\r\n                <>\r\n                    <div className=\"recording-indicator\">\r\n                        <div className=\"pulse\"></div>\r\n                        <div>Recording your voice... Please speak now</div>\r\n                    </div>\r\n                    <div className=\"timer\">{countdown}</div>\r\n                    <div className=\"voice-wave\">\r\n                        {[...Array(8)].map((_, i) => (\r\n                            <div key={i} className=\"wave-bar\"></div>\r\n                        ))}\r\n                    </div>\r\n                </>\r\n            )}\r\n\r\n            {passphrase && (\r\n                <div className=\"result-box\">\r\n                    <div className=\"result-text\">\r\n                        Your {mode === 'register' ? 'registered' : 'recognized'} passphrase:\r\n                        <span> \"{passphrase}\"</span>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VoiceRecorder;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}