{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\-IdentiVoice\\\\frontend\\\\src\\\\components\\\\VoiceRecorder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { registerVoice, loginVoice } from '../utils/api';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst VoiceRecorder = ({\n  mode,\n  userData,\n  handleStatus\n}) => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [countdown, setCountdown] = useState(10);\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [passphrase, setPassphrase] = useState('');\n  const mediaRecorderRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const countdownRef = useRef(null);\n  const getSupportedMimeType = () => {\n    const types = ['audio/wav', 'audio/webm;codecs=opus', 'audio/ogg', 'audio/mp4'];\n    return types.find(type => MediaRecorder.isTypeSupported(type)) || '';\n  };\n  const initAudioContext = () => {\n    if (!audioContextRef.current || audioContextRef.current.state === 'closed') {\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)({\n        sampleRate: 16000\n      });\n    }\n    return audioContextRef.current;\n  };\n  useEffect(() => {\n    return () => {\n      cleanupRecording();\n    };\n  }, []);\n  const cleanupRecording = () => {\n    try {\n      var _mediaRecorderRef$cur;\n      if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n        mediaRecorderRef.current.stop();\n      }\n      if ((_mediaRecorderRef$cur = mediaRecorderRef.current) !== null && _mediaRecorderRef$cur !== void 0 && _mediaRecorderRef$cur.stream) {\n        mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());\n      }\n      if (countdownRef.current) {\n        clearInterval(countdownRef.current);\n      }\n      mediaRecorderRef.current = null;\n      audioChunksRef.current = [];\n      setIsRecording(false);\n      setCountdown(10);\n    } catch (err) {\n      console.error('Error in cleanup:', err);\n    }\n  };\n  const createSimpleWavFromBlob = async blob => {\n    const arrayBuffer = await blob.arrayBuffer();\n    const audioData = new Uint8Array(arrayBuffer);\n    const wavHeader = createWavHeader(audioData.length);\n    const fullBuffer = new Uint8Array(wavHeader.byteLength + audioData.byteLength);\n    fullBuffer.set(new Uint8Array(wavHeader), 0);\n    fullBuffer.set(audioData, wavHeader.byteLength);\n    return new Blob([fullBuffer], {\n      type: 'audio/wav'\n    });\n  };\n  const createWavHeader = (totalSamples, sampleRate = 16000, numChannels = 1, bitsPerSample = 16) => {\n    const byteRate = sampleRate * numChannels * (bitsPerSample / 8);\n    const blockAlign = numChannels * (bitsPerSample / 8);\n    const subChunk2Size = totalSamples;\n    const chunkSize = 36 + subChunk2Size;\n    const buffer = new ArrayBuffer(44);\n    const view = new DataView(buffer);\n    writeString(view, 0, 'RIFF');\n    view.setUint32(4, chunkSize, true);\n    writeString(view, 8, 'WAVE');\n    writeString(view, 12, 'fmt ');\n    view.setUint32(16, 16, true);\n    view.setUint16(20, 1, true);\n    view.setUint16(22, numChannels, true);\n    view.setUint32(24, sampleRate, true);\n    view.setUint32(28, byteRate, true);\n    view.setUint16(32, blockAlign, true);\n    view.setUint16(34, bitsPerSample, true);\n    writeString(view, 36, 'data');\n    view.setUint32(40, subChunk2Size, true);\n    return buffer;\n  };\n  const writeString = (view, offset, string) => {\n    for (let i = 0; i < string.length; i++) {\n      view.setUint8(offset + i, string.charCodeAt(i));\n    }\n  };\n  const startRecording = async () => {\n    try {\n      cleanupRecording();\n      const audioContext = initAudioContext();\n      if (audioContext.state === 'suspended') {\n        await audioContext.resume();\n      }\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          channelCount: 1,\n          sampleRate: 16000,\n          sampleSize: 16,\n          volume: 1.0\n        }\n      });\n      const mimeType = getSupportedMimeType();\n      if (!mimeType) {\n        handleStatus('No supported audio format found for recording.', 'error');\n        return;\n      }\n      const mediaRecorder = new MediaRecorder(stream, {\n        mimeType: mimeType,\n        audioBitsPerSecond: 16000\n      });\n      mediaRecorderRef.current = mediaRecorder;\n      audioChunksRef.current = [];\n      mediaRecorder.ondataavailable = e => {\n        if (e.data && e.data.size > 0) {\n          audioChunksRef.current.push(e.data);\n        }\n      };\n      mediaRecorder.onerror = event => {\n        console.error('Recording error:', event.error);\n        handleStatus('Error during recording. Please try again.', 'error');\n        cleanupRecording();\n      };\n      mediaRecorder.onstop = async () => {\n        try {\n          const recordedBlob = new Blob(audioChunksRef.current, {\n            type: mediaRecorder.mimeType\n          });\n          const wavBlob = await createSimpleWavFromBlob(recordedBlob);\n          setAudioBlob(wavBlob);\n          await processRecording(wavBlob);\n        } catch (error) {\n          console.error('Error creating WAV:', error);\n          handleStatus('Error converting recording to WAV format.', 'error');\n          cleanupRecording();\n        }\n      };\n      mediaRecorder.start(100);\n      setIsRecording(true);\n      startCountdown();\n    } catch (err) {\n      console.error('Error starting recording:', err);\n      handleStatus('Failed to start recording. Please check microphone permissions.', 'error');\n      cleanupRecording();\n    }\n  };\n  const startCountdown = () => {\n    setCountdown(10);\n    countdownRef.current = setInterval(() => {\n      setCountdown(prev => {\n        if (prev <= 1) {\n          clearInterval(countdownRef.current);\n          stopRecording();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n  const stopRecording = () => {\n    try {\n      if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n        mediaRecorderRef.current.stop();\n      } else {\n        cleanupRecording();\n      }\n    } catch (err) {\n      console.error('Error stopping recording:', err);\n      handleStatus('Error stopping recording. Please try again.', 'error');\n      cleanupRecording();\n    }\n  };\n  const processRecording = async blob => {\n    try {\n      let response;\n      if (mode === 'register') {\n        response = await registerVoice(blob, userData);\n      } else {\n        response = await loginVoice(blob, userData.username);\n      }\n      if (response.success) {\n        setPassphrase(response.passphrase || '');\n        handleStatus(response.message, 'success');\n      } else {\n        handleStatus(response.message, 'error');\n      }\n    } catch (err) {\n      console.error('Error processing recording:', err);\n      handleStatus('Failed to process recording. Please try again.', 'error');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel-title\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-microphone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: mode === 'register' ? 'Voice Registration' : 'Voice Authentication'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `btn btn-primary ${isRecording ? 'disabled' : ''}`,\n        onClick: startRecording,\n        disabled: isRecording,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-microphone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 21\n        }, this), mode === 'register' ? 'Record Passphrase' : 'Verify Identity']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }, this), isRecording && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-danger\",\n        onClick: stopRecording,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 25\n        }, this), \" Stop Recording\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 13\n    }, this), isRecording && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recording-indicator\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pulse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Recording your voice... Please speak now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: countdown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"voice-wave\",\n        children: [...Array(8)].map((_, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wave-bar\"\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), passphrase && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-box\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-text\",\n        children: [\"Your \", mode === 'register' ? 'registered' : 'recognized', \" passphrase:\", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\" \\\"\", passphrase, \"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 9\n  }, this);\n};\n_s(VoiceRecorder, \"VzV+byMWjrxh1x6R9aUbxmqSb+U=\");\n_c = VoiceRecorder;\nexport default VoiceRecorder;\nvar _c;\n$RefreshReg$(_c, \"VoiceRecorder\");","map":{"version":3,"names":["React","useState","useEffect","useRef","registerVoice","loginVoice","jsxDEV","_jsxDEV","Fragment","_Fragment","VoiceRecorder","mode","userData","handleStatus","_s","isRecording","setIsRecording","countdown","setCountdown","audioBlob","setAudioBlob","passphrase","setPassphrase","mediaRecorderRef","audioContextRef","audioChunksRef","countdownRef","getSupportedMimeType","types","find","type","MediaRecorder","isTypeSupported","initAudioContext","current","state","window","AudioContext","webkitAudioContext","sampleRate","cleanupRecording","_mediaRecorderRef$cur","stop","stream","getTracks","forEach","track","clearInterval","err","console","error","createSimpleWavFromBlob","blob","arrayBuffer","audioData","Uint8Array","wavHeader","createWavHeader","length","fullBuffer","byteLength","set","Blob","totalSamples","numChannels","bitsPerSample","byteRate","blockAlign","subChunk2Size","chunkSize","buffer","ArrayBuffer","view","DataView","writeString","setUint32","setUint16","offset","string","i","setUint8","charCodeAt","startRecording","audioContext","resume","navigator","mediaDevices","getUserMedia","audio","channelCount","sampleSize","volume","mimeType","mediaRecorder","audioBitsPerSecond","ondataavailable","e","data","size","push","onerror","event","onstop","recordedBlob","wavBlob","processRecording","start","startCountdown","setInterval","prev","stopRecording","response","username","success","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","Array","map","_","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/-IdentiVoice/frontend/src/components/VoiceRecorder.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { registerVoice, loginVoice } from '../utils/api';\r\n\r\nconst VoiceRecorder = ({ mode, userData, handleStatus }) => {\r\n    const [isRecording, setIsRecording] = useState(false);\r\n    const [countdown, setCountdown] = useState(10);\r\n    const [audioBlob, setAudioBlob] = useState(null);\r\n    const [passphrase, setPassphrase] = useState('');\r\n    const mediaRecorderRef = useRef(null);\r\n    const audioContextRef = useRef(null);\r\n    const audioChunksRef = useRef([]);\r\n    const countdownRef = useRef(null);\r\n\r\n    const getSupportedMimeType = () => {\r\n        const types = [\r\n            'audio/wav',\r\n            'audio/webm;codecs=opus',\r\n            'audio/ogg',\r\n            'audio/mp4'\r\n        ];\r\n        return types.find(type => MediaRecorder.isTypeSupported(type)) || '';\r\n    };\r\n\r\n    const initAudioContext = () => {\r\n        if (!audioContextRef.current || audioContextRef.current.state === 'closed') {\r\n            audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)({\r\n                sampleRate: 16000\r\n            });\r\n        }\r\n        return audioContextRef.current;\r\n    };\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            cleanupRecording();\r\n        };\r\n    }, []);\r\n\r\n    const cleanupRecording = () => {\r\n        try {\r\n            if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\r\n                mediaRecorderRef.current.stop();\r\n            }\r\n            if (mediaRecorderRef.current?.stream) {\r\n                mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());\r\n            }\r\n            if (countdownRef.current) {\r\n                clearInterval(countdownRef.current);\r\n            }\r\n            mediaRecorderRef.current = null;\r\n            audioChunksRef.current = [];\r\n            setIsRecording(false);\r\n            setCountdown(10);\r\n        } catch (err) {\r\n            console.error('Error in cleanup:', err);\r\n        }\r\n    };\r\n\r\n    const createSimpleWavFromBlob = async (blob) => {\r\n        const arrayBuffer = await blob.arrayBuffer();\r\n        const audioData = new Uint8Array(arrayBuffer);\r\n        const wavHeader = createWavHeader(audioData.length);\r\n        const fullBuffer = new Uint8Array(wavHeader.byteLength + audioData.byteLength);\r\n        fullBuffer.set(new Uint8Array(wavHeader), 0);\r\n        fullBuffer.set(audioData, wavHeader.byteLength);\r\n        return new Blob([fullBuffer], { type: 'audio/wav' });\r\n    };\r\n\r\n    const createWavHeader = (totalSamples, sampleRate = 16000, numChannels = 1, bitsPerSample = 16) => {\r\n        const byteRate = sampleRate * numChannels * (bitsPerSample / 8);\r\n        const blockAlign = numChannels * (bitsPerSample / 8);\r\n        const subChunk2Size = totalSamples;\r\n        const chunkSize = 36 + subChunk2Size;\r\n\r\n        const buffer = new ArrayBuffer(44);\r\n        const view = new DataView(buffer);\r\n\r\n        writeString(view, 0, 'RIFF');\r\n        view.setUint32(4, chunkSize, true);\r\n        writeString(view, 8, 'WAVE');\r\n\r\n        writeString(view, 12, 'fmt ');\r\n        view.setUint32(16, 16, true);\r\n        view.setUint16(20, 1, true);\r\n        view.setUint16(22, numChannels, true);\r\n        view.setUint32(24, sampleRate, true);\r\n        view.setUint32(28, byteRate, true);\r\n        view.setUint16(32, blockAlign, true);\r\n        view.setUint16(34, bitsPerSample, true);\r\n\r\n        writeString(view, 36, 'data');\r\n        view.setUint32(40, subChunk2Size, true);\r\n\r\n        return buffer;\r\n    };\r\n\r\n    const writeString = (view, offset, string) => {\r\n        for (let i = 0; i < string.length; i++) {\r\n            view.setUint8(offset + i, string.charCodeAt(i));\r\n        }\r\n    };\r\n\r\n    const startRecording = async () => {\r\n        try {\r\n            cleanupRecording();\r\n\r\n            const audioContext = initAudioContext();\r\n            if (audioContext.state === 'suspended') {\r\n                await audioContext.resume();\r\n            }\r\n\r\n            const stream = await navigator.mediaDevices.getUserMedia({\r\n                audio: {\r\n                    channelCount: 1,\r\n                    sampleRate: 16000,\r\n                    sampleSize: 16,\r\n                    volume: 1.0\r\n                }\r\n            });\r\n\r\n            const mimeType = getSupportedMimeType();\r\n            if (!mimeType) {\r\n                handleStatus('No supported audio format found for recording.', 'error');\r\n                return;\r\n            }\r\n\r\n            const mediaRecorder = new MediaRecorder(stream, {\r\n                mimeType: mimeType,\r\n                audioBitsPerSecond: 16000\r\n            });\r\n\r\n            mediaRecorderRef.current = mediaRecorder;\r\n            audioChunksRef.current = [];\r\n\r\n            mediaRecorder.ondataavailable = (e) => {\r\n                if (e.data && e.data.size > 0) {\r\n                    audioChunksRef.current.push(e.data);\r\n                }\r\n            };\r\n\r\n            mediaRecorder.onerror = (event) => {\r\n                console.error('Recording error:', event.error);\r\n                handleStatus('Error during recording. Please try again.', 'error');\r\n                cleanupRecording();\r\n            };\r\n\r\n            mediaRecorder.onstop = async () => {\r\n                try {\r\n                    const recordedBlob = new Blob(audioChunksRef.current, {\r\n                        type: mediaRecorder.mimeType\r\n                    });\r\n\r\n                    const wavBlob = await createSimpleWavFromBlob(recordedBlob);\r\n                    setAudioBlob(wavBlob);\r\n                    await processRecording(wavBlob);\r\n                } catch (error) {\r\n                    console.error('Error creating WAV:', error);\r\n                    handleStatus('Error converting recording to WAV format.', 'error');\r\n                    cleanupRecording();\r\n                }\r\n            };\r\n\r\n            mediaRecorder.start(100);\r\n            setIsRecording(true);\r\n            startCountdown();\r\n        } catch (err) {\r\n            console.error('Error starting recording:', err);\r\n            handleStatus('Failed to start recording. Please check microphone permissions.', 'error');\r\n            cleanupRecording();\r\n        }\r\n    };\r\n\r\n    const startCountdown = () => {\r\n        setCountdown(10);\r\n        countdownRef.current = setInterval(() => {\r\n            setCountdown(prev => {\r\n                if (prev <= 1) {\r\n                    clearInterval(countdownRef.current);\r\n                    stopRecording();\r\n                    return 0;\r\n                }\r\n                return prev - 1;\r\n            });\r\n        }, 1000);\r\n    };\r\n\r\n    const stopRecording = () => {\r\n        try {\r\n            if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\r\n                mediaRecorderRef.current.stop();\r\n            } else {\r\n                cleanupRecording();\r\n            }\r\n        } catch (err) {\r\n            console.error('Error stopping recording:', err);\r\n            handleStatus('Error stopping recording. Please try again.', 'error');\r\n            cleanupRecording();\r\n        }\r\n    };\r\n\r\n    const processRecording = async (blob) => {\r\n        try {\r\n            let response;\r\n            if (mode === 'register') {\r\n                response = await registerVoice(blob, userData);\r\n            } else {\r\n                response = await loginVoice(blob, userData.username);\r\n            }\r\n\r\n            if (response.success) {\r\n                setPassphrase(response.passphrase || '');\r\n                handleStatus(response.message, 'success');\r\n            } else {\r\n                handleStatus(response.message, 'error');\r\n            }\r\n        } catch (err) {\r\n            console.error('Error processing recording:', err);\r\n            handleStatus('Failed to process recording. Please try again.', 'error');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"panel\">\r\n            <div className=\"panel-title\">\r\n                <i className=\"fas fa-microphone\"></i>\r\n                <h2>{mode === 'register' ? 'Voice Registration' : 'Voice Authentication'}</h2>\r\n            </div>\r\n\r\n            <div className=\"buttons\">\r\n                <button\r\n                    className={`btn btn-primary ${isRecording ? 'disabled' : ''}`}\r\n                    onClick={startRecording}\r\n                    disabled={isRecording}\r\n                >\r\n                    <i className=\"fas fa-microphone\"></i>\r\n                    {mode === 'register' ? 'Record Passphrase' : 'Verify Identity'}\r\n                </button>\r\n                {isRecording && (\r\n                    <button className=\"btn btn-danger\" onClick={stopRecording}>\r\n                        <i className=\"fas fa-stop\"></i> Stop Recording\r\n                    </button>\r\n                )}\r\n            </div>\r\n\r\n            {isRecording && (\r\n                <>\r\n                    <div className=\"recording-indicator\">\r\n                        <div className=\"pulse\"></div>\r\n                        <div>Recording your voice... Please speak now</div>\r\n                    </div>\r\n                    <div className=\"timer\">{countdown}</div>\r\n                    <div className=\"voice-wave\">\r\n                        {[...Array(8)].map((_, i) => (\r\n                            <div key={i} className=\"wave-bar\"></div>\r\n                        ))}\r\n                    </div>\r\n                </>\r\n            )}\r\n\r\n            {passphrase && (\r\n                <div className=\"result-box\">\r\n                    <div className=\"result-text\">\r\n                        Your {mode === 'register' ? 'registered' : 'recognized'} passphrase:\r\n                        <span> \"{passphrase}\"</span>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VoiceRecorder;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}