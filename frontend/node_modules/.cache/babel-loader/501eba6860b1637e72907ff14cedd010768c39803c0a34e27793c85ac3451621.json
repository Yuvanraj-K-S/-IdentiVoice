{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\-IdentiVoice\\\\frontend\\\\src\\\\components\\\\VoiceRecorder.js\",\n  _s = $RefreshSig$();\n// Modified VoiceRecorder.js with proper WAV encoding and cleanup handling\nimport React, { useState, useEffect, useRef } from 'react';\nimport { registerVoice, loginVoice } from '../utils/api';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst VoiceRecorder = ({\n  mode,\n  userData,\n  handleStatus\n}) => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [countdown, setCountdown] = useState(10);\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [passphrase, setPassphrase] = useState('');\n  const mediaRecorderRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const countdownRef = useRef(null);\n  useEffect(() => {\n    return () => {\n      cleanupRecording();\n    };\n  }, []);\n  const initAudioContext = () => {\n    if (!audioContextRef.current || audioContextRef.current.state === 'closed') {\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n    }\n    return audioContextRef.current;\n  };\n  const cleanupRecording = () => {\n    try {\n      var _mediaRecorderRef$cur, _mediaRecorderRef$cur2, _mediaRecorderRef$cur3;\n      if (((_mediaRecorderRef$cur = mediaRecorderRef.current) === null || _mediaRecorderRef$cur === void 0 ? void 0 : _mediaRecorderRef$cur.state) === 'recording') {\n        mediaRecorderRef.current.stop();\n      }\n      (_mediaRecorderRef$cur2 = mediaRecorderRef.current) === null || _mediaRecorderRef$cur2 === void 0 ? void 0 : (_mediaRecorderRef$cur3 = _mediaRecorderRef$cur2.stream) === null || _mediaRecorderRef$cur3 === void 0 ? void 0 : _mediaRecorderRef$cur3.getTracks().forEach(track => track.stop());\n      if (countdownRef.current) clearInterval(countdownRef.current);\n      mediaRecorderRef.current = null;\n      audioChunksRef.current = [];\n      setIsRecording(false);\n      setCountdown(10);\n    } catch (err) {\n      console.error('Error in cleanup:', err);\n    }\n  };\n  const floatTo16BitPCM = float32Array => {\n    const buffer = new Int16Array(float32Array.length);\n    for (let i = 0; i < float32Array.length; i++) {\n      const s = Math.max(-1, Math.min(1, float32Array[i]));\n      buffer[i] = s < 0 ? s * 0x8000 : s * 0x7FFF;\n    }\n    return buffer;\n  };\n  const averageChannels = audioBuffer => {\n    const numChannels = audioBuffer.numberOfChannels;\n    const length = audioBuffer.length;\n    const avgData = new Float32Array(length);\n    for (let c = 0; c < numChannels; c++) {\n      const channel = audioBuffer.getChannelData(c);\n      for (let i = 0; i < length; i++) {\n        avgData[i] += channel[i] / numChannels;\n      }\n    }\n    return avgData;\n  };\n  const createWavHeader = (length, sampleRate = 16000, numChannels = 1, bitsPerSample = 16) => {\n    const byteRate = sampleRate * numChannels * bitsPerSample / 8;\n    const blockAlign = numChannels * bitsPerSample / 8;\n    const subChunk2Size = length * numChannels * bitsPerSample / 8;\n    const chunkSize = 36 + subChunk2Size;\n    const buffer = new ArrayBuffer(44);\n    const view = new DataView(buffer);\n    const writeString = (view, offset, string) => {\n      for (let i = 0; i < string.length; i++) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n      }\n    };\n    writeString(view, 0, 'RIFF');\n    view.setUint32(4, chunkSize, true);\n    writeString(view, 8, 'WAVE');\n    writeString(view, 12, 'fmt ');\n    view.setUint32(16, 16, true);\n    view.setUint16(20, 1, true);\n    view.setUint16(22, numChannels, true);\n    view.setUint32(24, sampleRate, true);\n    view.setUint32(28, byteRate, true);\n    view.setUint16(32, blockAlign, true);\n    view.setUint16(34, bitsPerSample, true);\n    writeString(view, 36, 'data');\n    view.setUint32(40, subChunk2Size, true);\n    return buffer;\n  };\n  const startRecording = async () => {\n    try {\n      cleanupRecording();\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorderRef.current = mediaRecorder;\n      audioChunksRef.current = [];\n      mediaRecorder.ondataavailable = e => {\n        if (e.data.size > 0) audioChunksRef.current.push(e.data);\n      };\n      mediaRecorder.onstop = async () => {\n        try {\n          const blob = new Blob(audioChunksRef.current, {\n            type: 'audio/webm'\n          });\n          const arrayBuffer = await blob.arrayBuffer();\n          const audioContext = initAudioContext();\n          const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n          const monoData = audioBuffer.numberOfChannels > 1 ? averageChannels(audioBuffer) : audioBuffer.getChannelData(0);\n          const pcm = floatTo16BitPCM(monoData);\n          const header = createWavHeader(pcm.length);\n          const wav = new Uint8Array(header.byteLength + pcm.byteLength);\n          wav.set(new Uint8Array(header), 0);\n          wav.set(new Uint8Array(pcm.buffer), header.byteLength);\n          const wavBlob = new Blob([wav], {\n            type: 'audio/wav'\n          });\n          setAudioBlob(wavBlob);\n          await processRecording(wavBlob);\n          // Debug: Create a temporary download link to save the WAV file locally\n          const url = URL.createObjectURL(wavBlob);\n          const a = document.createElement('a');\n          a.style.display = 'none';\n          a.href = url;\n          a.download = 'debug_recording.wav';\n          document.body.appendChild(a);\n          a.click();\n          URL.revokeObjectURL(url);\n        } catch (error) {\n          console.error('Error creating WAV:', error);\n          handleStatus('Error converting recording to WAV format.', 'error');\n        } finally {\n          cleanupRecording();\n        }\n      };\n      mediaRecorder.start(100);\n      setIsRecording(true);\n      startCountdown();\n    } catch (err) {\n      console.error('Error starting recording:', err);\n      handleStatus('Failed to start recording. Check mic permissions.', 'error');\n      cleanupRecording();\n    }\n  };\n  const startCountdown = () => {\n    setCountdown(10);\n    countdownRef.current = setInterval(() => {\n      setCountdown(prev => {\n        if (prev <= 1) {\n          clearInterval(countdownRef.current);\n          stopRecording();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n  const stopRecording = () => {\n    try {\n      var _mediaRecorderRef$cur4;\n      if (((_mediaRecorderRef$cur4 = mediaRecorderRef.current) === null || _mediaRecorderRef$cur4 === void 0 ? void 0 : _mediaRecorderRef$cur4.state) === 'recording') {\n        mediaRecorderRef.current.stop();\n      }\n    } catch (err) {\n      console.error('Error stopping recording:', err);\n      handleStatus('Error stopping recording. Try again.', 'error');\n      cleanupRecording();\n    }\n  };\n  const processRecording = async blob => {\n    try {\n      const response = mode === 'register' ? await registerVoice(blob, userData) : await loginVoice(blob, userData.username);\n      if (response.success) {\n        setPassphrase(response.passphrase || '');\n        handleStatus(response.message, 'success');\n      } else {\n        handleStatus(response.message, 'error');\n      }\n    } catch (err) {\n      console.error('Error processing recording:', err);\n      handleStatus('Failed to process recording.', 'error');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel-title\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-microphone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: mode === 'register' ? 'Voice Registration' : 'Voice Authentication'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `btn btn-primary ${isRecording ? 'disabled' : ''}`,\n        onClick: startRecording,\n        disabled: isRecording,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-microphone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 21\n        }, this), mode === 'register' ? 'Record Passphrase' : 'Verify Identity']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }, this), isRecording && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-danger\",\n        onClick: stopRecording,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 25\n        }, this), \" Stop Recording\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }, this), isRecording && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recording-indicator\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pulse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Recording your voice... Please speak now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: countdown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"voice-wave\",\n        children: [...Array(8)].map((_, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wave-bar\"\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 54\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), passphrase && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-box\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-text\",\n        children: [\"Your \", mode === 'register' ? 'registered' : 'recognized', \" passphrase:\", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\" \\\"\", passphrase, \"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 9\n  }, this);\n};\n_s(VoiceRecorder, \"VzV+byMWjrxh1x6R9aUbxmqSb+U=\");\n_c = VoiceRecorder;\nexport default VoiceRecorder;\nvar _c;\n$RefreshReg$(_c, \"VoiceRecorder\");","map":{"version":3,"names":["React","useState","useEffect","useRef","registerVoice","loginVoice","jsxDEV","_jsxDEV","Fragment","_Fragment","VoiceRecorder","mode","userData","handleStatus","_s","isRecording","setIsRecording","countdown","setCountdown","audioBlob","setAudioBlob","passphrase","setPassphrase","mediaRecorderRef","audioContextRef","audioChunksRef","countdownRef","cleanupRecording","initAudioContext","current","state","window","AudioContext","webkitAudioContext","_mediaRecorderRef$cur","_mediaRecorderRef$cur2","_mediaRecorderRef$cur3","stop","stream","getTracks","forEach","track","clearInterval","err","console","error","floatTo16BitPCM","float32Array","buffer","Int16Array","length","i","s","Math","max","min","averageChannels","audioBuffer","numChannels","numberOfChannels","avgData","Float32Array","c","channel","getChannelData","createWavHeader","sampleRate","bitsPerSample","byteRate","blockAlign","subChunk2Size","chunkSize","ArrayBuffer","view","DataView","writeString","offset","string","setUint8","charCodeAt","setUint32","setUint16","startRecording","navigator","mediaDevices","getUserMedia","audio","mediaRecorder","MediaRecorder","ondataavailable","e","data","size","push","onstop","blob","Blob","type","arrayBuffer","audioContext","decodeAudioData","monoData","pcm","header","wav","Uint8Array","byteLength","set","wavBlob","processRecording","url","URL","createObjectURL","a","document","createElement","style","display","href","download","body","appendChild","click","revokeObjectURL","start","startCountdown","setInterval","prev","stopRecording","_mediaRecorderRef$cur4","response","username","success","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","Array","map","_","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/-IdentiVoice/frontend/src/components/VoiceRecorder.js"],"sourcesContent":["// Modified VoiceRecorder.js with proper WAV encoding and cleanup handling\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { registerVoice, loginVoice } from '../utils/api';\r\n\r\nconst VoiceRecorder = ({ mode, userData, handleStatus }) => {\r\n    const [isRecording, setIsRecording] = useState(false);\r\n    const [countdown, setCountdown] = useState(10);\r\n    const [audioBlob, setAudioBlob] = useState(null);\r\n    const [passphrase, setPassphrase] = useState('');\r\n    const mediaRecorderRef = useRef(null);\r\n    const audioContextRef = useRef(null);\r\n    const audioChunksRef = useRef([]);\r\n    const countdownRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            cleanupRecording();\r\n        };\r\n    }, []);\r\n\r\n    const initAudioContext = () => {\r\n        if (!audioContextRef.current || audioContextRef.current.state === 'closed') {\r\n            audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\r\n        }\r\n        return audioContextRef.current;\r\n    };\r\n\r\n    const cleanupRecording = () => {\r\n        try {\r\n            if (mediaRecorderRef.current?.state === 'recording') {\r\n                mediaRecorderRef.current.stop();\r\n            }\r\n            mediaRecorderRef.current?.stream?.getTracks().forEach(track => track.stop());\r\n            if (countdownRef.current) clearInterval(countdownRef.current);\r\n\r\n            mediaRecorderRef.current = null;\r\n            audioChunksRef.current = [];\r\n            setIsRecording(false);\r\n            setCountdown(10);\r\n        } catch (err) {\r\n            console.error('Error in cleanup:', err);\r\n        }\r\n    };\r\n\r\n    const floatTo16BitPCM = (float32Array) => {\r\n        const buffer = new Int16Array(float32Array.length);\r\n        for (let i = 0; i < float32Array.length; i++) {\r\n            const s = Math.max(-1, Math.min(1, float32Array[i]));\r\n            buffer[i] = s < 0 ? s * 0x8000 : s * 0x7FFF;\r\n        }\r\n        return buffer;\r\n    };\r\n\r\n    const averageChannels = (audioBuffer) => {\r\n        const numChannels = audioBuffer.numberOfChannels;\r\n        const length = audioBuffer.length;\r\n        const avgData = new Float32Array(length);\r\n        for (let c = 0; c < numChannels; c++) {\r\n            const channel = audioBuffer.getChannelData(c);\r\n            for (let i = 0; i < length; i++) {\r\n                avgData[i] += channel[i] / numChannels;\r\n            }\r\n        }\r\n        return avgData;\r\n    };\r\n\r\n    const createWavHeader = (length, sampleRate = 16000, numChannels = 1, bitsPerSample = 16) => {\r\n        const byteRate = sampleRate * numChannels * bitsPerSample / 8;\r\n        const blockAlign = numChannels * bitsPerSample / 8;\r\n        const subChunk2Size = length * numChannels * bitsPerSample / 8;\r\n        const chunkSize = 36 + subChunk2Size;\r\n\r\n        const buffer = new ArrayBuffer(44);\r\n        const view = new DataView(buffer);\r\n\r\n        const writeString = (view, offset, string) => {\r\n            for (let i = 0; i < string.length; i++) {\r\n                view.setUint8(offset + i, string.charCodeAt(i));\r\n            }\r\n        };\r\n\r\n        writeString(view, 0, 'RIFF');\r\n        view.setUint32(4, chunkSize, true);\r\n        writeString(view, 8, 'WAVE');\r\n        writeString(view, 12, 'fmt ');\r\n        view.setUint32(16, 16, true);\r\n        view.setUint16(20, 1, true);\r\n        view.setUint16(22, numChannels, true);\r\n        view.setUint32(24, sampleRate, true);\r\n        view.setUint32(28, byteRate, true);\r\n        view.setUint16(32, blockAlign, true);\r\n        view.setUint16(34, bitsPerSample, true);\r\n        writeString(view, 36, 'data');\r\n        view.setUint32(40, subChunk2Size, true);\r\n\r\n        return buffer;\r\n    };\r\n\r\n    const startRecording = async () => {\r\n        try {\r\n            cleanupRecording();\r\n            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n\r\n            const mediaRecorder = new MediaRecorder(stream);\r\n            mediaRecorderRef.current = mediaRecorder;\r\n            audioChunksRef.current = [];\r\n\r\n            mediaRecorder.ondataavailable = e => {\r\n                if (e.data.size > 0) audioChunksRef.current.push(e.data);\r\n            };\r\n\r\n            mediaRecorder.onstop = async () => {\r\n                try {\r\n                    const blob = new Blob(audioChunksRef.current, { type: 'audio/webm' });\r\n                    const arrayBuffer = await blob.arrayBuffer();\r\n                    const audioContext = initAudioContext();\r\n                    const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\r\n\r\n                    const monoData = audioBuffer.numberOfChannels > 1 ? averageChannels(audioBuffer) : audioBuffer.getChannelData(0);\r\n                    const pcm = floatTo16BitPCM(monoData);\r\n                    const header = createWavHeader(pcm.length);\r\n\r\n                    const wav = new Uint8Array(header.byteLength + pcm.byteLength);\r\n                    wav.set(new Uint8Array(header), 0);\r\n                    wav.set(new Uint8Array(pcm.buffer), header.byteLength);\r\n\r\n                    const wavBlob = new Blob([wav], { type: 'audio/wav' });\r\n                    setAudioBlob(wavBlob);\r\n                    await processRecording(wavBlob);\r\n                    // Debug: Create a temporary download link to save the WAV file locally\r\n                    const url = URL.createObjectURL(wavBlob);\r\n                    const a = document.createElement('a');\r\n                    a.style.display = 'none';\r\n                    a.href = url;\r\n                    a.download = 'debug_recording.wav';\r\n                    document.body.appendChild(a);\r\n                    a.click();\r\n                    URL.revokeObjectURL(url);\r\n\r\n\r\n                } catch (error) {\r\n                    console.error('Error creating WAV:', error);\r\n                    handleStatus('Error converting recording to WAV format.', 'error');\r\n                } finally {\r\n                    cleanupRecording();\r\n                }\r\n            };\r\n\r\n            mediaRecorder.start(100);\r\n            setIsRecording(true);\r\n            startCountdown();\r\n\r\n        } catch (err) {\r\n            console.error('Error starting recording:', err);\r\n            handleStatus('Failed to start recording. Check mic permissions.', 'error');\r\n            cleanupRecording();\r\n        }\r\n    };\r\n\r\n    const startCountdown = () => {\r\n        setCountdown(10);\r\n        countdownRef.current = setInterval(() => {\r\n            setCountdown(prev => {\r\n                if (prev <= 1) {\r\n                    clearInterval(countdownRef.current);\r\n                    stopRecording();\r\n                    return 0;\r\n                }\r\n                return prev - 1;\r\n            });\r\n        }, 1000);\r\n    };\r\n\r\n    const stopRecording = () => {\r\n        try {\r\n            if (mediaRecorderRef.current?.state === 'recording') {\r\n                mediaRecorderRef.current.stop();\r\n            }\r\n        } catch (err) {\r\n            console.error('Error stopping recording:', err);\r\n            handleStatus('Error stopping recording. Try again.', 'error');\r\n            cleanupRecording();\r\n        }\r\n    };\r\n\r\n    const processRecording = async (blob) => {\r\n        try {\r\n            const response = mode === 'register'\r\n                ? await registerVoice(blob, userData)\r\n                : await loginVoice(blob, userData.username);\r\n\r\n            if (response.success) {\r\n                setPassphrase(response.passphrase || '');\r\n                handleStatus(response.message, 'success');\r\n            } else {\r\n                handleStatus(response.message, 'error');\r\n            }\r\n        } catch (err) {\r\n            console.error('Error processing recording:', err);\r\n            handleStatus('Failed to process recording.', 'error');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"panel\">\r\n            <div className=\"panel-title\">\r\n                <i className=\"fas fa-microphone\"></i>\r\n                <h2>{mode === 'register' ? 'Voice Registration' : 'Voice Authentication'}</h2>\r\n            </div>\r\n\r\n            <div className=\"buttons\">\r\n                <button className={`btn btn-primary ${isRecording ? 'disabled' : ''}`} onClick={startRecording} disabled={isRecording}>\r\n                    <i className=\"fas fa-microphone\"></i>\r\n                    {mode === 'register' ? 'Record Passphrase' : 'Verify Identity'}\r\n                </button>\r\n                {isRecording && (\r\n                    <button className=\"btn btn-danger\" onClick={stopRecording}>\r\n                        <i className=\"fas fa-stop\"></i> Stop Recording\r\n                    </button>\r\n                )}\r\n            </div>\r\n\r\n            {isRecording && (\r\n                <>\r\n                    <div className=\"recording-indicator\">\r\n                        <div className=\"pulse\"></div>\r\n                        <div>Recording your voice... Please speak now</div>\r\n                    </div>\r\n                    <div className=\"timer\">{countdown}</div>\r\n                    <div className=\"voice-wave\">\r\n                        {[...Array(8)].map((_, i) => <div key={i} className=\"wave-bar\"></div>)}\r\n                    </div>\r\n                </>\r\n            )}\r\n\r\n            {passphrase && (\r\n                <div className=\"result-box\">\r\n                    <div className=\"result-text\">\r\n                        Your {mode === 'register' ? 'registered' : 'recognized'} passphrase:\r\n                        <span> \"{passphrase}\"</span>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VoiceRecorder;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}