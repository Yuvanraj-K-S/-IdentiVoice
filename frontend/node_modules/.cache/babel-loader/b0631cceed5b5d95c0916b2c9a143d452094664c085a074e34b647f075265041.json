{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\-IdentiVoice\\\\frontend\\\\src\\\\components\\\\VoiceRecorder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { registerVoice, loginVoice } from '../utils/api';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst VoiceRecorder = ({\n  mode,\n  userData,\n  handleStatus\n}) => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [countdown, setCountdown] = useState(10);\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [passphrase, setPassphrase] = useState('');\n\n  // New refs for PCM recording\n  const audioContextRef = useRef(null);\n  const audioStreamRef = useRef(null);\n  const audioProcessorRef = useRef(null);\n  const audioDataRef = useRef([]);\n  const countdownRef = useRef(null);\n  useEffect(() => {\n    return () => {\n      cleanupRecording();\n    };\n  }, []);\n  const cleanupRecording = () => {\n    try {\n      if (audioProcessorRef.current) {\n        audioProcessorRef.current.disconnect();\n      }\n      if (audioStreamRef.current) {\n        audioStreamRef.current.getTracks().forEach(track => track.stop());\n      }\n      if (countdownRef.current) {\n        clearInterval(countdownRef.current);\n      }\n      audioProcessorRef.current = null;\n      audioDataRef.current = [];\n      setIsRecording(false);\n      setCountdown(10);\n    } catch (err) {\n      console.error('Error in cleanup:', err);\n    }\n  };\n  const flattenAudioData = chunks => {\n    const length = chunks.reduce((sum, chunk) => sum + chunk.length, 0);\n    const result = new Float32Array(length);\n    let offset = 0;\n    for (let chunk of chunks) {\n      result.set(chunk, offset);\n      offset += chunk.length;\n    }\n    return result;\n  };\n  const floatTo16BitPCM = float32Array => {\n    const buffer = new Int16Array(float32Array.length);\n    for (let i = 0; i < float32Array.length; i++) {\n      const s = Math.max(-1, Math.min(1, float32Array[i]));\n      buffer[i] = s < 0 ? s * 0x8000 : s * 0x7FFF;\n    }\n    return buffer;\n  };\n  const createWavHeader = (totalSamples, sampleRate = 16000, numChannels = 1, bitsPerSample = 16) => {\n    const byteRate = sampleRate * numChannels * (bitsPerSample / 8);\n    const blockAlign = numChannels * (bitsPerSample / 8);\n    const subChunk2Size = totalSamples * blockAlign;\n    const chunkSize = 36 + subChunk2Size;\n    const buffer = new ArrayBuffer(44);\n    const view = new DataView(buffer);\n\n    // RIFF chunk descriptor\n    writeString(view, 0, 'RIFF'); // ChunkID\n    view.setUint32(4, chunkSize, true); // ChunkSize\n    writeString(view, 8, 'WAVE'); // Format\n\n    // fmt sub-chunk\n    writeString(view, 12, 'fmt '); // Subchunk1ID\n    view.setUint32(16, 16, true); // Subchunk1Size (16 for PCM)\n    view.setUint16(20, 1, true); // AudioFormat (1 for PCM)\n    view.setUint16(22, numChannels, true); // NumChannels\n    view.setUint32(24, sampleRate, true); // SampleRate\n    view.setUint32(28, byteRate, true); // ByteRate\n    view.setUint16(32, blockAlign, true); // BlockAlign\n    view.setUint16(34, bitsPerSample, true); // BitsPerSample\n\n    // data sub-chunk\n    writeString(view, 36, 'data'); // Subchunk2ID\n    view.setUint32(40, subChunk2Size, true); // Subchunk2Size\n\n    return buffer;\n  };\n  const writeString = (view, offset, string) => {\n    for (let i = 0; i < string.length; i++) {\n      view.setUint8(offset + i, string.charCodeAt(i));\n    }\n  };\n  const startRecording = async () => {\n    try {\n      cleanupRecording();\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      audioStreamRef.current = stream;\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)({\n        sampleRate: 16000\n      });\n      audioContextRef.current = audioContext;\n      const source = audioContext.createMediaStreamSource(stream);\n      const processor = audioContext.createScriptProcessor(4096, 1, 1);\n      audioDataRef.current = [];\n      processor.onaudioprocess = e => {\n        const input = e.inputBuffer.getChannelData(0);\n        audioDataRef.current.push(new Float32Array(input));\n      };\n      source.connect(processor);\n      processor.connect(audioContext.destination);\n      audioProcessorRef.current = processor;\n      setIsRecording(true);\n      startCountdown();\n    } catch (err) {\n      console.error('Error starting recording:', err);\n      handleStatus('Failed to start recording.', 'error');\n    }\n  };\n  const stopRecording = () => {\n    try {\n      if (audioProcessorRef.current) {\n        audioProcessorRef.current.disconnect();\n      }\n      if (audioStreamRef.current) {\n        audioStreamRef.current.getTracks().forEach(track => track.stop());\n      }\n      const flatData = flattenAudioData(audioDataRef.current);\n      const pcm = floatTo16BitPCM(flatData);\n      const header = createWavHeader(pcm.length, 16000);\n      const wavBuffer = new Uint8Array(header.byteLength + pcm.byteLength);\n      wavBuffer.set(new Uint8Array(header), 0);\n      wavBuffer.set(new Uint8Array(pcm.buffer), header.byteLength);\n      const wavBlob = new Blob([wavBuffer], {\n        type: 'audio/wav'\n      });\n      setAudioBlob(wavBlob);\n      processRecording(wavBlob);\n      cleanupRecording();\n    } catch (err) {\n      console.error('Error stopping recording:', err);\n      handleStatus('Failed to stop recording.', 'error');\n    }\n  };\n  const startCountdown = () => {\n    setCountdown(10);\n    countdownRef.current = setInterval(() => {\n      setCountdown(prev => {\n        if (prev <= 1) {\n          clearInterval(countdownRef.current);\n          stopRecording();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n  const processRecording = async blob => {\n    try {\n      let response;\n      if (mode === 'register') {\n        response = await registerVoice(blob, userData);\n      } else {\n        response = await loginVoice(blob, userData.username);\n      }\n      if (response.success) {\n        setPassphrase(response.passphrase || '');\n        handleStatus(response.message, 'success');\n      } else {\n        handleStatus(response.message, 'error');\n      }\n    } catch (err) {\n      console.error('Error processing recording:', err);\n      handleStatus('Failed to process recording. Please try again.', 'error');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel-title\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-microphone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: mode === 'register' ? 'Voice Registration' : 'Voice Authentication'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `btn btn-primary ${isRecording ? 'disabled' : ''}`,\n        onClick: startRecording,\n        disabled: isRecording,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-microphone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 21\n        }, this), mode === 'register' ? 'Record Passphrase' : 'Verify Identity']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }, this), isRecording && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-danger\",\n        onClick: stopRecording,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 25\n        }, this), \" Stop Recording\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }, this), isRecording && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recording-indicator\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pulse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Recording your voice... Please speak now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: countdown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"voice-wave\",\n        children: [...Array(8)].map((_, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wave-bar\"\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), passphrase && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-box\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-text\",\n        children: [\"Your \", mode === 'register' ? 'registered' : 'recognized', \" passphrase:\", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\" \\\"\", passphrase, \"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 9\n  }, this);\n};\n_s(VoiceRecorder, \"KQmcyIkBRNKTfUPLsYJQ+1zDAUs=\");\n_c = VoiceRecorder;\nexport default VoiceRecorder;\nvar _c;\n$RefreshReg$(_c, \"VoiceRecorder\");","map":{"version":3,"names":["React","useState","useEffect","useRef","registerVoice","loginVoice","jsxDEV","_jsxDEV","Fragment","_Fragment","VoiceRecorder","mode","userData","handleStatus","_s","isRecording","setIsRecording","countdown","setCountdown","audioBlob","setAudioBlob","passphrase","setPassphrase","audioContextRef","audioStreamRef","audioProcessorRef","audioDataRef","countdownRef","cleanupRecording","current","disconnect","getTracks","forEach","track","stop","clearInterval","err","console","error","flattenAudioData","chunks","length","reduce","sum","chunk","result","Float32Array","offset","set","floatTo16BitPCM","float32Array","buffer","Int16Array","i","s","Math","max","min","createWavHeader","totalSamples","sampleRate","numChannels","bitsPerSample","byteRate","blockAlign","subChunk2Size","chunkSize","ArrayBuffer","view","DataView","writeString","setUint32","setUint16","string","setUint8","charCodeAt","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","audioContext","window","AudioContext","webkitAudioContext","source","createMediaStreamSource","processor","createScriptProcessor","onaudioprocess","e","input","inputBuffer","getChannelData","push","connect","destination","startCountdown","stopRecording","flatData","pcm","header","wavBuffer","Uint8Array","byteLength","wavBlob","Blob","type","processRecording","setInterval","prev","blob","response","username","success","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","Array","map","_","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/-IdentiVoice/frontend/src/components/VoiceRecorder.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { registerVoice, loginVoice } from '../utils/api';\r\n\r\nconst VoiceRecorder = ({ mode, userData, handleStatus }) => {\r\n    const [isRecording, setIsRecording] = useState(false);\r\n    const [countdown, setCountdown] = useState(10);\r\n    const [audioBlob, setAudioBlob] = useState(null);\r\n    const [passphrase, setPassphrase] = useState('');\r\n    \r\n    // New refs for PCM recording\r\n    const audioContextRef = useRef(null);\r\n    const audioStreamRef = useRef(null);\r\n    const audioProcessorRef = useRef(null);\r\n    const audioDataRef = useRef([]);\r\n    const countdownRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            cleanupRecording();\r\n        };\r\n    }, []);\r\n\r\n    const cleanupRecording = () => {\r\n        try {\r\n            if (audioProcessorRef.current) {\r\n                audioProcessorRef.current.disconnect();\r\n            }\r\n            if (audioStreamRef.current) {\r\n                audioStreamRef.current.getTracks().forEach(track => track.stop());\r\n            }\r\n            if (countdownRef.current) {\r\n                clearInterval(countdownRef.current);\r\n            }\r\n            audioProcessorRef.current = null;\r\n            audioDataRef.current = [];\r\n            setIsRecording(false);\r\n            setCountdown(10);\r\n        } catch (err) {\r\n            console.error('Error in cleanup:', err);\r\n        }\r\n    };\r\n\r\n    const flattenAudioData = (chunks) => {\r\n        const length = chunks.reduce((sum, chunk) => sum + chunk.length, 0);\r\n        const result = new Float32Array(length);\r\n        let offset = 0;\r\n        for (let chunk of chunks) {\r\n            result.set(chunk, offset);\r\n            offset += chunk.length;\r\n        }\r\n        return result;\r\n    };\r\n\r\n    const floatTo16BitPCM = (float32Array) => {\r\n        const buffer = new Int16Array(float32Array.length);\r\n        for (let i = 0; i < float32Array.length; i++) {\r\n            const s = Math.max(-1, Math.min(1, float32Array[i]));\r\n            buffer[i] = s < 0 ? s * 0x8000 : s * 0x7FFF;\r\n        }\r\n        return buffer;\r\n    };\r\n\r\n    const createWavHeader = (totalSamples, sampleRate = 16000, numChannels = 1, bitsPerSample = 16) => {\r\n        const byteRate = sampleRate * numChannels * (bitsPerSample / 8);\r\n        const blockAlign = numChannels * (bitsPerSample / 8);\r\n        const subChunk2Size = totalSamples * blockAlign;\r\n        const chunkSize = 36 + subChunk2Size;\r\n\r\n        const buffer = new ArrayBuffer(44);\r\n        const view = new DataView(buffer);\r\n\r\n        // RIFF chunk descriptor\r\n        writeString(view, 0, 'RIFF');                     // ChunkID\r\n        view.setUint32(4, chunkSize, true);              // ChunkSize\r\n        writeString(view, 8, 'WAVE');                     // Format\r\n\r\n        // fmt sub-chunk\r\n        writeString(view, 12, 'fmt ');                    // Subchunk1ID\r\n        view.setUint32(16, 16, true);                    // Subchunk1Size (16 for PCM)\r\n        view.setUint16(20, 1, true);                     // AudioFormat (1 for PCM)\r\n        view.setUint16(22, numChannels, true);           // NumChannels\r\n        view.setUint32(24, sampleRate, true);            // SampleRate\r\n        view.setUint32(28, byteRate, true);              // ByteRate\r\n        view.setUint16(32, blockAlign, true);            // BlockAlign\r\n        view.setUint16(34, bitsPerSample, true);         // BitsPerSample\r\n\r\n        // data sub-chunk\r\n        writeString(view, 36, 'data');                    // Subchunk2ID\r\n        view.setUint32(40, subChunk2Size, true);         // Subchunk2Size\r\n\r\n        return buffer;\r\n    };\r\n\r\n    const writeString = (view, offset, string) => {\r\n        for (let i = 0; i < string.length; i++) {\r\n            view.setUint8(offset + i, string.charCodeAt(i));\r\n        }\r\n    };\r\n\r\n    const startRecording = async () => {\r\n        try {\r\n            cleanupRecording();\r\n\r\n            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n            audioStreamRef.current = stream;\r\n\r\n            const audioContext = new (window.AudioContext || window.webkitAudioContext)({ sampleRate: 16000 });\r\n            audioContextRef.current = audioContext;\r\n\r\n            const source = audioContext.createMediaStreamSource(stream);\r\n            const processor = audioContext.createScriptProcessor(4096, 1, 1);\r\n\r\n            audioDataRef.current = [];\r\n\r\n            processor.onaudioprocess = (e) => {\r\n                const input = e.inputBuffer.getChannelData(0);\r\n                audioDataRef.current.push(new Float32Array(input));\r\n            };\r\n\r\n            source.connect(processor);\r\n            processor.connect(audioContext.destination);\r\n\r\n            audioProcessorRef.current = processor;\r\n            setIsRecording(true);\r\n            startCountdown();\r\n\r\n        } catch (err) {\r\n            console.error('Error starting recording:', err);\r\n            handleStatus('Failed to start recording.', 'error');\r\n        }\r\n    };\r\n\r\n    const stopRecording = () => {\r\n        try {\r\n            if (audioProcessorRef.current) {\r\n                audioProcessorRef.current.disconnect();\r\n            }\r\n            if (audioStreamRef.current) {\r\n                audioStreamRef.current.getTracks().forEach(track => track.stop());\r\n            }\r\n\r\n            const flatData = flattenAudioData(audioDataRef.current);\r\n            const pcm = floatTo16BitPCM(flatData);\r\n            const header = createWavHeader(pcm.length, 16000);\r\n\r\n            const wavBuffer = new Uint8Array(header.byteLength + pcm.byteLength);\r\n            wavBuffer.set(new Uint8Array(header), 0);\r\n            wavBuffer.set(new Uint8Array(pcm.buffer), header.byteLength);\r\n\r\n            const wavBlob = new Blob([wavBuffer], { type: 'audio/wav' });\r\n            setAudioBlob(wavBlob);\r\n            processRecording(wavBlob);\r\n\r\n            cleanupRecording();\r\n\r\n        } catch (err) {\r\n            console.error('Error stopping recording:', err);\r\n            handleStatus('Failed to stop recording.', 'error');\r\n        }\r\n    };\r\n\r\n    const startCountdown = () => {\r\n        setCountdown(10);\r\n        countdownRef.current = setInterval(() => {\r\n            setCountdown(prev => {\r\n                if (prev <= 1) {\r\n                    clearInterval(countdownRef.current);\r\n                    stopRecording();\r\n                    return 0;\r\n                }\r\n                return prev - 1;\r\n            });\r\n        }, 1000);\r\n    };\r\n\r\n    const processRecording = async (blob) => {\r\n        try {\r\n            let response;\r\n            if (mode === 'register') {\r\n                response = await registerVoice(blob, userData);\r\n            } else {\r\n                response = await loginVoice(blob, userData.username);\r\n            }\r\n            \r\n            if (response.success) {\r\n                setPassphrase(response.passphrase || '');\r\n                handleStatus(response.message, 'success');\r\n            } else {\r\n                handleStatus(response.message, 'error');\r\n            }\r\n        } catch (err) {\r\n            console.error('Error processing recording:', err);\r\n            handleStatus('Failed to process recording. Please try again.', 'error');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"panel\">\r\n            <div className=\"panel-title\">\r\n                <i className=\"fas fa-microphone\"></i>\r\n                <h2>{mode === 'register' ? 'Voice Registration' : 'Voice Authentication'}</h2>\r\n            </div>\r\n            \r\n            <div className=\"buttons\">\r\n                <button \r\n                    className={`btn btn-primary ${isRecording ? 'disabled' : ''}`}\r\n                    onClick={startRecording}\r\n                    disabled={isRecording}\r\n                >\r\n                    <i className=\"fas fa-microphone\"></i> \r\n                    {mode === 'register' ? 'Record Passphrase' : 'Verify Identity'}\r\n                </button>\r\n                {isRecording && (\r\n                    <button \r\n                        className=\"btn btn-danger\"\r\n                        onClick={stopRecording}\r\n                    >\r\n                        <i className=\"fas fa-stop\"></i> Stop Recording\r\n                    </button>\r\n                )}\r\n            </div>\r\n            \r\n            {isRecording && (\r\n                <>\r\n                    <div className=\"recording-indicator\">\r\n                        <div className=\"pulse\"></div>\r\n                        <div>Recording your voice... Please speak now</div>\r\n                    </div>\r\n                    <div className=\"timer\">{countdown}</div>\r\n                    <div className=\"voice-wave\">\r\n                        {[...Array(8)].map((_, i) => (\r\n                            <div key={i} className=\"wave-bar\"></div>\r\n                        ))}\r\n                    </div>\r\n                </>\r\n            )}\r\n            \r\n            {passphrase && (\r\n                <div className=\"result-box\">\r\n                    <div className=\"result-text\">\r\n                        Your {mode === 'register' ? 'registered' : 'recognized'} passphrase: \r\n                        <span> \"{passphrase}\"</span>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VoiceRecorder;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}