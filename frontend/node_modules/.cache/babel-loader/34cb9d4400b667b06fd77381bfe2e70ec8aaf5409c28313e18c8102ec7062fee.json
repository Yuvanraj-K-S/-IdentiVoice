{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\-IdentiVoice\\\\frontend\\\\src\\\\components\\\\VoiceRecorder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { registerVoice, loginVoice } from '../utils/api';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst VoiceRecorder = ({\n  mode,\n  userData,\n  handleStatus\n}) => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [countdown, setCountdown] = useState(10);\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [passphrase, setPassphrase] = useState('');\n\n  // Updated refs for AudioWorklet\n  const audioContextRef = useRef(null);\n  const audioStreamRef = useRef(null);\n  const audioWorkletNodeRef = useRef(null);\n  const audioDataRef = useRef([]);\n  const countdownRef = useRef(null);\n  const isProcessingRef = useRef(false);\n\n  // Memoize handleStatus to avoid render-phase updates\n  const safeHandleStatus = useCallback((message, type) => {\n    setTimeout(() => handleStatus(message, type), 0);\n  }, [handleStatus]);\n  useEffect(() => {\n    // Initialize AudioContext and load worklet on mount\n    const initAudioWorklet = async () => {\n      try {\n        const audioContext = new (window.AudioContext || window.webkitAudioContext)({\n          sampleRate: 16000\n        });\n        await audioContext.audioWorklet.addModule('/audioRecorderWorklet.js');\n        audioContextRef.current = audioContext;\n      } catch (err) {\n        console.error('Failed to initialize audio worklet:', err);\n        safeHandleStatus('Failed to initialize audio system. Please refresh the page.', 'error');\n      }\n    };\n    initAudioWorklet();\n    return () => {\n      cleanupRecording();\n      if (audioContextRef.current) {\n        audioContextRef.current.close();\n      }\n    };\n  }, [safeHandleStatus]);\n  const cleanupRecording = useCallback(() => {\n    try {\n      if (audioWorkletNodeRef.current) {\n        audioWorkletNodeRef.current.disconnect();\n        audioWorkletNodeRef.current = null;\n      }\n      if (audioStreamRef.current) {\n        audioStreamRef.current.getTracks().forEach(track => track.stop());\n      }\n      if (countdownRef.current) {\n        clearInterval(countdownRef.current);\n      }\n      audioDataRef.current = [];\n      setIsRecording(false);\n      setCountdown(10);\n    } catch (err) {\n      console.error('Error in cleanup:', err);\n    }\n  }, []);\n  const flattenAudioData = chunks => {\n    if (!chunks || !chunks.length) return new Float32Array(0);\n    let totalLength = 0;\n    for (const chunk of chunks) {\n      totalLength += chunk.length;\n    }\n    const result = new Float32Array(totalLength);\n    let offset = 0;\n    for (const chunk of chunks) {\n      if (chunk && chunk.length > 0) {\n        result.set(chunk, offset);\n        offset += chunk.length;\n      }\n    }\n    return result;\n  };\n  const floatTo16BitPCM = float32Array => {\n    const buffer = new Int16Array(float32Array.length);\n    for (let i = 0; i < float32Array.length; i++) {\n      const s = Math.max(-1, Math.min(1, float32Array[i]));\n      buffer[i] = s < 0 ? s * 0x8000 : s * 0x7FFF;\n    }\n    return buffer;\n  };\n  const createWavHeader = (totalSamples, sampleRate = 16000, numChannels = 1, bitsPerSample = 16) => {\n    const byteRate = sampleRate * numChannels * (bitsPerSample / 8);\n    const blockAlign = numChannels * (bitsPerSample / 8);\n    const subChunk2Size = totalSamples * blockAlign;\n    const chunkSize = 36 + subChunk2Size;\n    const buffer = new ArrayBuffer(44);\n    const view = new DataView(buffer);\n\n    // RIFF chunk descriptor\n    writeString(view, 0, 'RIFF'); // ChunkID\n    view.setUint32(4, chunkSize, true); // ChunkSize\n    writeString(view, 8, 'WAVE'); // Format\n\n    // fmt sub-chunk\n    writeString(view, 12, 'fmt '); // Subchunk1ID\n    view.setUint32(16, 16, true); // Subchunk1Size (16 for PCM)\n    view.setUint16(20, 1, true); // AudioFormat (1 for PCM)\n    view.setUint16(22, numChannels, true); // NumChannels\n    view.setUint32(24, sampleRate, true); // SampleRate\n    view.setUint32(28, byteRate, true); // ByteRate\n    view.setUint16(32, blockAlign, true); // BlockAlign\n    view.setUint16(34, bitsPerSample, true); // BitsPerSample\n\n    // data sub-chunk\n    writeString(view, 36, 'data'); // Subchunk2ID\n    view.setUint32(40, subChunk2Size, true); // Subchunk2Size\n\n    return buffer;\n  };\n  const writeString = (view, offset, string) => {\n    for (let i = 0; i < string.length; i++) {\n      view.setUint8(offset + i, string.charCodeAt(i));\n    }\n  };\n  const startRecording = async () => {\n    if (isProcessingRef.current) return;\n    try {\n      if (!audioContextRef.current) {\n        throw new Error('Audio system not initialized');\n      }\n      cleanupRecording();\n      isProcessingRef.current = true;\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          channelCount: 1,\n          sampleRate: 16000,\n          echoCancellation: true,\n          noiseSuppression: true\n        }\n      });\n      audioStreamRef.current = stream;\n      if (audioContextRef.current.state === 'suspended') {\n        await audioContextRef.current.resume();\n      }\n      const source = audioContextRef.current.createMediaStreamSource(stream);\n      const workletNode = new AudioWorkletNode(audioContextRef.current, 'audio-recorder-worklet');\n      audioDataRef.current = [];\n      workletNode.port.onmessage = event => {\n        if (event.data.eventType === 'data') {\n          console.log('Audio chunk received:', event.data.audioData.length);\n          audioDataRef.current.push(new Float32Array(event.data.audioData));\n        }\n      };\n      source.connect(workletNode);\n      workletNode.connect(audioContextRef.current.destination);\n      audioWorkletNodeRef.current = workletNode;\n      setIsRecording(true);\n      startCountdown();\n    } catch (err) {\n      console.error('Error starting recording:', err);\n      safeHandleStatus('Failed to start recording. Please check microphone permissions.', 'error');\n    } finally {\n      isProcessingRef.current = false;\n    }\n  };\n  const stopRecording = useCallback(() => {\n    if (isProcessingRef.current) return;\n    try {\n      isProcessingRef.current = true;\n      if (audioWorkletNodeRef.current) {\n        audioWorkletNodeRef.current.disconnect();\n      }\n      if (audioStreamRef.current) {\n        audioStreamRef.current.getTracks().forEach(track => track.stop());\n      }\n\n      // Process the recorded audio data\n      console.log('Total audio chunks:', audioDataRef.current.length);\n      const flatData = flattenAudioData(audioDataRef.current);\n      console.log('Flattened data length:', flatData.length);\n\n      // Ensure we have enough audio data (at least 1 second at 16kHz)\n      if (flatData.length < 16000) {\n        throw new Error('Recording too short. Please speak for at least 1 second.');\n      }\n\n      // Convert to PCM\n      const pcm = floatTo16BitPCM(flatData);\n      const header = createWavHeader(pcm.length, 16000, 1, 16);\n      const wavBuffer = new Uint8Array(header.byteLength + pcm.byteLength);\n      wavBuffer.set(new Uint8Array(header), 0);\n      wavBuffer.set(new Uint8Array(pcm.buffer), header.byteLength);\n      const wavBlob = new Blob([wavBuffer], {\n        type: 'audio/wav'\n      });\n\n      // Validate the WAV file before sending\n      const validateResult = validateWavFile(wavBuffer);\n      if (!validateResult.isValid) {\n        throw new Error(`Invalid WAV file: ${validateResult.error}`);\n      }\n      setAudioBlob(wavBlob);\n      processRecording(wavBlob);\n    } catch (err) {\n      console.error('Error stopping recording:', err);\n      safeHandleStatus('Failed to stop recording: ' + err.message, 'error');\n    } finally {\n      cleanupRecording();\n      isProcessingRef.current = false;\n    }\n  }, [cleanupRecording, safeHandleStatus]);\n  const validateWavFile = buffer => {\n    try {\n      const view = new DataView(buffer.buffer);\n\n      // Check RIFF header\n      const riff = String.fromCharCode(view.getUint8(0), view.getUint8(1), view.getUint8(2), view.getUint8(3));\n      if (riff !== 'RIFF') {\n        return {\n          isValid: false,\n          error: 'Invalid RIFF header'\n        };\n      }\n\n      // Check WAVE format\n      const wave = String.fromCharCode(view.getUint8(8), view.getUint8(9), view.getUint8(10), view.getUint8(11));\n      if (wave !== 'WAVE') {\n        return {\n          isValid: false,\n          error: 'Invalid WAVE format'\n        };\n      }\n\n      // Check sample rate (must be 16kHz)\n      const sampleRate = view.getUint32(24, true);\n      if (sampleRate !== 16000) {\n        return {\n          isValid: false,\n          error: 'Sample rate must be 16kHz'\n        };\n      }\n\n      // Check channels (must be mono)\n      const channels = view.getUint16(22, true);\n      if (channels !== 1) {\n        return {\n          isValid: false,\n          error: 'Must be mono channel'\n        };\n      }\n\n      // Check bits per sample (must be 16-bit)\n      const bitsPerSample = view.getUint16(34, true);\n      if (bitsPerSample !== 16) {\n        return {\n          isValid: false,\n          error: 'Must be 16-bit PCM'\n        };\n      }\n      return {\n        isValid: true\n      };\n    } catch (err) {\n      return {\n        isValid: false,\n        error: 'Failed to validate WAV file'\n      };\n    }\n  };\n  const startCountdown = useCallback(() => {\n    setCountdown(10);\n    countdownRef.current = setInterval(() => {\n      setCountdown(prev => {\n        if (prev <= 1) {\n          clearInterval(countdownRef.current);\n          stopRecording();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  }, [stopRecording]);\n  const processRecording = async blob => {\n    if (!blob || isProcessingRef.current) return;\n    try {\n      isProcessingRef.current = true;\n      let response;\n      if (mode === 'register') {\n        response = await registerVoice(blob, userData);\n      } else {\n        response = await loginVoice(blob, userData.username);\n      }\n      if (response.success) {\n        setPassphrase(response.passphrase || '');\n        safeHandleStatus(response.message, 'success');\n      } else {\n        safeHandleStatus(response.message, 'error');\n      }\n    } catch (err) {\n      console.error('Error processing recording:', err);\n      safeHandleStatus('Failed to process recording. Please try again.', 'error');\n    } finally {\n      isProcessingRef.current = false;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel-title\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-microphone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: mode === 'register' ? 'Voice Registration' : 'Voice Authentication'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `btn btn-primary ${isRecording || isProcessingRef.current ? 'disabled' : ''}`,\n        onClick: startRecording,\n        disabled: isRecording || isProcessingRef.current,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-microphone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 21\n        }, this), mode === 'register' ? 'Record Passphrase' : 'Verify Identity']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 17\n      }, this), isRecording && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-danger\",\n        onClick: stopRecording,\n        disabled: isProcessingRef.current,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 25\n        }, this), \" Stop Recording\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 13\n    }, this), isRecording && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recording-indicator\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pulse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Recording your voice... Please speak now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: countdown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"voice-wave\",\n        children: [...Array(8)].map((_, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wave-bar\"\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), passphrase && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-box\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-text\",\n        children: [\"Your \", mode === 'register' ? 'registered' : 'recognized', \" passphrase:\", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\" \\\"\", passphrase, \"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 328,\n    columnNumber: 9\n  }, this);\n};\n_s(VoiceRecorder, \"Dd/7Bqrjx6UOH0yS9eb5ehCASLY=\");\n_c = VoiceRecorder;\nexport default VoiceRecorder;\nvar _c;\n$RefreshReg$(_c, \"VoiceRecorder\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","registerVoice","loginVoice","jsxDEV","_jsxDEV","Fragment","_Fragment","VoiceRecorder","mode","userData","handleStatus","_s","isRecording","setIsRecording","countdown","setCountdown","audioBlob","setAudioBlob","passphrase","setPassphrase","audioContextRef","audioStreamRef","audioWorkletNodeRef","audioDataRef","countdownRef","isProcessingRef","safeHandleStatus","message","type","setTimeout","initAudioWorklet","audioContext","window","AudioContext","webkitAudioContext","sampleRate","audioWorklet","addModule","current","err","console","error","cleanupRecording","close","disconnect","getTracks","forEach","track","stop","clearInterval","flattenAudioData","chunks","length","Float32Array","totalLength","chunk","result","offset","set","floatTo16BitPCM","float32Array","buffer","Int16Array","i","s","Math","max","min","createWavHeader","totalSamples","numChannels","bitsPerSample","byteRate","blockAlign","subChunk2Size","chunkSize","ArrayBuffer","view","DataView","writeString","setUint32","setUint16","string","setUint8","charCodeAt","startRecording","Error","stream","navigator","mediaDevices","getUserMedia","audio","channelCount","echoCancellation","noiseSuppression","state","resume","source","createMediaStreamSource","workletNode","AudioWorkletNode","port","onmessage","event","data","eventType","log","audioData","push","connect","destination","startCountdown","stopRecording","flatData","pcm","header","wavBuffer","Uint8Array","byteLength","wavBlob","Blob","validateResult","validateWavFile","isValid","processRecording","riff","String","fromCharCode","getUint8","wave","getUint32","channels","getUint16","setInterval","prev","blob","response","username","success","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","Array","map","_","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/-IdentiVoice/frontend/src/components/VoiceRecorder.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport { registerVoice, loginVoice } from '../utils/api';\r\n\r\nconst VoiceRecorder = ({ mode, userData, handleStatus }) => {\r\n    const [isRecording, setIsRecording] = useState(false);\r\n    const [countdown, setCountdown] = useState(10);\r\n    const [audioBlob, setAudioBlob] = useState(null);\r\n    const [passphrase, setPassphrase] = useState('');\r\n    \r\n    // Updated refs for AudioWorklet\r\n    const audioContextRef = useRef(null);\r\n    const audioStreamRef = useRef(null);\r\n    const audioWorkletNodeRef = useRef(null);\r\n    const audioDataRef = useRef([]);\r\n    const countdownRef = useRef(null);\r\n    const isProcessingRef = useRef(false);\r\n\r\n    // Memoize handleStatus to avoid render-phase updates\r\n    const safeHandleStatus = useCallback((message, type) => {\r\n        setTimeout(() => handleStatus(message, type), 0);\r\n    }, [handleStatus]);\r\n\r\n    useEffect(() => {\r\n        // Initialize AudioContext and load worklet on mount\r\n        const initAudioWorklet = async () => {\r\n            try {\r\n                const audioContext = new (window.AudioContext || window.webkitAudioContext)({ sampleRate: 16000 });\r\n                await audioContext.audioWorklet.addModule('/audioRecorderWorklet.js');\r\n                audioContextRef.current = audioContext;\r\n            } catch (err) {\r\n                console.error('Failed to initialize audio worklet:', err);\r\n                safeHandleStatus('Failed to initialize audio system. Please refresh the page.', 'error');\r\n            }\r\n        };\r\n        \r\n        initAudioWorklet();\r\n        \r\n        return () => {\r\n            cleanupRecording();\r\n            if (audioContextRef.current) {\r\n                audioContextRef.current.close();\r\n            }\r\n        };\r\n    }, [safeHandleStatus]);\r\n\r\n    const cleanupRecording = useCallback(() => {\r\n        try {\r\n            if (audioWorkletNodeRef.current) {\r\n                audioWorkletNodeRef.current.disconnect();\r\n                audioWorkletNodeRef.current = null;\r\n            }\r\n            if (audioStreamRef.current) {\r\n                audioStreamRef.current.getTracks().forEach(track => track.stop());\r\n            }\r\n            if (countdownRef.current) {\r\n                clearInterval(countdownRef.current);\r\n            }\r\n            audioDataRef.current = [];\r\n            setIsRecording(false);\r\n            setCountdown(10);\r\n        } catch (err) {\r\n            console.error('Error in cleanup:', err);\r\n        }\r\n    }, []);\r\n\r\n    const flattenAudioData = (chunks) => {\r\n        if (!chunks || !chunks.length) return new Float32Array(0);\r\n        \r\n        let totalLength = 0;\r\n        for (const chunk of chunks) {\r\n            totalLength += chunk.length;\r\n        }\r\n        \r\n        const result = new Float32Array(totalLength);\r\n        let offset = 0;\r\n        \r\n        for (const chunk of chunks) {\r\n            if (chunk && chunk.length > 0) {\r\n                result.set(chunk, offset);\r\n                offset += chunk.length;\r\n            }\r\n        }\r\n        \r\n        return result;\r\n    };\r\n\r\n    const floatTo16BitPCM = (float32Array) => {\r\n        const buffer = new Int16Array(float32Array.length);\r\n        for (let i = 0; i < float32Array.length; i++) {\r\n            const s = Math.max(-1, Math.min(1, float32Array[i]));\r\n            buffer[i] = s < 0 ? s * 0x8000 : s * 0x7FFF;\r\n        }\r\n        return buffer;\r\n    };\r\n\r\n    const createWavHeader = (totalSamples, sampleRate = 16000, numChannels = 1, bitsPerSample = 16) => {\r\n        const byteRate = sampleRate * numChannels * (bitsPerSample / 8);\r\n        const blockAlign = numChannels * (bitsPerSample / 8);\r\n        const subChunk2Size = totalSamples * blockAlign;\r\n        const chunkSize = 36 + subChunk2Size;\r\n\r\n        const buffer = new ArrayBuffer(44);\r\n        const view = new DataView(buffer);\r\n\r\n        // RIFF chunk descriptor\r\n        writeString(view, 0, 'RIFF');                     // ChunkID\r\n        view.setUint32(4, chunkSize, true);              // ChunkSize\r\n        writeString(view, 8, 'WAVE');                     // Format\r\n\r\n        // fmt sub-chunk\r\n        writeString(view, 12, 'fmt ');                    // Subchunk1ID\r\n        view.setUint32(16, 16, true);                    // Subchunk1Size (16 for PCM)\r\n        view.setUint16(20, 1, true);                     // AudioFormat (1 for PCM)\r\n        view.setUint16(22, numChannels, true);           // NumChannels\r\n        view.setUint32(24, sampleRate, true);            // SampleRate\r\n        view.setUint32(28, byteRate, true);              // ByteRate\r\n        view.setUint16(32, blockAlign, true);            // BlockAlign\r\n        view.setUint16(34, bitsPerSample, true);         // BitsPerSample\r\n\r\n        // data sub-chunk\r\n        writeString(view, 36, 'data');                    // Subchunk2ID\r\n        view.setUint32(40, subChunk2Size, true);         // Subchunk2Size\r\n\r\n        return buffer;\r\n    };\r\n\r\n    const writeString = (view, offset, string) => {\r\n        for (let i = 0; i < string.length; i++) {\r\n            view.setUint8(offset + i, string.charCodeAt(i));\r\n        }\r\n    };\r\n\r\n    const startRecording = async () => {\r\n        if (isProcessingRef.current) return;\r\n        \r\n        try {\r\n            if (!audioContextRef.current) {\r\n                throw new Error('Audio system not initialized');\r\n            }\r\n\r\n            cleanupRecording();\r\n            isProcessingRef.current = true;\r\n\r\n            const stream = await navigator.mediaDevices.getUserMedia({ \r\n                audio: {\r\n                    channelCount: 1,\r\n                    sampleRate: 16000,\r\n                    echoCancellation: true,\r\n                    noiseSuppression: true\r\n                } \r\n            });\r\n            audioStreamRef.current = stream;\r\n\r\n            if (audioContextRef.current.state === 'suspended') {\r\n                await audioContextRef.current.resume();\r\n            }\r\n\r\n            const source = audioContextRef.current.createMediaStreamSource(stream);\r\n            const workletNode = new AudioWorkletNode(audioContextRef.current, 'audio-recorder-worklet');\r\n\r\n            audioDataRef.current = [];\r\n\r\n            workletNode.port.onmessage = (event) => {\r\n                if (event.data.eventType === 'data') {\r\n                    console.log('Audio chunk received:', event.data.audioData.length);\r\n                    audioDataRef.current.push(new Float32Array(event.data.audioData));\r\n                }\r\n            };\r\n\r\n            source.connect(workletNode);\r\n            workletNode.connect(audioContextRef.current.destination);\r\n\r\n            audioWorkletNodeRef.current = workletNode;\r\n            setIsRecording(true);\r\n            startCountdown();\r\n\r\n        } catch (err) {\r\n            console.error('Error starting recording:', err);\r\n            safeHandleStatus('Failed to start recording. Please check microphone permissions.', 'error');\r\n        } finally {\r\n            isProcessingRef.current = false;\r\n        }\r\n    };\r\n\r\n    const stopRecording = useCallback(() => {\r\n        if (isProcessingRef.current) return;\r\n        \r\n        try {\r\n            isProcessingRef.current = true;\r\n\r\n            if (audioWorkletNodeRef.current) {\r\n                audioWorkletNodeRef.current.disconnect();\r\n            }\r\n            if (audioStreamRef.current) {\r\n                audioStreamRef.current.getTracks().forEach(track => track.stop());\r\n            }\r\n\r\n            // Process the recorded audio data\r\n            console.log('Total audio chunks:', audioDataRef.current.length);\r\n            const flatData = flattenAudioData(audioDataRef.current);\r\n            console.log('Flattened data length:', flatData.length);\r\n\r\n            // Ensure we have enough audio data (at least 1 second at 16kHz)\r\n            if (flatData.length < 16000) {\r\n                throw new Error('Recording too short. Please speak for at least 1 second.');\r\n            }\r\n\r\n            // Convert to PCM\r\n            const pcm = floatTo16BitPCM(flatData);\r\n            const header = createWavHeader(pcm.length, 16000, 1, 16);\r\n\r\n            const wavBuffer = new Uint8Array(header.byteLength + pcm.byteLength);\r\n            wavBuffer.set(new Uint8Array(header), 0);\r\n            wavBuffer.set(new Uint8Array(pcm.buffer), header.byteLength);\r\n\r\n            const wavBlob = new Blob([wavBuffer], { type: 'audio/wav' });\r\n            \r\n            // Validate the WAV file before sending\r\n            const validateResult = validateWavFile(wavBuffer);\r\n            if (!validateResult.isValid) {\r\n                throw new Error(`Invalid WAV file: ${validateResult.error}`);\r\n            }\r\n\r\n            setAudioBlob(wavBlob);\r\n            processRecording(wavBlob);\r\n\r\n        } catch (err) {\r\n            console.error('Error stopping recording:', err);\r\n            safeHandleStatus('Failed to stop recording: ' + err.message, 'error');\r\n        } finally {\r\n            cleanupRecording();\r\n            isProcessingRef.current = false;\r\n        }\r\n    }, [cleanupRecording, safeHandleStatus]);\r\n\r\n    const validateWavFile = (buffer) => {\r\n        try {\r\n            const view = new DataView(buffer.buffer);\r\n            \r\n            // Check RIFF header\r\n            const riff = String.fromCharCode(\r\n                view.getUint8(0),\r\n                view.getUint8(1),\r\n                view.getUint8(2),\r\n                view.getUint8(3)\r\n            );\r\n            if (riff !== 'RIFF') {\r\n                return { isValid: false, error: 'Invalid RIFF header' };\r\n            }\r\n\r\n            // Check WAVE format\r\n            const wave = String.fromCharCode(\r\n                view.getUint8(8),\r\n                view.getUint8(9),\r\n                view.getUint8(10),\r\n                view.getUint8(11)\r\n            );\r\n            if (wave !== 'WAVE') {\r\n                return { isValid: false, error: 'Invalid WAVE format' };\r\n            }\r\n\r\n            // Check sample rate (must be 16kHz)\r\n            const sampleRate = view.getUint32(24, true);\r\n            if (sampleRate !== 16000) {\r\n                return { isValid: false, error: 'Sample rate must be 16kHz' };\r\n            }\r\n\r\n            // Check channels (must be mono)\r\n            const channels = view.getUint16(22, true);\r\n            if (channels !== 1) {\r\n                return { isValid: false, error: 'Must be mono channel' };\r\n            }\r\n\r\n            // Check bits per sample (must be 16-bit)\r\n            const bitsPerSample = view.getUint16(34, true);\r\n            if (bitsPerSample !== 16) {\r\n                return { isValid: false, error: 'Must be 16-bit PCM' };\r\n            }\r\n\r\n            return { isValid: true };\r\n        } catch (err) {\r\n            return { isValid: false, error: 'Failed to validate WAV file' };\r\n        }\r\n    };\r\n\r\n    const startCountdown = useCallback(() => {\r\n        setCountdown(10);\r\n        countdownRef.current = setInterval(() => {\r\n            setCountdown(prev => {\r\n                if (prev <= 1) {\r\n                    clearInterval(countdownRef.current);\r\n                    stopRecording();\r\n                    return 0;\r\n                }\r\n                return prev - 1;\r\n            });\r\n        }, 1000);\r\n    }, [stopRecording]);\r\n\r\n    const processRecording = async (blob) => {\r\n        if (!blob || isProcessingRef.current) return;\r\n        \r\n        try {\r\n            isProcessingRef.current = true;\r\n            let response;\r\n            \r\n            if (mode === 'register') {\r\n                response = await registerVoice(blob, userData);\r\n            } else {\r\n                response = await loginVoice(blob, userData.username);\r\n            }\r\n            \r\n            if (response.success) {\r\n                setPassphrase(response.passphrase || '');\r\n                safeHandleStatus(response.message, 'success');\r\n            } else {\r\n                safeHandleStatus(response.message, 'error');\r\n            }\r\n        } catch (err) {\r\n            console.error('Error processing recording:', err);\r\n            safeHandleStatus('Failed to process recording. Please try again.', 'error');\r\n        } finally {\r\n            isProcessingRef.current = false;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"panel\">\r\n            <div className=\"panel-title\">\r\n                <i className=\"fas fa-microphone\"></i>\r\n                <h2>{mode === 'register' ? 'Voice Registration' : 'Voice Authentication'}</h2>\r\n            </div>\r\n            \r\n            <div className=\"buttons\">\r\n                <button \r\n                    className={`btn btn-primary ${isRecording || isProcessingRef.current ? 'disabled' : ''}`}\r\n                    onClick={startRecording}\r\n                    disabled={isRecording || isProcessingRef.current}\r\n                >\r\n                    <i className=\"fas fa-microphone\"></i> \r\n                    {mode === 'register' ? 'Record Passphrase' : 'Verify Identity'}\r\n                </button>\r\n                {isRecording && (\r\n                    <button \r\n                        className=\"btn btn-danger\"\r\n                        onClick={stopRecording}\r\n                        disabled={isProcessingRef.current}\r\n                    >\r\n                        <i className=\"fas fa-stop\"></i> Stop Recording\r\n                    </button>\r\n                )}\r\n            </div>\r\n            \r\n            {isRecording && (\r\n                <>\r\n                    <div className=\"recording-indicator\">\r\n                        <div className=\"pulse\"></div>\r\n                        <div>Recording your voice... Please speak now</div>\r\n                    </div>\r\n                    <div className=\"timer\">{countdown}</div>\r\n                    <div className=\"voice-wave\">\r\n                        {[...Array(8)].map((_, i) => (\r\n                            <div key={i} className=\"wave-bar\"></div>\r\n                        ))}\r\n                    </div>\r\n                </>\r\n            )}\r\n            \r\n            {passphrase && (\r\n                <div className=\"result-box\">\r\n                    <div className=\"result-text\">\r\n                        Your {mode === 'register' ? 'registered' : 'recognized'} passphrase: \r\n                        <span> \"{passphrase}\"</span>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VoiceRecorder;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}