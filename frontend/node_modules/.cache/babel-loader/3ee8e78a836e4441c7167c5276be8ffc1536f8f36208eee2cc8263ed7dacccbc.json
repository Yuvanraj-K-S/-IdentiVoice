{"ast":null,"code":"const API_BASE = 'http://localhost:5000/api';\nexport const registerVoice = async (audioBlob, userData) => {\n  const formData = new FormData();\n  formData.append('audio', audioBlob, 'recording.wav');\n  for (const [key, value] of Object.entries(userData)) {\n    formData.append(key, value);\n  }\n  try {\n    const response = await fetch(`${API_BASE}/register`, {\n      method: 'POST',\n      body: formData\n    });\n    return await response.json();\n  } catch (err) {\n    console.error('Registration error:', err);\n    return {\n      success: false,\n      message: 'Failed to register voice'\n    };\n  }\n};\nexport const loginVoice = async (audioBlob, username) => {\n  const formData = new FormData();\n  formData.append('audio', audioBlob, 'recording.wav');\n  formData.append('username', username);\n  try {\n    const response = await fetch(`${API_BASE}/login`, {\n      method: 'POST',\n      body: formData\n    });\n    return await response.json();\n  } catch (err) {\n    console.error('Login error:', err);\n    return {\n      success: false,\n      message: 'Failed to authenticate'\n    };\n  }\n};","map":{"version":3,"names":["API_BASE","registerVoice","audioBlob","userData","formData","FormData","append","key","value","Object","entries","response","fetch","method","body","json","err","console","error","success","message","loginVoice","username"],"sources":["C:/Users/Administrator/Desktop/voice-auth-system/frontend/src/utils/api.js"],"sourcesContent":["const API_BASE = 'http://localhost:5000/api';\r\n\r\nexport const registerVoice = async (audioBlob, userData) => {\r\n    const formData = new FormData();\r\n    formData.append('audio', audioBlob, 'recording.wav');\r\n    \r\n    for (const [key, value] of Object.entries(userData)) {\r\n        formData.append(key, value);\r\n    }\r\n    \r\n    try {\r\n        const response = await fetch(`${API_BASE}/register`, {\r\n            method: 'POST',\r\n            body: formData\r\n        });\r\n        return await response.json();\r\n    } catch (err) {\r\n        console.error('Registration error:', err);\r\n        return { success: false, message: 'Failed to register voice' };\r\n    }\r\n};\r\n\r\nexport const loginVoice = async (audioBlob, username) => {\r\n    const formData = new FormData();\r\n    formData.append('audio', audioBlob, 'recording.wav');\r\n    formData.append('username', username);\r\n    \r\n    try {\r\n        const response = await fetch(`${API_BASE}/login`, {\r\n            method: 'POST',\r\n            body: formData\r\n        });\r\n        return await response.json();\r\n    } catch (err) {\r\n        console.error('Login error:', err);\r\n        return { success: false, message: 'Failed to authenticate' };\r\n    }\r\n};"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,2BAA2B;AAE5C,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAOC,SAAS,EAAEC,QAAQ,KAAK;EACxD,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEJ,SAAS,EAAE,eAAe,CAAC;EAEpD,KAAK,MAAM,CAACK,GAAG,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACP,QAAQ,CAAC,EAAE;IACjDC,QAAQ,CAACE,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC;EAC/B;EAEA,IAAI;IACA,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGZ,QAAQ,WAAW,EAAE;MACjDa,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEV;IACV,CAAC,CAAC;IACF,OAAO,MAAMO,QAAQ,CAACI,IAAI,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOC,GAAG,EAAE;IACVC,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEF,GAAG,CAAC;IACzC,OAAO;MAAEG,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE;IAA2B,CAAC;EAClE;AACJ,CAAC;AAED,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAOnB,SAAS,EAAEoB,QAAQ,KAAK;EACrD,MAAMlB,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEJ,SAAS,EAAE,eAAe,CAAC;EACpDE,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEgB,QAAQ,CAAC;EAErC,IAAI;IACA,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGZ,QAAQ,QAAQ,EAAE;MAC9Ca,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEV;IACV,CAAC,CAAC;IACF,OAAO,MAAMO,QAAQ,CAACI,IAAI,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOC,GAAG,EAAE;IACVC,OAAO,CAACC,KAAK,CAAC,cAAc,EAAEF,GAAG,CAAC;IAClC,OAAO;MAAEG,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE;IAAyB,CAAC;EAChE;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}