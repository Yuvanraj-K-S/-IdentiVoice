{"ast":null,"code":"const API_BASE = 'http://localhost:5000/api';\nconst validateAudioBlob = async blob => {\n  if (!blob) {\n    throw new Error('No audio data available');\n  }\n  if (!(blob instanceof Blob)) {\n    throw new Error('Invalid audio data format');\n  }\n  if (blob.size === 0) {\n    throw new Error('Audio file is empty');\n  }\n  if (blob.size < 44) {\n    throw new Error('Audio file too small to be valid WAV');\n  }\n\n  // Check WAV file format\n  const buffer = await blob.arrayBuffer();\n  const view = new DataView(buffer);\n\n  // Check RIFF header\n  const riffHeader = String.fromCharCode(view.getUint8(0), view.getUint8(1), view.getUint8(2), view.getUint8(3));\n  if (riffHeader !== 'RIFF') {\n    throw new Error('Invalid WAV file: missing RIFF header');\n  }\n\n  // Check WAVE format\n  const format = String.fromCharCode(view.getUint8(8), view.getUint8(9), view.getUint8(10), view.getUint8(11));\n  if (format !== 'WAVE') {\n    throw new Error('Invalid WAV file: missing WAVE format');\n  }\n\n  // Check fmt chunk\n  const fmtHeader = String.fromCharCode(view.getUint8(12), view.getUint8(13), view.getUint8(14), view.getUint8(15));\n  if (fmtHeader !== 'fmt ') {\n    throw new Error('Invalid WAV file: missing fmt chunk');\n  }\n\n  // Check audio format (1 = PCM)\n  const audioFormat = view.getUint16(20, true);\n  if (audioFormat !== 1) {\n    throw new Error('Invalid WAV file: must be PCM format');\n  }\n\n  // Check channels (must be mono)\n  const channels = view.getUint16(22, true);\n  if (channels !== 1) {\n    throw new Error('Invalid WAV file: must be mono channel');\n  }\n\n  // Check sample rate (must be 16kHz)\n  const sampleRate = view.getUint32(24, true);\n  if (sampleRate !== 16000) {\n    throw new Error('Invalid WAV file: sample rate must be 16kHz');\n  }\n\n  // Check bits per sample (must be 16-bit)\n  const bitsPerSample = view.getUint16(34, true);\n  if (bitsPerSample !== 16) {\n    throw new Error('Invalid WAV file: must be 16-bit');\n  }\n};\nexport const registerVoice = async (audioBlob, userData) => {\n  try {\n    await validateAudioBlob(audioBlob);\n    const formData = new FormData();\n    formData.append('audio', audioBlob, 'recording.wav');\n    for (const [key, value] of Object.entries(userData)) {\n      formData.append(key, value);\n    }\n    const response = await fetch(`${API_BASE}/register`, {\n      method: 'POST',\n      body: formData\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Server error during registration');\n    }\n    return data;\n  } catch (err) {\n    console.error('Registration error:', err);\n    return {\n      success: false,\n      message: err.message || 'Failed to register voice'\n    };\n  }\n};\nexport const loginVoice = async (audioBlob, username) => {\n  try {\n    await validateAudioBlob(audioBlob);\n    const formData = new FormData();\n    formData.append('audio', audioBlob, 'recording.wav');\n    formData.append('username', username);\n    const response = await fetch(`${API_BASE}/login`, {\n      method: 'POST',\n      body: formData\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Server error during login');\n    }\n    return data;\n  } catch (err) {\n    console.error('Login error:', err);\n    return {\n      success: false,\n      message: err.message || 'Failed to authenticate'\n    };\n  }\n};","map":{"version":3,"names":["API_BASE","validateAudioBlob","blob","Error","Blob","size","buffer","arrayBuffer","view","DataView","riffHeader","String","fromCharCode","getUint8","format","fmtHeader","audioFormat","getUint16","channels","sampleRate","getUint32","bitsPerSample","registerVoice","audioBlob","userData","formData","FormData","append","key","value","Object","entries","response","fetch","method","body","data","json","ok","message","err","console","error","success","loginVoice","username"],"sources":["C:/Users/Administrator/Desktop/-IdentiVoice/frontend/src/utils/api.js"],"sourcesContent":["const API_BASE = 'http://localhost:5000/api';\r\n\r\nconst validateAudioBlob = async (blob) => {\r\n    if (!blob) {\r\n        throw new Error('No audio data available');\r\n    }\r\n    if (!(blob instanceof Blob)) {\r\n        throw new Error('Invalid audio data format');\r\n    }\r\n    if (blob.size === 0) {\r\n        throw new Error('Audio file is empty');\r\n    }\r\n    if (blob.size < 44) {\r\n        throw new Error('Audio file too small to be valid WAV');\r\n    }\r\n\r\n    // Check WAV file format\r\n    const buffer = await blob.arrayBuffer();\r\n    const view = new DataView(buffer);\r\n    \r\n    // Check RIFF header\r\n    const riffHeader = String.fromCharCode(\r\n        view.getUint8(0),\r\n        view.getUint8(1),\r\n        view.getUint8(2),\r\n        view.getUint8(3)\r\n    );\r\n    if (riffHeader !== 'RIFF') {\r\n        throw new Error('Invalid WAV file: missing RIFF header');\r\n    }\r\n\r\n    // Check WAVE format\r\n    const format = String.fromCharCode(\r\n        view.getUint8(8),\r\n        view.getUint8(9),\r\n        view.getUint8(10),\r\n        view.getUint8(11)\r\n    );\r\n    if (format !== 'WAVE') {\r\n        throw new Error('Invalid WAV file: missing WAVE format');\r\n    }\r\n\r\n    // Check fmt chunk\r\n    const fmtHeader = String.fromCharCode(\r\n        view.getUint8(12),\r\n        view.getUint8(13),\r\n        view.getUint8(14),\r\n        view.getUint8(15)\r\n    );\r\n    if (fmtHeader !== 'fmt ') {\r\n        throw new Error('Invalid WAV file: missing fmt chunk');\r\n    }\r\n\r\n    // Check audio format (1 = PCM)\r\n    const audioFormat = view.getUint16(20, true);\r\n    if (audioFormat !== 1) {\r\n        throw new Error('Invalid WAV file: must be PCM format');\r\n    }\r\n\r\n    // Check channels (must be mono)\r\n    const channels = view.getUint16(22, true);\r\n    if (channels !== 1) {\r\n        throw new Error('Invalid WAV file: must be mono channel');\r\n    }\r\n\r\n    // Check sample rate (must be 16kHz)\r\n    const sampleRate = view.getUint32(24, true);\r\n    if (sampleRate !== 16000) {\r\n        throw new Error('Invalid WAV file: sample rate must be 16kHz');\r\n    }\r\n\r\n    // Check bits per sample (must be 16-bit)\r\n    const bitsPerSample = view.getUint16(34, true);\r\n    if (bitsPerSample !== 16) {\r\n        throw new Error('Invalid WAV file: must be 16-bit');\r\n    }\r\n};\r\n\r\nexport const registerVoice = async (audioBlob, userData) => {\r\n    try {\r\n        await validateAudioBlob(audioBlob);\r\n        \r\n        const formData = new FormData();\r\n        formData.append('audio', audioBlob, 'recording.wav');\r\n        \r\n        for (const [key, value] of Object.entries(userData)) {\r\n            formData.append(key, value);\r\n        }\r\n        \r\n        const response = await fetch(`${API_BASE}/register`, {\r\n            method: 'POST',\r\n            body: formData\r\n        });\r\n\r\n        const data = await response.json();\r\n        \r\n        if (!response.ok) {\r\n            throw new Error(data.message || 'Server error during registration');\r\n        }\r\n        \r\n        return data;\r\n    } catch (err) {\r\n        console.error('Registration error:', err);\r\n        return { \r\n            success: false, \r\n            message: err.message || 'Failed to register voice' \r\n        };\r\n    }\r\n};\r\n\r\nexport const loginVoice = async (audioBlob, username) => {\r\n    try {\r\n        await validateAudioBlob(audioBlob);\r\n        \r\n        const formData = new FormData();\r\n        formData.append('audio', audioBlob, 'recording.wav');\r\n        formData.append('username', username);\r\n        \r\n        const response = await fetch(`${API_BASE}/login`, {\r\n            method: 'POST',\r\n            body: formData\r\n        });\r\n\r\n        const data = await response.json();\r\n        \r\n        if (!response.ok) {\r\n            throw new Error(data.message || 'Server error during login');\r\n        }\r\n        \r\n        return data;\r\n    } catch (err) {\r\n        console.error('Login error:', err);\r\n        return { \r\n            success: false, \r\n            message: err.message || 'Failed to authenticate' \r\n        };\r\n    }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}